{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBuildSourceFileToGroup = addBuildSourceFileToGroup;\nexports.addFileToGroupAndLink = addFileToGroupAndLink;\nexports.addFramework = addFramework;\nexports.addResourceFileToGroup = addResourceFileToGroup;\nexports.ensureGroupRecursively = ensureGroupRecursively;\nexports.getApplicationNativeTarget = getApplicationNativeTarget;\nexports.getBuildConfigurationForListIdAndName = getBuildConfigurationForListIdAndName;\nexports.getBuildConfigurationsForListId = getBuildConfigurationsForListId;\nexports.getHackyProjectName = getHackyProjectName;\nexports.getPbxproj = getPbxproj;\nexports.getProductName = getProductName;\nexports.getProjectName = getProjectName;\nexports.getProjectSection = getProjectSection;\nexports.getXCConfigurationListEntries = getXCConfigurationListEntries;\nexports.isBuildConfig = isBuildConfig;\nexports.isNotComment = isNotComment;\nexports.isNotTestHost = isNotTestHost;\nexports.resolvePathOrProject = resolvePathOrProject;\nexports.sanitizedName = sanitizedName;\nexports.unquote = unquote;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _slugify() {\n  var data = _interopRequireDefault(require(\"slugify\"));\n  _slugify = function _slugify() {\n    return data;\n  };\n  return data;\n}\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n  _xcode = function _xcode() {\n    return data;\n  };\n  return data;\n}\nfunction _pbxFile() {\n  var data = _interopRequireDefault(require(\"xcode/lib/pbxFile\"));\n  _pbxFile = function _pbxFile() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction Paths() {\n  var data = _interopRequireWildcard(require(\"../Paths\"));\n  Paths = function Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _string() {\n  var data = require(\"./string\");\n  _string = function _string() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getProjectName(projectRoot) {\n  var sourceRoot = Paths().getSourceRoot(projectRoot);\n  return _path().default.basename(sourceRoot);\n}\nfunction resolvePathOrProject(projectRootOrProject) {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch (_unused) {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\nfunction sanitizedName(name) {\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects((0, _slugify().default)(name)) || 'app';\n}\nfunction sanitizedNameForProjects(name) {\n  return name.replace(/[\\W_]+/g, '').normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nfunction getHackyProjectName(projectRoot, config) {\n  try {\n    return getProjectName(projectRoot);\n  } catch (_unused2) {\n    var projectName = config.name;\n    (0, _assert().default)(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\nfunction createProjectFileForGroup(_ref) {\n  var filepath = _ref.filepath,\n    group = _ref.group;\n  var file = new (_pbxFile().default)(filepath);\n  var conflictingFile = group.children.find(function (child) {\n    return child.comment === file.basename;\n  });\n  if (conflictingFile) {\n    return null;\n  }\n  return file;\n}\nfunction addResourceFileToGroup(_ref2) {\n  var filepath = _ref2.filepath,\n    groupName = _ref2.groupName,\n    isBuildFile = _ref2.isBuildFile,\n    project = _ref2.project,\n    verbose = _ref2.verbose,\n    targetUuid = _ref2.targetUuid;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    targetUuid: targetUuid,\n    addFileToProject: function addFileToProject(_ref3) {\n      var project = _ref3.project,\n        file = _ref3.file;\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    }\n  });\n}\nfunction addBuildSourceFileToGroup(_ref4) {\n  var filepath = _ref4.filepath,\n    groupName = _ref4.groupName,\n    project = _ref4.project,\n    verbose = _ref4.verbose,\n    targetUuid = _ref4.targetUuid;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    targetUuid: targetUuid,\n    addFileToProject: function addFileToProject(_ref5) {\n      var project = _ref5.project,\n        file = _ref5.file;\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    }\n  });\n}\nfunction addFileToGroupAndLink(_ref6) {\n  var filepath = _ref6.filepath,\n    groupName = _ref6.groupName,\n    project = _ref6.project,\n    verbose = _ref6.verbose,\n    addFileToProject = _ref6.addFileToProject,\n    targetUuid = _ref6.targetUuid;\n  var group = pbxGroupByPathOrAssert(project, groupName);\n  var file = createProjectFileForGroup({\n    filepath: filepath,\n    group: group\n  });\n  if (!file) {\n    if (verbose) {\n      (0, _warnings().addWarningIOS)('ios-xcode-project', \"Skipped adding duplicate file \\\"\" + filepath + \"\\\" to PBXGroup named \\\"\" + groupName + \"\\\"\");\n    }\n    return project;\n  }\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget === null || applicationNativeTarget === void 0 ? void 0 : applicationNativeTarget.uuid;\n  }\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n  addFileToProject({\n    project: project,\n    file: file\n  });\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename\n  });\n  return project;\n}\nfunction getApplicationNativeTarget(_ref7) {\n  var project = _ref7.project,\n    projectName = _ref7.projectName;\n  var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  (0, _assert().default)(applicationNativeTarget, \"Couldn't locate application PBXNativeTarget in '.xcodeproj' file.\");\n  (0, _assert().default)(String(applicationNativeTarget.target.name) === projectName, \"Application native target name mismatch. Expected \" + projectName + \", but found \" + applicationNativeTarget.target.name + \".\");\n  return applicationNativeTarget;\n}\nfunction addFramework(_ref8) {\n  var project = _ref8.project,\n    projectName = _ref8.projectName,\n    framework = _ref8.framework;\n  var target = getApplicationNativeTarget({\n    project: project,\n    projectName: projectName\n  });\n  return project.addFramework(framework, {\n    target: target.uuid\n  });\n}\nfunction splitPath(path) {\n  return path.split('/');\n}\nvar findGroup = function findGroup(group, name) {\n  if (!group) {\n    return undefined;\n  }\n  return group.children.find(function (group) {\n    return group.comment === name;\n  });\n};\nfunction findGroupInsideGroup(project, group, name) {\n  var foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    var _project$getPBXGroupB;\n    return (_project$getPBXGroupB = project.getPBXGroupByKey(foundGroup.value)) !== null && _project$getPBXGroupB !== void 0 ? _project$getPBXGroupB : null;\n  }\n  return null;\n}\nfunction pbxGroupByPathOrAssert(project, path) {\n  var _project$getFirstProj = project.getFirstProject(),\n    firstProject = _project$getFirstProj.firstProject;\n  var group = project.getPBXGroupByKey(firstProject.mainGroup);\n  var components = splitPath(path);\n  for (var name of components) {\n    var nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n  if (!group) {\n    throw Error(\"Xcode PBXGroup with name \\\"\" + path + \"\\\" could not be found in the Xcode project.\");\n  }\n  return group;\n}\nfunction ensureGroupRecursively(project, filepath) {\n  var _topMostGroup;\n  var components = splitPath(filepath);\n  var hasChild = function hasChild(group, name) {\n    return group.children.find(function (_ref9) {\n      var comment = _ref9.comment;\n      return comment === name;\n    });\n  };\n  var _project$getFirstProj2 = project.getFirstProject(),\n    firstProject = _project$getFirstProj2.firstProject;\n  var topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n  for (var pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"')\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return (_topMostGroup = topMostGroup) !== null && _topMostGroup !== void 0 ? _topMostGroup : null;\n}\nfunction getPbxproj(projectRoot) {\n  var projectPath = Paths().getPBXProjectPath(projectRoot);\n  var project = _xcode().default.project(projectPath);\n  project.parseSync();\n  return project;\n}\nfunction getProductName(project) {\n  var productName = '$(TARGET_NAME)';\n  try {\n    productName = project.productName;\n  } catch (_unused3) {}\n  if (productName === '$(TARGET_NAME)') {\n    var _project$getFirstTarg, _project$getFirstTarg2;\n    var targetName = (_project$getFirstTarg = project.getFirstTarget()) === null || _project$getFirstTarg === void 0 ? void 0 : (_project$getFirstTarg2 = _project$getFirstTarg.firstTarget) === null || _project$getFirstTarg2 === void 0 ? void 0 : _project$getFirstTarg2.productName;\n    productName = targetName !== null && targetName !== void 0 ? targetName : productName;\n  }\n  return productName;\n}\nfunction getProjectSection(project) {\n  return project.pbxProjectSection();\n}\nfunction getXCConfigurationListEntries(project) {\n  var lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\nfunction getBuildConfigurationsForListId(project, configurationListId) {\n  var configurationListEntries = getXCConfigurationListEntries(project);\n  var _configurationListEnt = configurationListEntries.find(function (_ref10) {\n      var _ref11 = _slicedToArray(_ref10, 1),\n        key = _ref11[0];\n      return key === configurationListId;\n    }),\n    _configurationListEnt2 = _slicedToArray(_configurationListEnt, 2),\n    configurationList = _configurationListEnt2[1];\n  var buildConfigurations = configurationList.buildConfigurations.map(function (i) {\n    return i.value;\n  });\n  return Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment).filter(isBuildConfig).filter(function (_ref12) {\n    var _ref13 = _slicedToArray(_ref12, 1),\n      key = _ref13[0];\n    return buildConfigurations.includes(key);\n  });\n}\nfunction getBuildConfigurationForListIdAndName(project, _ref14) {\n  var configurationListId = _ref14.configurationListId,\n    buildConfiguration = _ref14.buildConfiguration;\n  var xcBuildConfigurationEntry = getBuildConfigurationsForListId(project, configurationListId).find(function (i) {\n    return (0, _string().trimQuotes)(i[1].name) === buildConfiguration;\n  });\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\"Build configuration '\" + buildConfiguration + \"' does not exist in list with id '\" + configurationListId + \"'\");\n  }\n  return xcBuildConfigurationEntry;\n}\nfunction isBuildConfig(_ref15) {\n  var _ref16 = _slicedToArray(_ref15, 2),\n    sectionItem = _ref16[1];\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\nfunction isNotTestHost(_ref17) {\n  var _ref18 = _slicedToArray(_ref17, 2),\n    sectionItem = _ref18[1];\n  return !sectionItem.buildSettings.TEST_HOST;\n}\nfunction isNotComment(_ref19) {\n  var _ref20 = _slicedToArray(_ref19, 1),\n    key = _ref20[0];\n  return !key.endsWith(\"_comment\");\n}\nfunction unquote(value) {\n  var _value$match$, _value$match;\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return (_value$match$ = (_value$match = value.match(/^\"(.*)\"$/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : value;\n}","map":{"version":3,"sources":["../../../src/ios/utils/Xcodeproj.ts"],"names":["getProjectName","projectRoot","sourceRoot","Paths","getSourceRoot","path","basename","resolvePathOrProject","projectRootOrProject","getPbxproj","sanitizedName","name","sanitizedNameForProjects","replace","normalize","getHackyProjectName","config","projectName","createProjectFileForGroup","filepath","group","file","pbxFile","conflictingFile","children","find","child","comment","addResourceFileToGroup","groupName","isBuildFile","project","verbose","targetUuid","addFileToGroupAndLink","addFileToProject","addToPbxFileReferenceSection","addToPbxBuildFileSection","addToPbxResourcesBuildPhase","addBuildSourceFileToGroup","addToPbxSourcesBuildPhase","pbxGroupByPathOrAssert","target","applicationNativeTarget","getTarget","uuid","generateUuid","fileRef","push","value","getApplicationNativeTarget","String","addFramework","framework","splitPath","split","findGroup","undefined","findGroupInsideGroup","foundGroup","getPBXGroupByKey","firstProject","getFirstProject","mainGroup","components","nextGroup","Error","ensureGroupRecursively","hasChild","topMostGroup","pathComponent","pbxCreateGroup","pbxGroupByName","projectPath","getPBXProjectPath","xcode","parseSync","getProductName","productName","targetName","getFirstTarget","firstTarget","getProjectSection","pbxProjectSection","getXCConfigurationListEntries","lists","pbxXCConfigurationList","Object","entries","filter","isNotComment","getBuildConfigurationsForListId","configurationListId","configurationListEntries","configurationList","key","buildConfigurations","map","i","pbxXCBuildConfigurationSection","isBuildConfig","includes","getBuildConfigurationForListIdAndName","buildConfiguration","xcBuildConfigurationEntry","sectionItem","isa","isNotTestHost","buildSettings","TEST_HOST","endsWith","unquote","match"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\nimport path from 'path';\nimport slugify from 'slugify';\nimport xcode, {\n  PBXFile,\n  PBXGroup,\n  PBXNativeTarget,\n  PBXProject,\n  UUID,\n  XCBuildConfiguration,\n  XCConfigurationList,\n  XcodeProject,\n} from 'xcode';\nimport pbxFile from 'xcode/lib/pbxFile';\n\nimport { addWarningIOS } from '../../utils/warnings';\nimport * as Paths from '../Paths';\nimport { trimQuotes } from './string';\n\nexport type ProjectSectionEntry = [string, PBXProject];\n\nexport type NativeTargetSection = Record<string, PBXNativeTarget>;\n\nexport type NativeTargetSectionEntry = [string, PBXNativeTarget];\n\nexport type ConfigurationLists = Record<string, XCConfigurationList>;\n\nexport type ConfigurationListEntry = [string, XCConfigurationList];\n\nexport type ConfigurationSectionEntry = [string, XCBuildConfiguration];\n\nexport function getProjectName(projectRoot: string) {\n  const sourceRoot = Paths.getSourceRoot(projectRoot);\n  return path.basename(sourceRoot);\n}\n\nexport function resolvePathOrProject(\n  projectRootOrProject: string | XcodeProject\n): XcodeProject | null {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nexport function sanitizedName(name: string) {\n  // Default to the name `app` when every safe character has been sanitized\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects(slugify(name)) || 'app';\n}\n\nfunction sanitizedNameForProjects(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getHackyProjectName(projectRoot: string, config: ExpoConfig): string {\n  // Attempt to get the current ios folder name (apply).\n  try {\n    return getProjectName(projectRoot);\n  } catch {\n    // If no iOS project exists then create a new one (eject).\n    const projectName = config.name;\n    assert(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\n\nfunction createProjectFileForGroup({ filepath, group }: { filepath: string; group: PBXGroup }) {\n  const file = new pbxFile(filepath);\n\n  const conflictingFile = group.children.find((child) => child.comment === file.basename);\n  if (conflictingFile) {\n    // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n    // Not much we can do here since it might be a conflicting file.\n    return null;\n  }\n  return file;\n}\n\n/**\n * Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addResourceFileToGroup({\n  filepath,\n  groupName,\n  // Should add to `PBXBuildFile Section`\n  isBuildFile,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  isBuildFile?: boolean;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    targetUuid,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    },\n  });\n}\n\n/**\n * Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addBuildSourceFileToGroup({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    targetUuid,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    },\n  });\n}\n\n// TODO(brentvatne): I couldn't figure out how to do this with an existing\n// higher level function exposed by the xcode library, but we should find out how to do\n// that and replace this with it\nexport function addFileToGroupAndLink({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  addFileToProject,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n  addFileToProject: (props: { file: PBXFile; project: XcodeProject }) => void;\n}): XcodeProject {\n  const group = pbxGroupByPathOrAssert(project, groupName);\n\n  const file = createProjectFileForGroup({ filepath, group });\n\n  if (!file) {\n    if (verbose) {\n      // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n      // Not much we can do here since it might be a conflicting file.\n      addWarningIOS(\n        'ios-xcode-project',\n        `Skipped adding duplicate file \"${filepath}\" to PBXGroup named \"${groupName}\"`\n      );\n    }\n    return project;\n  }\n\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget?.uuid;\n  }\n\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n\n  addFileToProject({ project, file });\n\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename,\n  });\n  return project;\n}\n\nexport function getApplicationNativeTarget({\n  project,\n  projectName,\n}: {\n  project: XcodeProject;\n  projectName: string;\n}) {\n  const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  assert(\n    applicationNativeTarget,\n    `Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`\n  );\n  assert(\n    String(applicationNativeTarget.target.name) === projectName,\n    `Application native target name mismatch. Expected ${projectName}, but found ${applicationNativeTarget.target.name}.`\n  );\n  return applicationNativeTarget;\n}\n\n/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */\nexport function addFramework({\n  project,\n  projectName,\n  framework,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  framework: string;\n}) {\n  const target = getApplicationNativeTarget({ project, projectName });\n  return project.addFramework(framework, { target: target.uuid });\n}\n\nfunction splitPath(path: string): string[] {\n  // TODO: Should we account for other platforms that may not use `/`\n  return path.split('/');\n}\n\nconst findGroup = (\n  group: PBXGroup | undefined,\n  name: string\n):\n  | {\n      value: UUID;\n      comment?: string;\n    }\n  | undefined => {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find((group) => group.comment === name);\n};\n\nfunction findGroupInsideGroup(\n  project: XcodeProject,\n  group: PBXGroup | undefined,\n  name: string\n): null | PBXGroup {\n  const foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    return project.getPBXGroupByKey(foundGroup.value) ?? null;\n  }\n  return null;\n}\n\nfunction pbxGroupByPathOrAssert(project: XcodeProject, path: string): PBXGroup {\n  const { firstProject } = project.getFirstProject();\n\n  let group = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  const components = splitPath(path);\n  for (const name of components) {\n    const nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n\n  if (!group) {\n    throw Error(`Xcode PBXGroup with name \"${path}\" could not be found in the Xcode project.`);\n  }\n\n  return group;\n}\n\nexport function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null {\n  const components = splitPath(filepath);\n  const hasChild = (group: PBXGroup, name: string) =>\n    group.children.find(({ comment }) => comment === name);\n  const { firstProject } = project.getFirstProject();\n\n  let topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (const pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"'),\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return topMostGroup ?? null;\n}\n\n/**\n * Get the pbxproj for the given path\n */\nexport function getPbxproj(projectRoot: string): XcodeProject {\n  const projectPath = Paths.getPBXProjectPath(projectRoot);\n  const project = xcode.project(projectPath);\n  project.parseSync();\n  return project;\n}\n\n/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */\nexport function getProductName(project: XcodeProject): string {\n  let productName = '$(TARGET_NAME)';\n  try {\n    // If the product name is numeric, this will fail (it's a getter).\n    // If the bundle identifier' final component is only numeric values, then the PRODUCT_NAME\n    // will be a numeric value, this results in a bug where the product name isn't useful,\n    // i.e. `com.bacon.001` -> `1` -- in this case, use the first target name.\n    productName = project.productName;\n  } catch {}\n\n  if (productName === '$(TARGET_NAME)') {\n    const targetName = project.getFirstTarget()?.firstTarget?.productName;\n    productName = targetName ?? productName;\n  }\n\n  return productName;\n}\n\nexport function getProjectSection(project: XcodeProject) {\n  return project.pbxProjectSection();\n}\n\nexport function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[] {\n  const lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nexport function getBuildConfigurationsForListId(\n  project: XcodeProject,\n  configurationListId: string\n): ConfigurationSectionEntry[] {\n  const configurationListEntries = getXCConfigurationListEntries(project);\n  const [, configurationList] = configurationListEntries.find(\n    ([key]) => key === configurationListId\n  ) as ConfigurationListEntry;\n\n  const buildConfigurations = configurationList.buildConfigurations.map((i) => i.value);\n\n  return Object.entries(project.pbxXCBuildConfigurationSection())\n    .filter(isNotComment)\n    .filter(isBuildConfig)\n    .filter(([key]: ConfigurationSectionEntry) => buildConfigurations.includes(key));\n}\n\nexport function getBuildConfigurationForListIdAndName(\n  project: XcodeProject,\n  {\n    configurationListId,\n    buildConfiguration,\n  }: { configurationListId: string; buildConfiguration: string }\n): ConfigurationSectionEntry {\n  const xcBuildConfigurationEntry = getBuildConfigurationsForListId(\n    project,\n    configurationListId\n  ).find((i) => trimQuotes(i[1].name) === buildConfiguration);\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\n      `Build configuration '${buildConfiguration}' does not exist in list with id '${configurationListId}'`\n    );\n  }\n  return xcBuildConfigurationEntry;\n}\n\nexport function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nexport function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nexport function isNotComment([key]:\n  | ConfigurationSectionEntry\n  | ProjectSectionEntry\n  | ConfigurationListEntry\n  | NativeTargetSectionEntry): boolean {\n  return !key.endsWith(`_comment`);\n}\n\n// Remove surrounding double quotes if they exist.\nexport function unquote(value: string): string {\n  // projects with numeric names will fail due to a bug in the xcode package.\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return value.match(/^\"(.*)\"$/)?.[1] ?? value;\n}\n"]},"metadata":{},"sourceType":"script"}