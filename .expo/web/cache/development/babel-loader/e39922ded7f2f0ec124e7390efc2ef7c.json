{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = renderIntentFilters;\nexports.getIntentFilters = getIntentFilters;\nexports.setAndroidIntentFilters = setAndroidIntentFilters;\nexports.withAndroidIntentFilters = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n  _Manifest = function _Manifest() {\n    return data;\n  };\n  return data;\n}\nvar GENERATED_TAG = 'data-generated';\nvar withAndroidIntentFilters = (0, _androidPlugins().createAndroidManifestPlugin)(setAndroidIntentFilters, 'withAndroidIntentFilters');\nexports.withAndroidIntentFilters = withAndroidIntentFilters;\nfunction getIntentFilters(config) {\n  var _config$android$inten, _config$android;\n  return (_config$android$inten = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.intentFilters) !== null && _config$android$inten !== void 0 ? _config$android$inten : [];\n}\nfunction setAndroidIntentFilters(config, androidManifest) {\n  var _mainActivity$intent, _mainActivity$intent2;\n  var mainActivity = (0, _Manifest().getMainActivityOrThrow)(androidManifest);\n  if ((_mainActivity$intent = mainActivity['intent-filter']) !== null && _mainActivity$intent !== void 0 && _mainActivity$intent.length) {\n    mainActivity['intent-filter'] = mainActivity['intent-filter'].filter(function (value) {\n      var _value$$;\n      return ((_value$$ = value.$) === null || _value$$ === void 0 ? void 0 : _value$$[GENERATED_TAG]) !== 'true';\n    });\n  }\n  var intentFilters = getIntentFilters(config);\n  if (!intentFilters.length) {\n    return androidManifest;\n  }\n  mainActivity['intent-filter'] = (_mainActivity$intent2 = mainActivity['intent-filter']) === null || _mainActivity$intent2 === void 0 ? void 0 : _mainActivity$intent2.concat(renderIntentFilters(intentFilters));\n  return androidManifest;\n}\nfunction renderIntentFilters(intentFilters) {\n  return intentFilters.map(function (intentFilter) {\n    return {\n      $: _defineProperty({\n        'android:autoVerify': intentFilter.autoVerify ? 'true' : undefined\n      }, GENERATED_TAG, 'true'),\n      action: [{\n        $: {\n          'android:name': \"android.intent.action.\" + intentFilter.action\n        }\n      }],\n      data: renderIntentFilterData(intentFilter.data),\n      category: renderIntentFilterCategory(intentFilter.category)\n    };\n  });\n}\nfunction renderIntentFilterData(data) {\n  return (Array.isArray(data) ? data : [data]).filter(Boolean).map(function (datum) {\n    return {\n      $: Object.entries(datum !== null && datum !== void 0 ? datum : {}).reduce(function (prev, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        return Object.assign({}, prev, _defineProperty({}, \"android:\" + key, value));\n      }, {})\n    };\n  });\n}\nfunction renderIntentFilterCategory(category) {\n  return (Array.isArray(category) ? category : [category]).filter(Boolean).map(function (cat) {\n    return {\n      $: {\n        'android:name': \"android.intent.category.\" + cat\n      }\n    };\n  });\n}","map":{"version":3,"sources":["../../src/android/IntentFilters.ts"],"names":["GENERATED_TAG","withAndroidIntentFilters","setAndroidIntentFilters","getIntentFilters","config","android","intentFilters","androidManifest","mainActivity","length","filter","value","$","concat","renderIntentFilters","map","intentFilter","autoVerify","undefined","action","data","renderIntentFilterData","category","renderIntentFilterCategory","Array","isArray","Boolean","datum","entries","reduce","prev","key","cat"],"mappings":"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","sourcesContent":["import { Android, AndroidIntentFiltersData, ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow, ManifestIntentFilter } from './Manifest';\n\ntype AndroidIntentFilters = NonNullable<Android['intentFilters']>;\n\nconst GENERATED_TAG = 'data-generated';\n\nexport const withAndroidIntentFilters = createAndroidManifestPlugin(\n  setAndroidIntentFilters,\n  'withAndroidIntentFilters'\n);\n\nexport function getIntentFilters(config: Pick<ExpoConfig, 'android'>): AndroidIntentFilters {\n  return config.android?.intentFilters ?? [];\n}\n\nexport function setAndroidIntentFilters(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  // Always ensure old tags are removed.\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n  // Remove all generated tags from previous runs...\n  if (mainActivity['intent-filter']?.length) {\n    mainActivity['intent-filter'] = mainActivity['intent-filter'].filter(\n      (value) => value.$?.[GENERATED_TAG] !== 'true'\n    );\n  }\n\n  const intentFilters = getIntentFilters(config);\n  if (!intentFilters.length) {\n    return androidManifest;\n  }\n\n  mainActivity['intent-filter'] = mainActivity['intent-filter']?.concat(\n    renderIntentFilters(intentFilters)\n  );\n\n  return androidManifest;\n}\n\nexport default function renderIntentFilters(\n  intentFilters: AndroidIntentFilters\n): ManifestIntentFilter[] {\n  return intentFilters.map((intentFilter) => {\n    // <intent-filter>\n    return {\n      $: {\n        'android:autoVerify': intentFilter.autoVerify ? 'true' : undefined,\n        // Add a custom \"generated\" tag that we can query later to remove.\n        [GENERATED_TAG]: 'true',\n      },\n      action: [\n        // <action android:name=\"android.intent.action.VIEW\"/>\n        {\n          $: {\n            'android:name': `android.intent.action.${intentFilter.action}`,\n          },\n        },\n      ],\n      data: renderIntentFilterData(intentFilter.data),\n      category: renderIntentFilterCategory(intentFilter.category),\n    };\n  });\n}\n\n/** Like `<data android:scheme=\"exp\"/>` */\nfunction renderIntentFilterData(data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]) {\n  return (Array.isArray(data) ? data : [data]).filter(Boolean).map((datum) => ({\n    $: Object.entries(datum ?? {}).reduce(\n      (prev, [key, value]) => ({ ...prev, [`android:${key}`]: value }),\n      {}\n    ),\n  }));\n}\n\n/** Like `<category android:name=\"android.intent.category.DEFAULT\"/>` */\nfunction renderIntentFilterCategory(category?: string | string[]) {\n  return (Array.isArray(category) ? category : [category]).filter(Boolean).map((cat) => ({\n    $: {\n      'android:name': `android.intent.category.${cat}`,\n    },\n  }));\n}\n"]},"metadata":{},"sourceType":"script"}