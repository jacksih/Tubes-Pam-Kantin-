{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PORTRAIT_ORIENTATIONS = exports.LANDSCAPE_ORIENTATIONS = void 0;\nexports.getOrientation = getOrientation;\nexports.setOrientation = setOrientation;\nexports.withOrientation = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nvar withOrientation = (0, _iosPlugins().createInfoPlistPluginWithPropertyGuard)(setOrientation, {\n  infoPlistProperty: 'UISupportedInterfaceOrientations',\n  expoConfigProperty: 'orientation'\n}, 'withOrientation');\nexports.withOrientation = withOrientation;\nfunction getOrientation(config) {\n  var _config$orientation;\n  return (_config$orientation = config.orientation) !== null && _config$orientation !== void 0 ? _config$orientation : null;\n}\nvar PORTRAIT_ORIENTATIONS = ['UIInterfaceOrientationPortrait', 'UIInterfaceOrientationPortraitUpsideDown'];\nexports.PORTRAIT_ORIENTATIONS = PORTRAIT_ORIENTATIONS;\nvar LANDSCAPE_ORIENTATIONS = ['UIInterfaceOrientationLandscapeLeft', 'UIInterfaceOrientationLandscapeRight'];\nexports.LANDSCAPE_ORIENTATIONS = LANDSCAPE_ORIENTATIONS;\nfunction getUISupportedInterfaceOrientations(orientation) {\n  if (orientation === 'portrait') {\n    return PORTRAIT_ORIENTATIONS;\n  } else if (orientation === 'landscape') {\n    return LANDSCAPE_ORIENTATIONS;\n  } else {\n    return [].concat(PORTRAIT_ORIENTATIONS, LANDSCAPE_ORIENTATIONS);\n  }\n}\nfunction setOrientation(config, infoPlist) {\n  var orientation = getOrientation(config);\n  return Object.assign({}, infoPlist, {\n    UISupportedInterfaceOrientations: getUISupportedInterfaceOrientations(orientation)\n  });\n}","map":{"version":3,"sources":["../../src/ios/Orientation.ts"],"names":["withOrientation","setOrientation","infoPlistProperty","expoConfigProperty","getOrientation","config","orientation","PORTRAIT_ORIENTATIONS","LANDSCAPE_ORIENTATIONS","getUISupportedInterfaceOrientations","infoPlist","UISupportedInterfaceOrientations"],"mappings":";;;;;;;;;AAEA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;EAAA,WAAA,GAAA,uBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAGO,IAAMA,eAAe,GAAG,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,sCAAA,EAC7BC,cAD6B,EAE7B;EACEC,iBAAiB,EAAE,kCADrB;EAEEC,kBAAkB,EAAE;AAFtB,CAF6B,EAM7B,iBAN6B,CAAxB;;AASA,SAASC,cAAT,CAAwBC,MAAxB,EAAiE;EAAA,IAAA,mBAAA;EACtE,OAAA,CAAA,mBAAA,GAAOA,MAAM,CAACC,WAAd,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,mBAAA,GAA6B,IAA7B;AACD;AAEM,IAAMC,qBAA6C,GAAG,CAC3D,gCAD2D,EAE3D,0CAF2D,CAAtD;;AAKA,IAAMC,sBAA8C,GAAG,CAC5D,qCAD4D,EAE5D,sCAF4D,CAAvD;;AAKP,SAASC,mCAAT,CAA6CH,WAA7C,EAAiG;EAC/F,IAAIA,WAAW,KAAK,UAApB,EAAgC;IAC9B,OAAOC,qBAAP;EACD,CAFD,MAEO,IAAID,WAAW,KAAK,WAApB,EAAiC;IACtC,OAAOE,sBAAP;EACD,CAFM,MAEA;IACL,iBAAWD,qBAAJ,EAA8BC,sBAArC;EACD;AACF;AAEM,SAASP,cAAT,CACLI,MADK,EAELK,SAFK,EAGM;EACX,IAAMJ,WAAW,GAAGF,cAAc,CAACC,MAAD,CAAlC;EAEA,yBACKK,SADE;IAELC,gCAAgC,EAAEF,mCAAmC,CAACH,WAAD;EAAA;AAExE","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPluginWithPropertyGuard } from '../plugins/ios-plugins';\nimport { InfoPlist, InterfaceOrientation } from './IosConfig.types';\n\nexport const withOrientation = createInfoPlistPluginWithPropertyGuard(\n  setOrientation,\n  {\n    infoPlistProperty: 'UISupportedInterfaceOrientations',\n    expoConfigProperty: 'orientation',\n  },\n  'withOrientation'\n);\n\nexport function getOrientation(config: Pick<ExpoConfig, 'orientation'>) {\n  return config.orientation ?? null;\n}\n\nexport const PORTRAIT_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n];\n\nexport const LANDSCAPE_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction getUISupportedInterfaceOrientations(orientation: string | null): InterfaceOrientation[] {\n  if (orientation === 'portrait') {\n    return PORTRAIT_ORIENTATIONS;\n  } else if (orientation === 'landscape') {\n    return LANDSCAPE_ORIENTATIONS;\n  } else {\n    return [...PORTRAIT_ORIENTATIONS, ...LANDSCAPE_ORIENTATIONS];\n  }\n}\n\nexport function setOrientation(\n  config: Pick<ExpoConfig, 'orientation'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const orientation = getOrientation(config);\n\n  return {\n    ...infoPlist,\n    UISupportedInterfaceOrientations: getUISupportedInterfaceOrientations(orientation),\n  };\n}\n"]},"metadata":{},"sourceType":"script"}