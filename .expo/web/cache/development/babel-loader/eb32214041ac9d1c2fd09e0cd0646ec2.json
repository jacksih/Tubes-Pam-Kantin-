{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationBuilder;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _routers = require(\"@react-navigation/routers\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactIs = require(\"react-is\");\nvar _Group = _interopRequireDefault(require(\"./Group\"));\nvar _isArrayEqual = _interopRequireDefault(require(\"./isArrayEqual\"));\nvar _isRecordEqual = _interopRequireDefault(require(\"./isRecordEqual\"));\nvar _NavigationHelpersContext = _interopRequireDefault(require(\"./NavigationHelpersContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\nvar _PreventRemoveProvider = _interopRequireDefault(require(\"./PreventRemoveProvider\"));\nvar _Screen = _interopRequireDefault(require(\"./Screen\"));\nvar _types = require(\"./types\");\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\nvar _useComponent = _interopRequireDefault(require(\"./useComponent\"));\nvar _useCurrentRender = _interopRequireDefault(require(\"./useCurrentRender\"));\nvar _useDescriptors = _interopRequireDefault(require(\"./useDescriptors\"));\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\nvar _useFocusedListenersChildrenAdapter = _interopRequireDefault(require(\"./useFocusedListenersChildrenAdapter\"));\nvar _useFocusEvents = _interopRequireDefault(require(\"./useFocusEvents\"));\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\nvar _useNavigationHelpers = _interopRequireDefault(require(\"./useNavigationHelpers\"));\nvar _useOnAction = _interopRequireDefault(require(\"./useOnAction\"));\nvar _useOnGetState = _interopRequireDefault(require(\"./useOnGetState\"));\nvar _useOnRouteFocus = _interopRequireDefault(require(\"./useOnRouteFocus\"));\nvar _useRegisterNavigator = _interopRequireDefault(require(\"./useRegisterNavigator\"));\nvar _useScheduleUpdate = _interopRequireDefault(require(\"./useScheduleUpdate\"));\nvar _excluded = [\"children\", \"screenListeners\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n_types.PrivateValueStore;\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === _Screen.default) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the screen '\" + child.props.name + \"'. It must be a non-empty string or 'undefined'.\");\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === _Group.default) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the group. It must be a non-empty string or 'undefined'.\");\n        }\n        acc.push.apply(acc, (0, _toConsumableArray2.default)(getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== _Group.default ? groupOptions : groupOptions != null ? [].concat((0, _toConsumableArray2.default)(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n        name = _config$props.name,\n        children = _config$props.children,\n        component = _config$props.component,\n        getComponent = _config$props.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\"Got a component with the name '\" + component.name + \"' for the screen '\" + name + \"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");\n          }\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n  return configs;\n};\nfunction useNavigationBuilder(createRouter, options) {\n  var navigatorKey = (0, _useRegisterNavigator.default)();\n  var route = React.useContext(_NavigationRouteContext.default);\n  var children = options.children,\n    screenListeners = options.screenListeners,\n    rest = (0, _objectWithoutProperties2.default)(options, _excluded);\n  var _React$useRef = React.useRef(createRouter(Object.assign({}, rest, route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null))),\n    router = _React$useRef.current;\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config.props.name + \"')\");\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key !== null && key !== void 0 ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return Object.assign(acc, (0, _defineProperty2.default)({}, curr, screens[curr].props.getId));\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(_NavigationStateContext.default),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setCurrentState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  }, [setCurrentState]);\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4;\n      var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n        var _route$params, _route$params2, _route$params3;\n        var initialParams = screens[curr].props.initialParams;\n        var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? Object.assign({}, initialParams, initialParamsFromParams) : undefined;\n        return acc;\n      }, {});\n      if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), true];\n      } else {\n        var _route$params$state, _route$params5;\n        return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!(0, _isArrayEqual.default)(state.routeNames, routeNames) || !(0, _isRecordEqual.default)(routeKeyList, previousRouteKeyList)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = _routers.CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = _routers.CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  (0, _useScheduleUpdate.default)(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = (0, _useEventEmitter.default)(function (e) {\n    var _ref;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, (0, _toConsumableArray2.default)(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)([screenListeners].concat((0, _toConsumableArray2.default)(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  (0, _useFocusEvents.default)({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n    childListeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var onAction = (0, _useOnAction.default)({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = (0, _useOnRouteFocus.default)({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = (0, _useNavigationHelpers.default)({\n    id: options.id,\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  (0, _useFocusedListenersChildrenAdapter.default)({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  (0, _useOnGetState.default)({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = (0, _useDescriptors.default)({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  (0, _useCurrentRender.default)({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = (0, _useComponent.default)(function (children) {\n    return React.createElement(_NavigationHelpersContext.default.Provider, {\n      value: navigation\n    }, React.createElement(_PreventRemoveProvider.default, null, children));\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","React","isValidElement","type","Screen","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","Group","screenOptions","String","process","env","NODE_ENV","forEach","config","component","getComponent","isValidElementType","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","useRegisterNavigator","route","useContext","NavigationRouteContext","screenListeners","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","NavigationStateContext","stateCleanedUp","cleanUpState","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","isArrayEqual","isRecordEqual","getStateForRouteNamesChange","routeKeyChanges","Object","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","CommonActions","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","useScheduleUpdate","setTimeout","initializedStateRef","emitter","useEventEmitter","e","target","routes","find","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","useFocusEvents","emit","data","childListeners","addListener","useChildListeners","keyedListeners","addKeyedListener","useKeyedChildListeners","onAction","useOnAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","id","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","useDescriptors","defaultScreenOptions","useCurrentRender","NavigationContent","useComponent"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <PreventRemoveProvider>{children}</PreventRemoveProvider>\n    </NavigationHelpersContext.Provider>\n  ));\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}