{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"nextMod\"],\n  _excluded2 = [\"modRequest\"],\n  _excluded3 = [\"modName\"],\n  _excluded4 = [\"platform\", \"providers\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertModResults = assertModResults;\nexports.createBaseMod = createBaseMod;\nexports.createPlatformBaseMod = createPlatformBaseMod;\nexports.provider = provider;\nexports.withGeneratedBaseMods = withGeneratedBaseMods;\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _withMod() {\n  var data = require(\"./withMod\");\n  _withMod = function _withMod() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:config-plugins:base-mods');\nfunction createBaseMod(_ref) {\n  var methodName = _ref.methodName,\n    platform = _ref.platform,\n    modName = _ref.modName,\n    getFilePath = _ref.getFilePath,\n    read = _ref.read,\n    write = _ref.write,\n    isIntrospective = _ref.isIntrospective;\n  var withUnknown = function withUnknown(config, _props) {\n    var _props$skipEmptyMod, _props$saveToInternal;\n    var props = _props || {};\n    return (0, _withMod().withBaseMod)(config, {\n      platform: platform,\n      mod: modName,\n      skipEmptyMod: (_props$skipEmptyMod = props.skipEmptyMod) !== null && _props$skipEmptyMod !== void 0 ? _props$skipEmptyMod : true,\n      saveToInternal: (_props$saveToInternal = props.saveToInternal) !== null && _props$saveToInternal !== void 0 ? _props$saveToInternal : false,\n      isProvider: true,\n      isIntrospective: isIntrospective,\n      action: function () {\n        var _action = _asyncToGenerator(function* (_ref2) {\n          var _ref2$modRequest = _ref2.modRequest,\n            nextMod = _ref2$modRequest.nextMod,\n            modRequest = _objectWithoutProperties(_ref2$modRequest, _excluded),\n            config = _objectWithoutProperties(_ref2, _excluded2);\n          try {\n            var results = Object.assign({}, config, {\n              modRequest: modRequest\n            });\n            var filePath = yield getFilePath(results, props);\n            debug(\"mods.\" + platform + \".\" + modName + \": file path: \" + (filePath || '[skipped]'));\n            var modResults = yield read(filePath, results, props);\n            results = yield nextMod(Object.assign({}, results, {\n              modResults: modResults,\n              modRequest: modRequest\n            }));\n            assertModResults(results, modRequest.platform, modRequest.modName);\n            yield write(filePath, results, props);\n            return results;\n          } catch (error) {\n            error.message = \"[\" + platform + \".\" + modName + \"]: \" + methodName + \": \" + error.message;\n            throw error;\n          }\n        });\n        function action(_x) {\n          return _action.apply(this, arguments);\n        }\n        return action;\n      }()\n    });\n  };\n  if (methodName) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: methodName\n    });\n  }\n  return withUnknown;\n}\nfunction assertModResults(results, platformName, modName) {\n  var ensuredResults = results;\n  if (!ensuredResults || typeof ensuredResults !== 'object' || !(ensuredResults !== null && ensuredResults !== void 0 && ensuredResults.mods)) {\n    throw new Error(\"Mod `mods.\" + platformName + \".\" + modName + \"` evaluated to an object that is not a valid project config. Instead got: \" + JSON.stringify(ensuredResults));\n  }\n  return ensuredResults;\n}\nfunction upperFirst(name) {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}\nfunction createPlatformBaseMod(_ref3) {\n  var modName = _ref3.modName,\n    props = _objectWithoutProperties(_ref3, _excluded3);\n  var methodName = \"with\" + upperFirst(props.platform) + upperFirst(modName) + \"BaseMod\";\n  return createBaseMod(Object.assign({\n    methodName: methodName,\n    modName: modName\n  }, props));\n}\nfunction provider(props) {\n  return props;\n}\nfunction withGeneratedBaseMods(config, _ref4) {\n  var platform = _ref4.platform,\n    providers = _ref4.providers,\n    props = _objectWithoutProperties(_ref4, _excluded4);\n  return Object.entries(providers).reduce(function (config, _ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      modName = _ref6[0],\n      value = _ref6[1];\n    var baseMod = createPlatformBaseMod(Object.assign({\n      platform: platform,\n      modName: modName\n    }, value));\n    return baseMod(config, props);\n  }, config);\n}","map":{"version":3,"sources":["../../src/plugins/createBaseMod.ts"],"names":["debug","createBaseMod","methodName","platform","modName","getFilePath","read","write","isIntrospective","withUnknown","config","_props","props","mod","skipEmptyMod","saveToInternal","isProvider","action","modRequest","nextMod","results","filePath","modResults","assertModResults","error","message","Object","defineProperty","value","platformName","ensuredResults","mods","Error","JSON","stringify","upperFirst","name","charAt","toUpperCase","slice","createPlatformBaseMod","provider","withGeneratedBaseMods","providers","entries","reduce","baseMod"],"mappings":"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","sourcesContent":["import Debug from 'debug';\n\nimport {\n  ConfigPlugin,\n  ExportedConfig,\n  ExportedConfigWithProps,\n  ModPlatform,\n} from '../Plugin.types';\nimport { BaseModOptions, withBaseMod } from './withMod';\n\nconst debug = Debug('expo:config-plugins:base-mods');\n\nexport type ForwardedBaseModOptions = Partial<\n  Pick<BaseModOptions, 'saveToInternal' | 'skipEmptyMod'>\n>;\n\nexport type BaseModProviderMethods<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n> = {\n  getFilePath: (config: ExportedConfigWithProps<ModType>, props: Props) => Promise<string> | string;\n  read: (\n    filePath: string,\n    config: ExportedConfigWithProps<ModType>,\n    props: Props\n  ) => Promise<ModType> | ModType;\n  write: (\n    filePath: string,\n    config: ExportedConfigWithProps<ModType>,\n    props: Props\n  ) => Promise<void> | void;\n  /**\n   * If the mod supports introspection, and avoids making any filesystem modifications during compilation.\n   * By enabling, this mod, and all of its descendants will be run in introspection mode.\n   * This should only be used for static files like JSON or XML, and not for application files that require regexes,\n   * or complex static files that require other files to be generated like Xcode `.pbxproj`.\n   */\n  isIntrospective?: boolean;\n};\n\nexport type CreateBaseModProps<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n> = {\n  methodName: string;\n  platform: ModPlatform;\n  modName: string;\n} & BaseModProviderMethods<ModType, Props>;\n\nexport function createBaseMod<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n>({\n  methodName,\n  platform,\n  modName,\n  getFilePath,\n  read,\n  write,\n  isIntrospective,\n}: CreateBaseModProps<ModType, Props>): ConfigPlugin<Props | void> {\n  const withUnknown: ConfigPlugin<Props | void> = (config, _props) => {\n    const props = _props || ({} as Props);\n    return withBaseMod<ModType>(config, {\n      platform,\n      mod: modName,\n      skipEmptyMod: props.skipEmptyMod ?? true,\n      saveToInternal: props.saveToInternal ?? false,\n      isProvider: true,\n      isIntrospective,\n      async action({ modRequest: { nextMod, ...modRequest }, ...config }) {\n        try {\n          let results: ExportedConfigWithProps<ModType> = {\n            ...config,\n            modRequest,\n          };\n\n          const filePath = await getFilePath(results, props);\n          debug(`mods.${platform}.${modName}: file path: ${filePath || '[skipped]'}`);\n          const modResults = await read(filePath, results, props);\n\n          results = await nextMod!({\n            ...results,\n            modResults,\n            modRequest,\n          });\n\n          assertModResults(results, modRequest.platform, modRequest.modName);\n\n          await write(filePath, results, props);\n          return results;\n        } catch (error: any) {\n          error.message = `[${platform}.${modName}]: ${methodName}: ${error.message}`;\n          throw error;\n        }\n      },\n    });\n  };\n\n  if (methodName) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: methodName,\n    });\n  }\n\n  return withUnknown;\n}\n\nexport function assertModResults(results: any, platformName: string, modName: string) {\n  // If the results came from a mod, they'd be in the form of [config, data].\n  // Ensure the results are an array and omit the data since it should've been written by a data provider plugin.\n  const ensuredResults = results;\n\n  // Sanity check to help locate non compliant mods.\n  if (!ensuredResults || typeof ensuredResults !== 'object' || !ensuredResults?.mods) {\n    throw new Error(\n      `Mod \\`mods.${platformName}.${modName}\\` evaluated to an object that is not a valid project config. Instead got: ${JSON.stringify(\n        ensuredResults\n      )}`\n    );\n  }\n  return ensuredResults;\n}\n\nfunction upperFirst(name: string): string {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}\n\nexport function createPlatformBaseMod<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n>({ modName, ...props }: Omit<CreateBaseModProps<ModType, Props>, 'methodName'>) {\n  // Generate the function name to ensure it's uniform and also to improve stack traces.\n  const methodName = `with${upperFirst(props.platform)}${upperFirst(modName)}BaseMod`;\n  return createBaseMod<ModType, Props>({\n    methodName,\n    modName,\n    ...props,\n  });\n}\n\n/** A TS wrapper for creating provides */\nexport function provider<ModType, Props extends ForwardedBaseModOptions = ForwardedBaseModOptions>(\n  props: BaseModProviderMethods<ModType, Props>\n) {\n  return props;\n}\n\n/** Plugin to create and append base mods from file providers */\nexport function withGeneratedBaseMods<ModName extends string>(\n  config: ExportedConfig,\n  {\n    platform,\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & {\n    platform: ModPlatform;\n    providers: Partial<Record<ModName, BaseModProviderMethods<any, any>>>;\n  }\n): ExportedConfig {\n  return Object.entries(providers).reduce((config, [modName, value]) => {\n    const baseMod = createPlatformBaseMod({ platform, modName, ...(value as any) });\n    return baseMod(config, props);\n  }, config);\n}\n"]},"metadata":{},"sourceType":"script"}