{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Config = void 0;\nexports.ensureBundleReactNativePhaseContainsConfigurationScript = ensureBundleReactNativePhaseContainsConfigurationScript;\nexports.getBundleReactNativePhase = getBundleReactNativePhase;\nexports.isPlistConfigurationSet = isPlistConfigurationSet;\nexports.isPlistConfigurationSynced = isPlistConfigurationSynced;\nexports.isPlistVersionConfigurationSynced = isPlistVersionConfigurationSynced;\nexports.isShellScriptBuildPhaseConfigured = isShellScriptBuildPhaseConfigured;\nexports.setUpdatesConfig = setUpdatesConfig;\nexports.setVersionsConfig = setVersionsConfig;\nexports.withUpdates = void 0;\nfunction path() {\n  var data = _interopRequireWildcard(require(\"path\"));\n  path = function path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Updates() {\n  var data = require(\"../utils/Updates\");\n  _Updates = function _Updates() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nvar CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\nvar Config;\nexports.Config = Config;\n(function (Config) {\n  Config[\"ENABLED\"] = \"EXUpdatesEnabled\";\n  Config[\"CHECK_ON_LAUNCH\"] = \"EXUpdatesCheckOnLaunch\";\n  Config[\"LAUNCH_WAIT_MS\"] = \"EXUpdatesLaunchWaitMs\";\n  Config[\"RUNTIME_VERSION\"] = \"EXUpdatesRuntimeVersion\";\n  Config[\"SDK_VERSION\"] = \"EXUpdatesSDKVersion\";\n  Config[\"UPDATE_URL\"] = \"EXUpdatesURL\";\n  Config[\"RELEASE_CHANNEL\"] = \"EXUpdatesReleaseChannel\";\n  Config[\"UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\"] = \"EXUpdatesRequestHeaders\";\n  Config[\"CODE_SIGNING_CERTIFICATE\"] = \"EXUpdatesCodeSigningCertificate\";\n  Config[\"CODE_SIGNING_METADATA\"] = \"EXUpdatesCodeSigningMetadata\";\n})(Config || (exports.Config = Config = {}));\nvar withUpdates = function withUpdates(config, _ref) {\n  var expoUsername = _ref.expoUsername;\n  return (0, _iosPlugins().withExpoPlist)(config, function (config) {\n    var projectRoot = config.modRequest.projectRoot;\n    var expoUpdatesPackageVersion = (0, _Updates().getExpoUpdatesPackageVersion)(projectRoot);\n    config.modResults = setUpdatesConfig(projectRoot, config, config.modResults, expoUsername, expoUpdatesPackageVersion);\n    return config;\n  });\n};\nexports.withUpdates = withUpdates;\nfunction setUpdatesConfig(projectRoot, config, expoPlist, username, expoUpdatesPackageVersion) {\n  var _Object$assign;\n  var newExpoPlist = Object.assign({}, expoPlist, (_Object$assign = {}, _defineProperty(_Object$assign, Config.ENABLED, (0, _Updates().getUpdatesEnabled)(config)), _defineProperty(_Object$assign, Config.CHECK_ON_LAUNCH, (0, _Updates().getUpdatesCheckOnLaunch)(config, expoUpdatesPackageVersion)), _defineProperty(_Object$assign, Config.LAUNCH_WAIT_MS, (0, _Updates().getUpdatesTimeout)(config)), _Object$assign));\n  var updateUrl = (0, _Updates().getUpdateUrl)(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n  var codeSigningCertificate = (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config);\n  if (codeSigningCertificate) {\n    newExpoPlist[Config.CODE_SIGNING_CERTIFICATE] = codeSigningCertificate;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_CERTIFICATE];\n  }\n  var codeSigningMetadata = (0, _Updates().getUpdatesCodeSigningMetadata)(config);\n  if (codeSigningMetadata) {\n    newExpoPlist[Config.CODE_SIGNING_METADATA] = codeSigningMetadata;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_METADATA];\n  }\n  return setVersionsConfig(config, newExpoPlist);\n}\nfunction setVersionsConfig(config, expoPlist) {\n  var newExpoPlist = Object.assign({}, expoPlist);\n  var runtimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'ios');\n  if (!runtimeVersion && expoPlist[Config.RUNTIME_VERSION]) {\n    throw new Error('A runtime version is set in your Expo.plist, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove EXUpdatesRuntimeVersion from your Expo.plist.');\n  }\n  var sdkVersion = (0, _Updates().getSDKVersion)(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n  return newExpoPlist;\n}\nfunction formatConfigurationScriptPath(projectRoot) {\n  var buildScriptPath = _resolveFrom().default.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n  if (!buildScriptPath) {\n    throw new Error(\"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");\n  }\n  var relativePath = path().relative(path().join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\nfunction getBundleReactNativePhase(project) {\n  var shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase;\n  var bundleReactNative = Object.values(shellScriptBuildPhase).find(function (buildPhase) {\n    return buildPhase.name === '\"Bundle React Native code and images\"';\n  });\n  if (!bundleReactNative) {\n    throw new Error(\"Couldn't find a build phase \\\"Bundle React Native code and images\\\"\");\n  }\n  return bundleReactNative;\n}\nfunction ensureBundleReactNativePhaseContainsConfigurationScript(projectRoot, project) {\n  var bundleReactNative = getBundleReactNativePhase(project);\n  var buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(new RegExp(\"(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/\" + CREATE_MANIFEST_IOS_PATH), '');\n    }\n    bundleReactNative.shellScript = \"\" + bundleReactNative.shellScript.replace(/\"$/, '') + buildPhaseShellScriptPath + \"\\\\n\\\"\";\n  }\n  return project;\n}\nfunction isShellScriptBuildPhaseConfigured(projectRoot, project) {\n  var bundleReactNative = getBundleReactNativePhase(project);\n  var buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\nfunction isPlistConfigurationSet(expoPlist) {\n  return Boolean(expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion));\n}\nfunction isPlistConfigurationSynced(projectRoot, config, expoPlist, username) {\n  return (0, _Updates().getUpdateUrl)(config, username) === expoPlist.EXUpdatesURL && (0, _Updates().getUpdatesEnabled)(config) === expoPlist.EXUpdatesEnabled && (0, _Updates().getUpdatesTimeout)(config) === expoPlist.EXUpdatesLaunchWaitMs && (0, _Updates().getUpdatesCheckOnLaunch)(config) === expoPlist.EXUpdatesCheckOnLaunch && (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config) === expoPlist.EXUpdatesCodeSigningCertificate && (0, _Updates().getUpdatesCodeSigningMetadata)(config) === expoPlist.EXUpdatesCodeSigningMetadata && isPlistVersionConfigurationSynced(config, expoPlist);\n}\nfunction isPlistVersionConfigurationSynced(config, expoPlist) {\n  var _expoPlist$EXUpdatesR, _expoPlist$EXUpdatesS;\n  var expectedRuntimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'ios');\n  var expectedSdkVersion = (0, _Updates().getSDKVersion)(config);\n  var currentRuntimeVersion = (_expoPlist$EXUpdatesR = expoPlist.EXUpdatesRuntimeVersion) !== null && _expoPlist$EXUpdatesR !== void 0 ? _expoPlist$EXUpdatesR : null;\n  var currentSdkVersion = (_expoPlist$EXUpdatesS = expoPlist.EXUpdatesSDKVersion) !== null && _expoPlist$EXUpdatesS !== void 0 ? _expoPlist$EXUpdatesS : null;\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}","map":{"version":3,"sources":["../../src/ios/Updates.ts"],"names":["CREATE_MANIFEST_IOS_PATH","Config","withUpdates","config","expoUsername","projectRoot","modRequest","expoUpdatesPackageVersion","modResults","setUpdatesConfig","expoPlist","username","newExpoPlist","ENABLED","CHECK_ON_LAUNCH","LAUNCH_WAIT_MS","updateUrl","UPDATE_URL","codeSigningCertificate","CODE_SIGNING_CERTIFICATE","codeSigningMetadata","CODE_SIGNING_METADATA","setVersionsConfig","runtimeVersion","RUNTIME_VERSION","Error","sdkVersion","SDK_VERSION","formatConfigurationScriptPath","buildScriptPath","resolveFrom","silent","relativePath","path","relative","join","process","platform","replace","getBundleReactNativePhase","project","shellScriptBuildPhase","hash","objects","PBXShellScriptBuildPhase","bundleReactNative","Object","values","find","buildPhase","name","ensureBundleReactNativePhaseContainsConfigurationScript","buildPhaseShellScriptPath","isShellScriptBuildPhaseConfigured","shellScript","includes","RegExp","isPlistConfigurationSet","Boolean","EXUpdatesURL","EXUpdatesSDKVersion","EXUpdatesRuntimeVersion","isPlistConfigurationSynced","EXUpdatesEnabled","EXUpdatesLaunchWaitMs","EXUpdatesCheckOnLaunch","EXUpdatesCodeSigningCertificate","EXUpdatesCodeSigningMetadata","isPlistVersionConfigurationSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport resolveFrom from 'resolve-from';\nimport xcode from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withExpoPlist } from '../plugins/ios-plugins';\nimport {\n  ExpoConfigUpdates,\n  getExpoUpdatesPackageVersion,\n  getRuntimeVersionNullable,\n  getSDKVersion,\n  getUpdatesCheckOnLaunch,\n  getUpdatesCodeSigningCertificate,\n  getUpdatesCodeSigningMetadata,\n  getUpdatesEnabled,\n  getUpdatesTimeout,\n  getUpdateUrl,\n} from '../utils/Updates';\nimport { ExpoPlist } from './IosConfig.types';\n\nconst CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\n\nexport enum Config {\n  ENABLED = 'EXUpdatesEnabled',\n  CHECK_ON_LAUNCH = 'EXUpdatesCheckOnLaunch',\n  LAUNCH_WAIT_MS = 'EXUpdatesLaunchWaitMs',\n  RUNTIME_VERSION = 'EXUpdatesRuntimeVersion',\n  SDK_VERSION = 'EXUpdatesSDKVersion',\n  UPDATE_URL = 'EXUpdatesURL',\n  RELEASE_CHANNEL = 'EXUpdatesReleaseChannel',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'EXUpdatesRequestHeaders',\n  CODE_SIGNING_CERTIFICATE = 'EXUpdatesCodeSigningCertificate',\n  CODE_SIGNING_METADATA = 'EXUpdatesCodeSigningMetadata',\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withExpoPlist(config, (config) => {\n    const projectRoot = config.modRequest.projectRoot;\n    const expoUpdatesPackageVersion = getExpoUpdatesPackageVersion(projectRoot);\n    config.modResults = setUpdatesConfig(\n      projectRoot,\n      config,\n      config.modResults,\n      expoUsername,\n      expoUpdatesPackageVersion\n    );\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null,\n  expoUpdatesPackageVersion?: string | null\n): ExpoPlist {\n  const newExpoPlist = {\n    ...expoPlist,\n    [Config.ENABLED]: getUpdatesEnabled(config),\n    [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion),\n    [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config),\n  };\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  const codeSigningCertificate = getUpdatesCodeSigningCertificate(projectRoot, config);\n  if (codeSigningCertificate) {\n    newExpoPlist[Config.CODE_SIGNING_CERTIFICATE] = codeSigningCertificate;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_CERTIFICATE];\n  }\n\n  const codeSigningMetadata = getUpdatesCodeSigningMetadata(config);\n  if (codeSigningMetadata) {\n    newExpoPlist[Config.CODE_SIGNING_METADATA] = codeSigningMetadata;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_METADATA];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nexport function setVersionsConfig(config: ExpoConfigUpdates, expoPlist: ExpoPlist): ExpoPlist {\n  const newExpoPlist = { ...expoPlist };\n\n  const runtimeVersion = getRuntimeVersionNullable(config, 'ios');\n  if (!runtimeVersion && expoPlist[Config.RUNTIME_VERSION]) {\n    throw new Error(\n      'A runtime version is set in your Expo.plist, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove EXUpdatesRuntimeVersion from your Expo.plist.'\n    );\n  }\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    /**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nfunction formatConfigurationScriptPath(projectRoot: string): string {\n  const buildScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(path.join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\ninterface ShellScriptBuildPhase {\n  isa: 'PBXShellScriptBuildPhase';\n  name: string;\n  shellScript: string;\n  [key: string]: any;\n}\n\nexport function getBundleReactNativePhase(project: xcode.XcodeProject): ShellScriptBuildPhase {\n  const shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase as Record<\n    string,\n    ShellScriptBuildPhase\n  >;\n  const bundleReactNative = Object.values(shellScriptBuildPhase).find(\n    (buildPhase) => buildPhase.name === '\"Bundle React Native code and images\"'\n  );\n\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase \"Bundle React Native code and images\"`);\n  }\n\n  return bundleReactNative;\n}\n\nexport function ensureBundleReactNativePhaseContainsConfigurationScript(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): xcode.XcodeProject {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    // check if there's already another path to create-manifest-ios.sh\n    // this might be the case for monorepos\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(\n        new RegExp(`(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/${CREATE_MANIFEST_IOS_PATH}`),\n        ''\n      );\n    }\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(\n      /\"$/,\n      ''\n    )}${buildPhaseShellScriptPath}\\\\n\"`;\n  }\n  return project;\n}\n\nexport function isShellScriptBuildPhaseConfigured(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): boolean {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nexport function isPlistConfigurationSet(expoPlist: ExpoPlist): boolean {\n  return Boolean(\n    expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion)\n  );\n}\n\nexport function isPlistConfigurationSynced(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) === expoPlist.EXUpdatesURL &&\n    getUpdatesEnabled(config) === expoPlist.EXUpdatesEnabled &&\n    getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs &&\n    getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch &&\n    getUpdatesCodeSigningCertificate(projectRoot, config) ===\n      expoPlist.EXUpdatesCodeSigningCertificate &&\n    getUpdatesCodeSigningMetadata(config) === expoPlist.EXUpdatesCodeSigningMetadata &&\n    isPlistVersionConfigurationSynced(config, expoPlist)\n  );\n}\n\nexport function isPlistVersionConfigurationSynced(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  expoPlist: ExpoPlist\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config, 'ios');\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = expoPlist.EXUpdatesRuntimeVersion ?? null;\n  const currentSdkVersion = expoPlist.EXUpdatesSDKVersion ?? null;\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}