{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigError = void 0;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar ConfigError = function (_Error) {\n  _inherits(ConfigError, _Error);\n  var _super = _createSuper(ConfigError);\n  function ConfigError(message, code, cause) {\n    var _this;\n    _classCallCheck(this, ConfigError);\n    _this = _super.call(this, cause ? message + \"\\n\\u2514\\u2500 Cause: \" + cause.name + \": \" + cause.message : message);\n    _this.code = code;\n    _this.cause = cause;\n    _defineProperty(_assertThisInitialized(_this), \"name\", 'ConfigError');\n    _defineProperty(_assertThisInitialized(_this), \"isConfigError\", true);\n    return _this;\n  }\n  return _createClass(ConfigError);\n}(_wrapNativeSuper(Error));\nexports.ConfigError = ConfigError;","map":{"version":3,"sources":["../src/Errors.ts"],"names":["ConfigError","Error","constructor","message","code","cause","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKaA,WAAN;EAAA;EAAA;EAILE,qBAAYC,OAAD,EAAyBC,IAAzB,EAAuDC,KAAvD,EAAsE;IAAA;IAAA;IAC/E,0BAAMA,KAAK,GAAMF,OAAQ,8BAAcE,KAAK,CAACC,IAAK,UAAID,KAAK,CAACF,OAAjD,GAA6DA,OAAxE;IAD+E,MAA7CC,IAA6C,GAA7CA,IAA6C;IAAA,MAAfC,KAAe,GAAfA,KAAe;IAAA,eAAA,gCAAA,MAAA,EAHjE,aAGiE,CAAA;IAAA,eAAA,gCAAA,eAAA,EAFxD,IAEwD,CAAA;IAAA;EAEhF;EAAA;AAAA,mBAN8BJ,KAA1B","sourcesContent":["import { ConfigErrorCode } from './Config.types';\n\n/**\n * Based on `JsonFileError` from `@expo/json-file`\n */\nexport class ConfigError extends Error {\n  readonly name = 'ConfigError';\n  readonly isConfigError = true;\n\n  constructor(message: string, public code: ConfigErrorCode, public cause?: Error) {\n    super(cause ? `${message}\\n└─ Cause: ${cause.name}: ${cause.message}` : message);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}