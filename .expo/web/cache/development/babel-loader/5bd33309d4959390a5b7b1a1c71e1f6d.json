{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRequiresFullScreen = getRequiresFullScreen;\nexports.setRequiresFullScreen = setRequiresFullScreen;\nexports.withRequiresFullScreen = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _versions() {\n  var data = require(\"../utils/versions\");\n  _versions = function _versions() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nvar withRequiresFullScreen = (0, _iosPlugins().createInfoPlistPlugin)(setRequiresFullScreen, 'withRequiresFullScreen');\nexports.withRequiresFullScreen = withRequiresFullScreen;\nfunction getRequiresFullScreen(config) {\n  var _config$ios;\n  if ((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.hasOwnProperty('requireFullScreen')) {\n    return !!config.ios.requireFullScreen;\n  } else {\n    if ((0, _versions().gteSdkVersion)(config, '43.0.0')) {\n      return false;\n    }\n    return true;\n  }\n}\nvar iPadInterfaceKey = 'UISupportedInterfaceOrientations~ipad';\nvar requiredIPadInterface = ['UIInterfaceOrientationPortrait', 'UIInterfaceOrientationPortraitUpsideDown', 'UIInterfaceOrientationLandscapeLeft', 'UIInterfaceOrientationLandscapeRight'];\nfunction isStringArray(value) {\n  return Array.isArray(value) && value.every(function (value) {\n    return typeof value === 'string';\n  });\n}\nfunction hasMinimumOrientations(masks) {\n  return requiredIPadInterface.every(function (mask) {\n    return masks.includes(mask);\n  });\n}\nfunction resolveExistingIpadInterfaceOrientations(interfaceOrientations) {\n  if (isStringArray(interfaceOrientations) && interfaceOrientations.length && !hasMinimumOrientations(interfaceOrientations)) {\n    var existingList = interfaceOrientations.join(', ');\n    (0, _warnings().addWarningIOS)('ios.requireFullScreen', \"iPad multitasking requires all `\" + iPadInterfaceKey + \"` orientations to be defined in the Info.plist. The Info.plist currently defines values that are incompatible with multitasking, these will be overwritten to prevent submission failure. Existing: \" + existingList);\n    return interfaceOrientations;\n  }\n  return [];\n}\nfunction setRequiresFullScreen(config, infoPlist) {\n  var requiresFullScreen = getRequiresFullScreen(config);\n  if (!requiresFullScreen) {\n    var existing = resolveExistingIpadInterfaceOrientations(infoPlist[iPadInterfaceKey]);\n    infoPlist[iPadInterfaceKey] = _toConsumableArray(new Set(existing.concat(requiredIPadInterface)));\n  }\n  return Object.assign({}, infoPlist, {\n    UIRequiresFullScreen: requiresFullScreen\n  });\n}","map":{"version":3,"sources":["../../src/ios/RequiresFullScreen.ts"],"names":["withRequiresFullScreen","setRequiresFullScreen","getRequiresFullScreen","config","ios","hasOwnProperty","requireFullScreen","iPadInterfaceKey","requiredIPadInterface","isStringArray","value","Array","isArray","every","hasMinimumOrientations","masks","mask","includes","resolveExistingIpadInterfaceOrientations","interfaceOrientations","length","existingList","join","infoPlist","requiresFullScreen","existing","Set","concat","UIRequiresFullScreen"],"mappings":";;;;;;;;;AAEA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;EAAA,WAAA,GAAA,uBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAGO,IAAMA,sBAAsB,GAAG,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,qBAAA,EACpCC,qBADoC,EAEpC,wBAFoC,CAA/B;;AAOA,SAASC,qBAAT,CAA+BC,MAA/B,EAA+E;EAAA,IAAA,WAAA;EAGpF,IAAA,CAAA,WAAA,GAAIA,MAAM,CAACC,GAAX,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,IAAID,WAAAA,CAAYE,cAAZF,CAA2B,mBAA3BA,CAAJ,EAAqD;IACnD,OAAO,CAAC,CAACA,MAAM,CAACC,GAAPD,CAAWG,iBAApB;EACD,CAFD,MAEO;IAEL,IACE,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,aAAA,EAAcH,MAAd,EAAsB,QAAtB,CADF,EAIE;MACA,OAAO,KAAP;IACD;IACD,OAAO,IAAP;EACD;AACF;AAED,IAAMI,gBAAgB,GAAG,uCAAzB;AAEA,IAAMC,qBAAqB,GAAG,CAC5B,gCAD4B,EAE5B,0CAF4B,EAG5B,qCAH4B,EAI5B,sCAJ4B,CAA9B;AAOA,SAASC,aAAT,CAAuBC,KAAvB,EAAsD;EACpD,OAAOC,KAAK,CAACC,OAAND,CAAcD,KAAdC,CAAAA,IAAwBD,KAAK,CAACG,KAANH,CAAaA,UAAAA,KAAD;IAAA,OAAW,OAAOA,KAAP,KAAiB,QAAxCA;EAAAA,EAA/B;AACD;AAED,SAASI,sBAAT,CAAgCC,KAAhC,EAA0D;EACxD,OAAOP,qBAAqB,CAACK,KAAtBL,CAA6BQ,UAAAA,IAAD;IAAA,OAAUD,KAAK,CAACE,QAANF,CAAeC,IAAfD,CAAtCP;EAAAA,EAAP;AACD;AAWD,SAASU,wCAAT,CAAkDC,qBAAlD,EAAwF;EACtF,IAEEV,aAAa,CAACU,qBAAD,CAAbV,IAEAU,qBAAqB,CAACC,MAFtBX,IAIA,CAACK,sBAAsB,CAACK,qBAAD,CANzB,EAOE;IACA,IAAME,YAAY,GAAGF,qBAAqB,CAAEG,IAAvBH,CAA4B,IAA5BA,CAArB;IACA,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,aAAA,EACE,uBADF,uCAEsCZ,gBAAiB,4MAAuMc,YAF9P,CAAA;IAIA,OAAOF,qBAAP;EACD;EACD,OAAO,EAAP;AACD;AAGM,SAASlB,qBAAT,CACLE,MADK,EAELoB,SAFK,EAGM;EACX,IAAMC,kBAAkB,GAAGtB,qBAAqB,CAACC,MAAD,CAAhD;EACA,IAAI,CAACqB,kBAAL,EAAyB;IACvB,IAAMC,QAAQ,GAAGP,wCAAwC,CAACK,SAAS,CAAChB,gBAAD,CAAV,CADlC;IAQvBgB,SAAS,CAAChB,gBAAD,CAATgB,sBAAkC,IAAIG,GAAJ,CAAQD,QAAQ,CAACE,MAATF,CAAgBjB,qBAAhBiB,CAAR,CAAJ,CAA9BF;EACD;EAED,yBACKA,SADE;IAELK,oBAAoB,EAAEJ;EAAAA;AAEzB","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { gteSdkVersion } from '../utils/versions';\nimport { addWarningIOS } from '../utils/warnings';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withRequiresFullScreen = createInfoPlistPlugin(\n  setRequiresFullScreen,\n  'withRequiresFullScreen'\n);\n\n// NOTES: This is defaulted to `true` for now to match the behavior prior to SDK\n// 34, but will change to `false` in SDK +43.\nexport function getRequiresFullScreen(config: Pick<ExpoConfig, 'ios' | 'sdkVersion'>) {\n  // Yes, the property is called ios.requireFullScreen, without the s - not \"requires\"\n  // This is confusing indeed because the actual property name does have the s\n  if (config.ios?.hasOwnProperty('requireFullScreen')) {\n    return !!config.ios.requireFullScreen;\n  } else {\n    // In SDK 43, the `requireFullScreen` default has been changed to false.\n    if (\n      gteSdkVersion(config, '43.0.0')\n      // TODO: Uncomment after SDK 43 is released.\n      // || !config.sdkVersion\n    ) {\n      return false;\n    }\n    return true;\n  }\n}\n\nconst iPadInterfaceKey = 'UISupportedInterfaceOrientations~ipad';\n\nconst requiredIPadInterface = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction isStringArray(value: any): value is string[] {\n  return Array.isArray(value) && value.every((value) => typeof value === 'string');\n}\n\nfunction hasMinimumOrientations(masks: string[]): boolean {\n  return requiredIPadInterface.every((mask) => masks.includes(mask));\n}\n\n/**\n * Require full screen being disabled requires all ipad interfaces to to be added,\n * otherwise submissions to the iOS App Store will fail.\n *\n * ERROR ITMS-90474: \"Invalid Bundle. iPad Multitasking support requires these orientations: 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight'. Found 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown' in bundle 'com.bacon.app'.\"\n *\n * @param interfaceOrientations\n * @returns\n */\nfunction resolveExistingIpadInterfaceOrientations(interfaceOrientations: any): string[] {\n  if (\n    // Ensure type.\n    isStringArray(interfaceOrientations) &&\n    // Don't warn if it's an empty array, this is invalid regardless.\n    interfaceOrientations.length &&\n    // Check if the minimum requirements are met.\n    !hasMinimumOrientations(interfaceOrientations)\n  ) {\n    const existingList = interfaceOrientations!.join(', ');\n    addWarningIOS(\n      'ios.requireFullScreen',\n      `iPad multitasking requires all \\`${iPadInterfaceKey}\\` orientations to be defined in the Info.plist. The Info.plist currently defines values that are incompatible with multitasking, these will be overwritten to prevent submission failure. Existing: ${existingList}`\n    );\n    return interfaceOrientations;\n  }\n  return [];\n}\n\n// Whether requires full screen on iPad\nexport function setRequiresFullScreen(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const requiresFullScreen = getRequiresFullScreen(config);\n  if (!requiresFullScreen) {\n    const existing = resolveExistingIpadInterfaceOrientations(infoPlist[iPadInterfaceKey]);\n\n    // There currently exists no mechanism to safely undo this feature besides `expo prebuild --clear`,\n    // this seems ok though because anyone using `UISupportedInterfaceOrientations~ipad` probably\n    // wants them to be defined to this value anyways. This is also the default value used in the Xcode iOS template.\n\n    // Merge any previous interfaces with the required interfaces.\n    infoPlist[iPadInterfaceKey] = [...new Set(existing.concat(requiredIPadInterface))];\n  }\n\n  return {\n    ...infoPlist,\n    UIRequiresFullScreen: requiresFullScreen,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}