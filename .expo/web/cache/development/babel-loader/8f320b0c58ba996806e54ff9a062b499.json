{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Config = void 0;\nexports.areVersionsSynced = areVersionsSynced;\nexports.ensureBuildGradleContainsConfigurationScript = ensureBuildGradleContainsConfigurationScript;\nexports.formatApplyLineForBuildGradle = formatApplyLineForBuildGradle;\nexports.isBuildGradleConfigured = isBuildGradleConfigured;\nexports.isMainApplicationMetaDataSet = isMainApplicationMetaDataSet;\nexports.isMainApplicationMetaDataSynced = isMainApplicationMetaDataSynced;\nexports.setUpdatesConfig = setUpdatesConfig;\nexports.setVersionsConfig = setVersionsConfig;\nexports.withUpdates = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Updates() {\n  var data = require(\"../utils/Updates\");\n  _Updates = function _Updates() {\n    return data;\n  };\n  return data;\n}\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n  _Manifest = function _Manifest() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\nvar Config;\nexports.Config = Config;\n(function (Config) {\n  Config[\"ENABLED\"] = \"expo.modules.updates.ENABLED\";\n  Config[\"CHECK_ON_LAUNCH\"] = \"expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH\";\n  Config[\"LAUNCH_WAIT_MS\"] = \"expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS\";\n  Config[\"SDK_VERSION\"] = \"expo.modules.updates.EXPO_SDK_VERSION\";\n  Config[\"RUNTIME_VERSION\"] = \"expo.modules.updates.EXPO_RUNTIME_VERSION\";\n  Config[\"UPDATE_URL\"] = \"expo.modules.updates.EXPO_UPDATE_URL\";\n  Config[\"RELEASE_CHANNEL\"] = \"expo.modules.updates.EXPO_RELEASE_CHANNEL\";\n  Config[\"UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\"] = \"expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\";\n  Config[\"CODE_SIGNING_CERTIFICATE\"] = \"expo.modules.updates.CODE_SIGNING_CERTIFICATE\";\n  Config[\"CODE_SIGNING_METADATA\"] = \"expo.modules.updates.CODE_SIGNING_METADATA\";\n})(Config || (exports.Config = Config = {}));\nvar withUpdates = function withUpdates(config, _ref) {\n  var expoUsername = _ref.expoUsername;\n  return (0, _androidPlugins().withAndroidManifest)(config, function (config) {\n    var projectRoot = config.modRequest.projectRoot;\n    var expoUpdatesPackageVersion = (0, _Updates().getExpoUpdatesPackageVersion)(projectRoot);\n    config.modResults = setUpdatesConfig(projectRoot, config, config.modResults, expoUsername, expoUpdatesPackageVersion);\n    return config;\n  });\n};\nexports.withUpdates = withUpdates;\nfunction setUpdatesConfig(projectRoot, config, androidManifest, username, expoUpdatesPackageVersion) {\n  var mainApplication = (0, _Manifest().getMainApplicationOrThrow)(androidManifest);\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.ENABLED, String((0, _Updates().getUpdatesEnabled)(config)));\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CHECK_ON_LAUNCH, (0, _Updates().getUpdatesCheckOnLaunch)(config, expoUpdatesPackageVersion));\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.LAUNCH_WAIT_MS, String((0, _Updates().getUpdatesTimeout)(config)));\n  var updateUrl = (0, _Updates().getUpdateUrl)(config, username);\n  if (updateUrl) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.UPDATE_URL);\n  }\n  var codeSigningCertificate = (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config);\n  if (codeSigningCertificate) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CODE_SIGNING_CERTIFICATE, codeSigningCertificate);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.CODE_SIGNING_CERTIFICATE);\n  }\n  var codeSigningMetadata = (0, _Updates().getUpdatesCodeSigningMetadataStringified)(config);\n  if (codeSigningMetadata) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CODE_SIGNING_METADATA, codeSigningMetadata);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.CODE_SIGNING_METADATA);\n  }\n  return setVersionsConfig(config, androidManifest);\n}\nfunction setVersionsConfig(config, androidManifest) {\n  var mainApplication = (0, _Manifest().getMainApplicationOrThrow)(androidManifest);\n  var runtimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'android');\n  if (!runtimeVersion && (0, _Manifest().findMetaDataItem)(mainApplication, Config.RUNTIME_VERSION) > -1) {\n    throw new Error('A runtime version is set in your AndroidManifest.xml, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove expo.modules.updates.EXPO_RUNTIME_VERSION from your AndroidManifest.xml.');\n  }\n  var sdkVersion = (0, _Updates().getSDKVersion)(config);\n  if (runtimeVersion) {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.SDK_VERSION);\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.RUNTIME_VERSION);\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.RUNTIME_VERSION);\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.SDK_VERSION);\n  }\n  return androidManifest;\n}\nfunction ensureBuildGradleContainsConfigurationScript(projectRoot, buildGradleContents) {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    var cleanedUpBuildGradleContents;\n    var isBuildGradleMisconfigured = buildGradleContents.split('\\n').some(function (line) {\n      return line.includes(CREATE_MANIFEST_ANDROID_PATH);\n    });\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(new RegExp(\"(\\n// Integration with Expo updates)?\\n.*\" + CREATE_MANIFEST_ANDROID_PATH + \".*\\n\"), '');\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n    var gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return cleanedUpBuildGradleContents + \"\\n// Integration with Expo updates\\n\" + gradleScriptApply + \"\\n\";\n  } else {\n    return buildGradleContents;\n  }\n}\nfunction formatApplyLineForBuildGradle(projectRoot) {\n  var updatesGradleScriptPath = _resolveFrom().default.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n  if (!updatesGradleScriptPath) {\n    throw new Error(\"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");\n  }\n  var relativePath = _path().default.relative(_path().default.join(projectRoot, 'android', 'app'), updatesGradleScriptPath);\n  var posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n  return \"apply from: \\\"\" + posixPath + \"\\\"\";\n}\nfunction isBuildGradleConfigured(projectRoot, buildGradleContents) {\n  var androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n  return buildGradleContents.replace(/\\r\\n/g, '\\n').split('\\n').some(function (line) {\n    return line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\");\n  });\n}\nfunction isMainApplicationMetaDataSet(androidManifest) {\n  var updateUrl = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.UPDATE_URL);\n  var runtimeVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.RUNTIME_VERSION);\n  var sdkVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.SDK_VERSION);\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\nfunction isMainApplicationMetaDataSynced(projectRoot, config, androidManifest, username) {\n  return (0, _Updates().getUpdateUrl)(config, username) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.UPDATE_URL) && String((0, _Updates().getUpdatesEnabled)(config)) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.ENABLED) && String((0, _Updates().getUpdatesTimeout)(config)) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.LAUNCH_WAIT_MS) && (0, _Updates().getUpdatesCheckOnLaunch)(config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CHECK_ON_LAUNCH) && (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CODE_SIGNING_CERTIFICATE) && (0, _Updates().getUpdatesCodeSigningMetadataStringified)(config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CODE_SIGNING_METADATA) && areVersionsSynced(config, androidManifest);\n}\nfunction areVersionsSynced(config, androidManifest) {\n  var expectedRuntimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'android');\n  var expectedSdkVersion = (0, _Updates().getSDKVersion)(config);\n  var currentRuntimeVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.RUNTIME_VERSION);\n  var currentSdkVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.SDK_VERSION);\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}","map":{"version":3,"sources":["../../src/android/Updates.ts"],"names":["CREATE_MANIFEST_ANDROID_PATH","Config","withUpdates","config","expoUsername","projectRoot","modRequest","expoUpdatesPackageVersion","modResults","setUpdatesConfig","androidManifest","username","mainApplication","ENABLED","String","CHECK_ON_LAUNCH","LAUNCH_WAIT_MS","updateUrl","UPDATE_URL","codeSigningCertificate","CODE_SIGNING_CERTIFICATE","codeSigningMetadata","CODE_SIGNING_METADATA","setVersionsConfig","runtimeVersion","RUNTIME_VERSION","Error","sdkVersion","SDK_VERSION","ensureBuildGradleContainsConfigurationScript","buildGradleContents","isBuildGradleConfigured","cleanedUpBuildGradleContents","isBuildGradleMisconfigured","split","some","line","includes","replace","RegExp","gradleScriptApply","formatApplyLineForBuildGradle","updatesGradleScriptPath","resolveFrom","silent","relativePath","path","relative","join","posixPath","process","platform","androidBuildScript","isMainApplicationMetaDataSet","Boolean","isMainApplicationMetaDataSynced","areVersionsSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"mappings":"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","sourcesContent":["import path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport {\n  ExpoConfigUpdates,\n  getExpoUpdatesPackageVersion,\n  getRuntimeVersionNullable,\n  getSDKVersion,\n  getUpdatesCheckOnLaunch,\n  getUpdatesCodeSigningCertificate,\n  getUpdatesCodeSigningMetadataStringified,\n  getUpdatesEnabled,\n  getUpdatesTimeout,\n  getUpdateUrl,\n} from '../utils/Updates';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  findMetaDataItem,\n  getMainApplicationMetaDataValue,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\n\nconst CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\n\nexport enum Config {\n  ENABLED = 'expo.modules.updates.ENABLED',\n  CHECK_ON_LAUNCH = 'expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH',\n  LAUNCH_WAIT_MS = 'expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS',\n  SDK_VERSION = 'expo.modules.updates.EXPO_SDK_VERSION',\n  RUNTIME_VERSION = 'expo.modules.updates.EXPO_RUNTIME_VERSION',\n  UPDATE_URL = 'expo.modules.updates.EXPO_UPDATE_URL',\n  RELEASE_CHANNEL = 'expo.modules.updates.EXPO_RELEASE_CHANNEL',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY',\n  CODE_SIGNING_CERTIFICATE = 'expo.modules.updates.CODE_SIGNING_CERTIFICATE',\n  CODE_SIGNING_METADATA = 'expo.modules.updates.CODE_SIGNING_METADATA',\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withAndroidManifest(config, (config) => {\n    const projectRoot = config.modRequest.projectRoot;\n    const expoUpdatesPackageVersion = getExpoUpdatesPackageVersion(projectRoot);\n    config.modResults = setUpdatesConfig(\n      projectRoot,\n      config,\n      config.modResults,\n      expoUsername,\n      expoUpdatesPackageVersion\n    );\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null,\n  expoUpdatesPackageVersion?: string | null\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.ENABLED,\n    String(getUpdatesEnabled(config))\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.CHECK_ON_LAUNCH,\n    getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion)\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.LAUNCH_WAIT_MS,\n    String(getUpdatesTimeout(config))\n  );\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    addMetaDataItemToMainApplication(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.UPDATE_URL);\n  }\n\n  const codeSigningCertificate = getUpdatesCodeSigningCertificate(projectRoot, config);\n  if (codeSigningCertificate) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.CODE_SIGNING_CERTIFICATE,\n      codeSigningCertificate\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.CODE_SIGNING_CERTIFICATE);\n  }\n\n  const codeSigningMetadata = getUpdatesCodeSigningMetadataStringified(config);\n  if (codeSigningMetadata) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.CODE_SIGNING_METADATA,\n      codeSigningMetadata\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.CODE_SIGNING_METADATA);\n  }\n\n  return setVersionsConfig(config, androidManifest);\n}\n\nexport function setVersionsConfig(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  const runtimeVersion = getRuntimeVersionNullable(config, 'android');\n  if (!runtimeVersion && findMetaDataItem(mainApplication, Config.RUNTIME_VERSION) > -1) {\n    throw new Error(\n      'A runtime version is set in your AndroidManifest.xml, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove expo.modules.updates.EXPO_RUNTIME_VERSION from your AndroidManifest.xml.'\n    );\n  }\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    /**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n  }\n\n  return androidManifest;\n}\nexport function ensureBuildGradleContainsConfigurationScript(\n  projectRoot: string,\n  buildGradleContents: string\n): string {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    let cleanedUpBuildGradleContents;\n\n    const isBuildGradleMisconfigured = buildGradleContents\n      .split('\\n')\n      .some((line) => line.includes(CREATE_MANIFEST_ANDROID_PATH));\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(\n        new RegExp(`(\\n// Integration with Expo updates)?\\n.*${CREATE_MANIFEST_ANDROID_PATH}.*\\n`),\n        ''\n      );\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n\n    const gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return `${cleanedUpBuildGradleContents}\\n// Integration with Expo updates\\n${gradleScriptApply}\\n`;\n  } else {\n    return buildGradleContents;\n  }\n}\n\nexport function formatApplyLineForBuildGradle(projectRoot: string): string {\n  const updatesGradleScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n\n  if (!updatesGradleScriptPath) {\n    throw new Error(\n      \"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(\n    path.join(projectRoot, 'android', 'app'),\n    updatesGradleScriptPath\n  );\n  const posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n\n  return `apply from: \"${posixPath}\"`;\n}\n\nexport function isBuildGradleConfigured(projectRoot: string, buildGradleContents: string): boolean {\n  const androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n\n  return (\n    buildGradleContents\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some((line) => line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function isMainApplicationMetaDataSet(androidManifest: AndroidManifest): boolean {\n  const updateUrl = getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL);\n  const runtimeVersion = getMainApplicationMetaDataValue(androidManifest, Config.RUNTIME_VERSION);\n  const sdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\n\nexport function isMainApplicationMetaDataSynced(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL) &&\n    String(getUpdatesEnabled(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.ENABLED) &&\n    String(getUpdatesTimeout(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.LAUNCH_WAIT_MS) &&\n    getUpdatesCheckOnLaunch(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CHECK_ON_LAUNCH) &&\n    getUpdatesCodeSigningCertificate(projectRoot, config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CODE_SIGNING_CERTIFICATE) &&\n    getUpdatesCodeSigningMetadataStringified(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CODE_SIGNING_METADATA) &&\n    areVersionsSynced(config, androidManifest)\n  );\n}\n\nexport function areVersionsSynced(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion' | 'sdkVersion'>,\n  androidManifest: AndroidManifest\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config, 'android');\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = getMainApplicationMetaDataValue(\n    androidManifest,\n    Config.RUNTIME_VERSION\n  );\n  const currentSdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}