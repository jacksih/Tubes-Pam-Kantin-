{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Link;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _useLinkProps = _interopRequireDefault(require(\"./useLinkProps\"));\nvar _excluded = [\"to\", \"action\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction Link(_ref) {\n  var to = _ref.to,\n    action = _ref.action,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var props = (0, _useLinkProps.default)({\n    to: to,\n    action: action\n  });\n  var onPress = function onPress(e) {\n    if ('onPress' in rest) {\n      var _rest$onPress;\n      (_rest$onPress = rest.onPress) === null || _rest$onPress === void 0 ? void 0 : _rest$onPress.call(rest, e);\n    }\n    props.onPress(e);\n  };\n  return React.createElement(_reactNative.Text, Object.assign({}, props, rest, _reactNative.Platform.select({\n    web: {\n      onClick: onPress\n    },\n    default: {\n      onPress: onPress\n    }\n  })));\n}","map":{"version":3,"sources":["Link.tsx"],"names":["Link","to","action","rest","props","useLinkProps","onPress","e","createElement","Text","select","web","onClick","default"],"mappings":";;;;;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAoBe,SAASA,IAAT,CAAA,IAAA,EAIM;EAJyD,IAC5EC,EAD4E,GAIzD,IAAA,CAHnBA,EAD4E;IAE5EC,MAF4E,GAIzD,IAAA,CAFnBA,MAF4E;IAGzEC,IAAAA,0CACgB,IAAA;EACnB,IAAMC,KAAK,GAAGC,IAAAA,qBAAY,EAAY;IAAEJ,EAAF,EAAEA,EAAF;IAAMC,MAAAA,EAAAA;EAAN,CAAZ,CAA1B;EAEA,IAAMI,OAAO,GACXC,SADID,OAAO,CACXC,CADc,EAEX;IACH,IAAI,SAAA,IAAaJ,IAAjB,EAAuB;MAAA,IAAA,aAAA;MACrB,CAAA,aAAA,GAAA,IAAI,CAACG,OAAL,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAI,EAAWC,CAAX,CAAJ;IACD;IAEDH,KAAK,CAACE,OAANF,CAAcG,CAAdH,CAAAA;EACD,CARD;EAUA,OAAO,KAAK,CAACI,aAAN,CAAoBC,iBAApB,oBACFL,KAD4B,EAE5BD,IAF4B,EAG5B,qBAAQ,CAACO,MAAT,CAAgB;IACjBC,GAAG,EAAE;MAAEC,OAAO,EAAEN;IAAX,CADY;IAEjBO,OAAO,EAAE;MAAEP,OAAAA,EAAAA;IAAF;EAFQ,CAAhB,CAAA,EAHL;AAQD","sourcesContent":["import type { NavigationAction } from '@react-navigation/core';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform, Text, TextProps } from 'react-native';\n\nimport useLinkProps from './useLinkProps';\nimport type { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link<ParamList extends ReactNavigation.RootParamList>({\n  to,\n  action,\n  ...rest\n}: Props<ParamList>) {\n  const props = useLinkProps<ParamList>({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"script"}