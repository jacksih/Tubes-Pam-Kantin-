{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.importMetroConfigFromProject = importMetroConfigFromProject;\nexports.importMetroSourceMapFromProject = importMetroSourceMapFromProject;\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar MetroImportError = function (_Error) {\n  _inherits(MetroImportError, _Error);\n  var _super = _createSuper(MetroImportError);\n  function MetroImportError(projectRoot, moduleId) {\n    _classCallCheck(this, MetroImportError);\n    return _super.call(this, \"Missing package \\\"\" + moduleId + \"\\\" in the project at: \" + projectRoot + \"\\n\" + 'This usually means `react-native` is not installed. ' + 'Please verify that dependencies in package.json include \"react-native\" ' + 'and run `yarn` or `npm install`.');\n  }\n  return _createClass(MetroImportError);\n}(_wrapNativeSuper(Error));\nfunction resolveFromProject(projectRoot, moduleId) {\n  var resolvedPath = _resolveFrom().default.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\nfunction importFromProject(projectRoot, moduleId) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\nfunction importMetroConfigFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro-config');\n}\nvar metroSourceMap;\nfunction importMetroSourceMapFromProject(projectRoot) {\n  if (metroSourceMap) return metroSourceMap;\n  metroSourceMap = importFromProject(projectRoot, 'metro-source-map');\n  return metroSourceMap;\n}","map":{"version":3,"sources":["../src/importMetroFromProject.ts"],"names":["MetroImportError","Error","constructor","projectRoot","moduleId","resolveFromProject","resolvedPath","resolveFrom","silent","importFromProject","require","importMetroConfigFromProject","metroSourceMap","importMetroSourceMapFromProject"],"mappings":";;;;;;;;;;;;;;;AAEA,SAAA,YAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;EAAA,YAAA,GAAA,wBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;IAEMA,gBAAN;EAAA;EAAA;EACEE,0BAAYC,WAAD,EAAsBC,QAAtB,EAAwC;IAAA;IAAA,yBAE9C,uBAAmBA,QAAS,8BAAuBD,WAApD,UACE,sDADF,GAEE,yEAFF,GAGE,kCAJJ;EAMD;EAAA;AAAA,mBAR4BF,KAA/B;AAWA,SAASI,kBAAT,CAA4BF,WAA5B,EAAiDC,QAAjD,EAAmE;EACjE,IAAME,YAAY,GAAGC,YAAAA,EAAAA,CAAAA,OAAAA,CAAYC,MAAZD,CAAmBJ,WAAnBI,EAAgCH,QAAhCG,CAArB;EACA,IAAI,CAACD,YAAL,EAAmB;IACjB,MAAM,IAAIN,gBAAJ,CAAqBG,WAArB,EAAkCC,QAAlC,CAAN;EACD;EACD,OAAOE,YAAP;AACD;AAED,SAASG,iBAAT,CAAoCN,WAApC,EAAyDC,QAAzD,EAA8E;EAC5E,OAAOM,OAAO,CAACL,kBAAkB,CAACF,WAAD,EAAcC,QAAd,CAAnB,CAAd;AACD;AAEM,SAASO,4BAAT,CAAsCR,WAAtC,EAA+E;EACpF,OAAOM,iBAAiB,CAACN,WAAD,EAAc,cAAd,CAAxB;AACD;AAED,IAAIS,cAAJ;AAEO,SAASC,+BAAT,CAAyCV,WAAzC,EAAqF;EAC1F,IAAIS,cAAJ,EAAoB,OAAOA,cAAP;EACpBA,cAAc,GAAGH,iBAAiB,CAAwBN,WAAxB,EAAqC,kBAArC,CAAlCS;EACA,OAAOA,cAAP;AACD","sourcesContent":["import type MetroConfig from 'metro-config';\nimport type MetroSourceMap from 'metro-source-map';\nimport resolveFrom from 'resolve-from';\n\nclass MetroImportError extends Error {\n  constructor(projectRoot: string, moduleId: string) {\n    super(\n      `Missing package \"${moduleId}\" in the project at: ${projectRoot}\\n` +\n        'This usually means `react-native` is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n}\n\nfunction resolveFromProject(projectRoot: string, moduleId: string) {\n  const resolvedPath = resolveFrom.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\n\nfunction importFromProject<T = any>(projectRoot: string, moduleId: string): T {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\n\nexport function importMetroConfigFromProject(projectRoot: string): typeof MetroConfig {\n  return importFromProject(projectRoot, 'metro-config');\n}\n\nlet metroSourceMap: typeof MetroSourceMap | undefined;\n\nexport function importMetroSourceMapFromProject(projectRoot: string): typeof MetroSourceMap {\n  if (metroSourceMap) return metroSourceMap;\n  metroSourceMap = importFromProject<typeof MetroSourceMap>(projectRoot, 'metro-source-map');\n  return metroSourceMap;\n}\n"]},"metadata":{},"sourceType":"script"}