{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appendScheme = appendScheme;\nexports.getScheme = getScheme;\nexports.getSchemesFromPlist = getSchemesFromPlist;\nexports.hasScheme = hasScheme;\nexports.removeScheme = removeScheme;\nexports.setScheme = setScheme;\nexports.withScheme = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nvar withScheme = (0, _iosPlugins().createInfoPlistPluginWithPropertyGuard)(setScheme, {\n  infoPlistProperty: 'CFBundleURLTypes',\n  expoConfigProperty: 'scheme'\n}, 'withScheme');\nexports.withScheme = withScheme;\nfunction getScheme(config) {\n  if (Array.isArray(config.scheme)) {\n    var validate = function validate(value) {\n      return typeof value === 'string';\n    };\n    return config.scheme.filter(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\nfunction setScheme(config, infoPlist) {\n  var _config$ios, _config$ios2;\n  var scheme = [].concat(_toConsumableArray(getScheme(config)), _toConsumableArray(getScheme((_config$ios = config.ios) !== null && _config$ios !== void 0 ? _config$ios : {})));\n  if ((_config$ios2 = config.ios) !== null && _config$ios2 !== void 0 && _config$ios2.bundleIdentifier) {\n    scheme.push(config.ios.bundleIdentifier);\n  }\n  if (scheme.length === 0) {\n    return infoPlist;\n  }\n  return Object.assign({}, infoPlist, {\n    CFBundleURLTypes: [{\n      CFBundleURLSchemes: scheme\n    }]\n  });\n}\nfunction appendScheme(scheme, infoPlist) {\n  var _infoPlist$CFBundleUR;\n  if (!scheme) {\n    return infoPlist;\n  }\n  var existingSchemes = (_infoPlist$CFBundleUR = infoPlist.CFBundleURLTypes) !== null && _infoPlist$CFBundleUR !== void 0 ? _infoPlist$CFBundleUR : [];\n  if (existingSchemes !== null && existingSchemes !== void 0 && existingSchemes.some(function (_ref) {\n    var CFBundleURLSchemes = _ref.CFBundleURLSchemes;\n    return CFBundleURLSchemes.includes(scheme);\n  })) {\n    return infoPlist;\n  }\n  return Object.assign({}, infoPlist, {\n    CFBundleURLTypes: [].concat(_toConsumableArray(existingSchemes), [{\n      CFBundleURLSchemes: [scheme]\n    }])\n  });\n}\nfunction removeScheme(scheme, infoPlist) {\n  if (!scheme) {\n    return infoPlist;\n  }\n  if (!infoPlist.CFBundleURLTypes) {\n    return infoPlist;\n  }\n  infoPlist.CFBundleURLTypes = infoPlist.CFBundleURLTypes.map(function (bundleUrlType) {\n    var index = bundleUrlType.CFBundleURLSchemes.indexOf(scheme);\n    if (index > -1) {\n      bundleUrlType.CFBundleURLSchemes.splice(index, 1);\n      if (bundleUrlType.CFBundleURLSchemes.length === 0) {\n        return undefined;\n      }\n    }\n    return bundleUrlType;\n  }).filter(Boolean);\n  return infoPlist;\n}\nfunction hasScheme(scheme, infoPlist) {\n  var existingSchemes = infoPlist.CFBundleURLTypes;\n  if (!Array.isArray(existingSchemes)) return false;\n  return existingSchemes === null || existingSchemes === void 0 ? void 0 : existingSchemes.some(function (_ref2) {\n    var schemes = _ref2.CFBundleURLSchemes;\n    return Array.isArray(schemes) ? schemes.includes(scheme) : false;\n  });\n}\nfunction getSchemesFromPlist(infoPlist) {\n  if (Array.isArray(infoPlist.CFBundleURLTypes)) {\n    return infoPlist.CFBundleURLTypes.reduce(function (schemes, _ref3) {\n      var CFBundleURLSchemes = _ref3.CFBundleURLSchemes;\n      if (Array.isArray(CFBundleURLSchemes)) {\n        return [].concat(_toConsumableArray(schemes), _toConsumableArray(CFBundleURLSchemes));\n      }\n      return schemes;\n    }, []);\n  }\n  return [];\n}","map":{"version":3,"sources":["../../src/ios/Scheme.ts"],"names":["withScheme","setScheme","infoPlistProperty","expoConfigProperty","getScheme","config","Array","isArray","scheme","validate","value","filter","infoPlist","ios","bundleIdentifier","push","length","CFBundleURLTypes","CFBundleURLSchemes","appendScheme","existingSchemes","some","includes","removeScheme","map","bundleUrlType","index","indexOf","splice","undefined","Boolean","hasScheme","schemes","getSchemesFromPlist","reduce"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPluginWithPropertyGuard } from '../plugins/ios-plugins';\nimport { InfoPlist, URLScheme } from './IosConfig.types';\n\nexport const withScheme = createInfoPlistPluginWithPropertyGuard(\n  setScheme,\n  {\n    infoPlistProperty: 'CFBundleURLTypes',\n    expoConfigProperty: 'scheme',\n  },\n  'withScheme'\n);\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => {\n      return typeof value === 'string';\n    };\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\nexport function setScheme(\n  config: Partial<Pick<ExpoConfig, 'scheme' | 'ios'>>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const scheme = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: ios.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.ios ?? {}),\n  ];\n  // Add the bundle identifier to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.ios?.bundleIdentifier) {\n    scheme.push(config.ios.bundleIdentifier);\n  }\n  if (scheme.length === 0) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [{ CFBundleURLSchemes: scheme }],\n  };\n}\n\nexport function appendScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  const existingSchemes = infoPlist.CFBundleURLTypes ?? [];\n  if (existingSchemes?.some(({ CFBundleURLSchemes }) => CFBundleURLSchemes.includes(scheme))) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [\n      ...existingSchemes,\n      {\n        CFBundleURLSchemes: [scheme],\n      },\n    ],\n  };\n}\n\nexport function removeScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  // No need to remove if we don't have any\n  if (!infoPlist.CFBundleURLTypes) {\n    return infoPlist;\n  }\n\n  infoPlist.CFBundleURLTypes = infoPlist.CFBundleURLTypes.map((bundleUrlType) => {\n    const index = bundleUrlType.CFBundleURLSchemes.indexOf(scheme);\n    if (index > -1) {\n      bundleUrlType.CFBundleURLSchemes.splice(index, 1);\n      if (bundleUrlType.CFBundleURLSchemes.length === 0) {\n        return undefined;\n      }\n    }\n    return bundleUrlType;\n  }).filter(Boolean) as URLScheme[];\n\n  return infoPlist;\n}\n\nexport function hasScheme(scheme: string, infoPlist: InfoPlist): boolean {\n  const existingSchemes = infoPlist.CFBundleURLTypes;\n\n  if (!Array.isArray(existingSchemes)) return false;\n\n  return existingSchemes?.some(({ CFBundleURLSchemes: schemes }: any) =>\n    Array.isArray(schemes) ? schemes.includes(scheme) : false\n  );\n}\n\nexport function getSchemesFromPlist(infoPlist: InfoPlist): string[] {\n  if (Array.isArray(infoPlist.CFBundleURLTypes)) {\n    return infoPlist.CFBundleURLTypes.reduce<string[]>((schemes, { CFBundleURLSchemes }) => {\n      if (Array.isArray(CFBundleURLSchemes)) {\n        return [...schemes, ...CFBundleURLSchemes];\n      }\n      return schemes;\n    }, []);\n  }\n  return [];\n}\n"]},"metadata":{},"sourceType":"script"}