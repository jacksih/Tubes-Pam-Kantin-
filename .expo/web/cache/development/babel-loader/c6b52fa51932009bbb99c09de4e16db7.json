{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGeneratedHeaderComment = createGeneratedHeaderComment;\nexports.createHash = createHash;\nexports.mergeContents = mergeContents;\nexports.removeContents = removeContents;\nexports.removeGeneratedContents = removeGeneratedContents;\nfunction _crypto() {\n  var data = _interopRequireDefault(require(\"crypto\"));\n  _crypto = function _crypto() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getGeneratedSectionIndexes(src, tag) {\n  var contents = src.split('\\n');\n  var start = contents.findIndex(function (line) {\n    return line.includes(\"@generated begin \" + tag);\n  });\n  var end = contents.findIndex(function (line) {\n    return line.includes(\"@generated end \" + tag);\n  });\n  return {\n    contents: contents,\n    start: start,\n    end: end\n  };\n}\nfunction mergeContents(_ref) {\n  var src = _ref.src,\n    newSrc = _ref.newSrc,\n    tag = _ref.tag,\n    anchor = _ref.anchor,\n    offset = _ref.offset,\n    comment = _ref.comment;\n  var header = createGeneratedHeaderComment(newSrc, tag, comment);\n  if (!src.includes(header)) {\n    var sanitizedTarget = removeGeneratedContents(src, tag);\n    return {\n      contents: addLines(sanitizedTarget !== null && sanitizedTarget !== void 0 ? sanitizedTarget : src, anchor, offset, [header].concat(_toConsumableArray(newSrc.split('\\n')), [comment + \" @generated end \" + tag])),\n      didMerge: true,\n      didClear: !!sanitizedTarget\n    };\n  }\n  return {\n    contents: src,\n    didClear: false,\n    didMerge: false\n  };\n}\nfunction removeContents(_ref2) {\n  var src = _ref2.src,\n    tag = _ref2.tag;\n  var sanitizedTarget = removeGeneratedContents(src, tag);\n  return {\n    contents: sanitizedTarget !== null && sanitizedTarget !== void 0 ? sanitizedTarget : src,\n    didMerge: false,\n    didClear: !!sanitizedTarget\n  };\n}\nfunction addLines(content, find, offset, toAdd) {\n  var lines = content.split('\\n');\n  var lineIndex = lines.findIndex(function (line) {\n    return line.match(find);\n  });\n  if (lineIndex < 0) {\n    var error = new Error(\"Failed to match \\\"\" + find + \"\\\" in contents:\\n\" + content);\n    error.code = 'ERR_NO_MATCH';\n    throw error;\n  }\n  for (var newLine of toAdd) {\n    lines.splice(lineIndex + offset, 0, newLine);\n    lineIndex++;\n  }\n  return lines.join('\\n');\n}\nfunction removeGeneratedContents(src, tag) {\n  var _getGeneratedSectionI = getGeneratedSectionIndexes(src, tag),\n    contents = _getGeneratedSectionI.contents,\n    start = _getGeneratedSectionI.start,\n    end = _getGeneratedSectionI.end;\n  if (start > -1 && end > -1 && start < end) {\n    contents.splice(start, end - start + 1);\n    return contents.join('\\n');\n  }\n  return null;\n}\nfunction createGeneratedHeaderComment(contents, tag, comment) {\n  var hashKey = createHash(contents);\n  return comment + \" @generated begin \" + tag + \" - expo prebuild (DO NOT MODIFY) \" + hashKey;\n}\nfunction createHash(src) {\n  var hash = _crypto().default.createHash('sha1').update(src).digest('hex');\n  return \"sync-\" + hash;\n}","map":{"version":3,"sources":["../../src/utils/generateCode.ts"],"names":["getGeneratedSectionIndexes","src","tag","contents","split","start","findIndex","line","includes","end","mergeContents","newSrc","anchor","offset","comment","header","createGeneratedHeaderComment","sanitizedTarget","removeGeneratedContents","addLines","didMerge","didClear","removeContents","content","find","toAdd","lines","lineIndex","match","error","Error","code","newLine","splice","join","hashKey","createHash","hash","crypto","update","digest"],"mappings":";;;;;;;;;;;AAKA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAEA,SAASA,0BAAT,CACEC,GADF,EAEEC,GAFF,EAGsD;EACpD,IAAMC,QAAQ,GAAGF,GAAG,CAACG,KAAJH,CAAU,IAAVA,CAAjB;EACA,IAAMI,KAAK,GAAGF,QAAQ,CAACG,SAATH,CAAoBI,UAAAA,IAAD;IAAA,OAAUA,IAAI,CAACC,QAALD,uBAAkCL,GAAlCK,CAA7BJ;EAAAA,EAAd;EACA,IAAMM,GAAG,GAAGN,QAAQ,CAACG,SAATH,CAAoBI,UAAAA,IAAD;IAAA,OAAUA,IAAI,CAACC,QAALD,qBAAgCL,GAAhCK,CAA7BJ;EAAAA,EAAZ;EAEA,OAAO;IAAEA,QAAF,EAAEA,QAAF;IAAYE,KAAZ,EAAYA,KAAZ;IAAmBI,GAAAA,EAAAA;EAAnB,CAAP;AACD;AAkBM,SAASC,aAAT,OAcU;EAAA,IAbfT,GAD4B,QAC5BA,GAD4B;IAE5BU,MAF4B,QAE5BA,MAF4B;IAG5BT,GAH4B,QAG5BA,GAH4B;IAI5BU,MAJ4B,QAI5BA,MAJ4B;IAK5BC,MAL4B,QAK5BA,MAL4B;IAM5BC,OAAAA,QAAAA,OAAAA;EASA,IAAMC,MAAM,GAAGC,4BAA4B,CAACL,MAAD,EAAST,GAAT,EAAcY,OAAd,CAA3C;EACA,IAAI,CAACb,GAAG,CAACO,QAAJP,CAAac,MAAbd,CAAL,EAA2B;IAEzB,IAAMgB,eAAe,GAAGC,uBAAuB,CAACjB,GAAD,EAAMC,GAAN,CAA/C;IACA,OAAO;MACLC,QAAQ,EAAEgB,QAAQ,CAACF,eAAD,KAAA,IAAA,IAACA,eAAD,KAAA,KAAA,CAAA,GAACA,eAAD,GAAoBhB,GAApB,EAAyBW,MAAzB,EAAiCC,MAAjC,GAChBE,MADyD,4BAEtDJ,MAAM,CAACP,KAAPO,CAAa,IAAbA,CAFsD,IAGtDG,OAAQ,wBAAkBZ,GAHb,GADb;MAMLkB,QAAQ,EAAE,IANL;MAOLC,QAAQ,EAAE,CAAC,CAACJ;IAPP,CAAP;EASD;EACD,OAAO;IAAEd,QAAQ,EAAEF,GAAZ;IAAiBoB,QAAQ,EAAE,KAA3B;IAAkCD,QAAQ,EAAE;EAA5C,CAAP;AACD;AAEM,SAASE,cAAT,QAAkF;EAAA,IAAxDrB,GAAF,SAAEA,GAAF;IAAOC,GAAAA,SAAAA,GAAAA;EAEpC,IAAMe,eAAe,GAAGC,uBAAuB,CAACjB,GAAD,EAAMC,GAAN,CAA/C;EACA,OAAO;IACLC,QAAQ,EAAEc,eAAF,KAAA,IAAA,IAAEA,eAAF,KAAA,KAAA,CAAA,GAAEA,eAAF,GAAqBhB,GADxB;IAELmB,QAAQ,EAAE,KAFL;IAGLC,QAAQ,EAAE,CAAC,CAACJ;EAHP,CAAP;AAKD;AAED,SAASE,QAAT,CAAkBI,OAAlB,EAAmCC,IAAnC,EAA0DX,MAA1D,EAA0EY,KAA1E,EAA2F;EACzF,IAAMC,KAAK,GAAGH,OAAO,CAACnB,KAARmB,CAAc,IAAdA,CAAd;EAEA,IAAII,SAAS,GAAGD,KAAK,CAACpB,SAANoB,CAAiBnB,UAAAA,IAAD;IAAA,OAAUA,IAAI,CAACqB,KAALrB,CAAWiB,IAAXjB,CAA1BmB;EAAAA,EAAhB;EACA,IAAIC,SAAS,GAAG,CAAhB,EAAmB;IACjB,IAAME,KAAK,GAAG,IAAIC,KAAJ,wBAA8BN,IAAK,yBAAkBD,OAArD,CADG;IAGjBM,KAAK,CAACE,IAANF,GAAa,cAAbA;IACA,MAAMA,KAAN;EACD;EACD,KAAK,IAAMG,OAAX,IAAsBP,KAAtB,EAA6B;IAC3BC,KAAK,CAACO,MAANP,CAAaC,SAAS,GAAGd,MAAzBa,EAAiC,CAAjCA,EAAoCM,OAApCN,CAAAA;IACAC,SAAS,EAAA;EACV;EAED,OAAOD,KAAK,CAACQ,IAANR,CAAW,IAAXA,CAAP;AACD;AAQM,SAASR,uBAAT,CAAiCjB,GAAjC,EAA8CC,GAA9C,EAA0E;EAC/E,4BAAiCF,0BAA0B,CAACC,GAAD,EAAMC,GAAN,CAA3D;IAAQC,QAAF,yBAAEA,QAAF;IAAYE,KAAZ,yBAAYA,KAAZ;IAAmBI,GAAAA,yBAAAA,GAAAA;EACzB,IAAIJ,KAAK,GAAG,CAAC,CAATA,IAAcI,GAAG,GAAG,CAAC,CAArBJ,IAA0BA,KAAK,GAAGI,GAAtC,EAA2C;IACzCN,QAAQ,CAAC8B,MAAT9B,CAAgBE,KAAhBF,EAAuBM,GAAG,GAAGJ,KAANI,GAAc,CAArCN,CADyC;IAIzC,OAAOA,QAAQ,CAAC+B,IAAT/B,CAAc,IAAdA,CAAP;EACD;EACD,OAAO,IAAP;AACD;AAEM,SAASa,4BAAT,CACLb,QADK,EAELD,GAFK,EAGLY,OAHK,EAIG;EACR,IAAMqB,OAAO,GAAGC,UAAU,CAACjC,QAAD,CADlB;EAIR,OAAUW,OAAQ,0BAAoBZ,GAAI,yCAAmCiC,OAA7E;AACD;AAEM,SAASC,UAAT,CAAoBnC,GAApB,EAAyC;EAE9C,IAAMoC,IAAI,GAAGC,OAAAA,EAAAA,CAAAA,OAAAA,CAAOF,UAAPE,CAAkB,MAAlBA,CAAAA,CAA0BC,MAA1BD,CAAiCrC,GAAjCqC,CAAAA,CAAsCE,MAAtCF,CAA6C,KAA7CA,CAAb;EACA,iBAAeD,IAAf;AACD","sourcesContent":["/**\n * Get line indexes for the generated section of a file.\n *\n * @param src\n */\nimport crypto from 'crypto';\n\nfunction getGeneratedSectionIndexes(\n  src: string,\n  tag: string\n): { contents: string[]; start: number; end: number } {\n  const contents = src.split('\\n');\n  const start = contents.findIndex((line) => line.includes(`@generated begin ${tag}`));\n  const end = contents.findIndex((line) => line.includes(`@generated end ${tag}`));\n\n  return { contents, start, end };\n}\n\nexport type MergeResults = {\n  contents: string;\n  didClear: boolean;\n  didMerge: boolean;\n};\n\n/**\n * Merge the contents of two files together and add a generated header.\n *\n * @param src contents of the original file\n * @param newSrc new contents to merge into the original file\n * @param identifier used to update and remove merges\n * @param anchor regex to where the merge should begin\n * @param offset line offset to start merging at (<1 for behind the anchor)\n * @param comment comment style `//` or `#`\n */\nexport function mergeContents({\n  src,\n  newSrc,\n  tag,\n  anchor,\n  offset,\n  comment,\n}: {\n  src: string;\n  newSrc: string;\n  tag: string;\n  anchor: string | RegExp;\n  offset: number;\n  comment: string;\n}): MergeResults {\n  const header = createGeneratedHeaderComment(newSrc, tag, comment);\n  if (!src.includes(header)) {\n    // Ensure the old generated contents are removed.\n    const sanitizedTarget = removeGeneratedContents(src, tag);\n    return {\n      contents: addLines(sanitizedTarget ?? src, anchor, offset, [\n        header,\n        ...newSrc.split('\\n'),\n        `${comment} @generated end ${tag}`,\n      ]),\n      didMerge: true,\n      didClear: !!sanitizedTarget,\n    };\n  }\n  return { contents: src, didClear: false, didMerge: false };\n}\n\nexport function removeContents({ src, tag }: { src: string; tag: string }): MergeResults {\n  // Ensure the old generated contents are removed.\n  const sanitizedTarget = removeGeneratedContents(src, tag);\n  return {\n    contents: sanitizedTarget ?? src,\n    didMerge: false,\n    didClear: !!sanitizedTarget,\n  };\n}\n\nfunction addLines(content: string, find: string | RegExp, offset: number, toAdd: string[]) {\n  const lines = content.split('\\n');\n\n  let lineIndex = lines.findIndex((line) => line.match(find));\n  if (lineIndex < 0) {\n    const error = new Error(`Failed to match \"${find}\" in contents:\\n${content}`);\n    // @ts-ignore\n    error.code = 'ERR_NO_MATCH';\n    throw error;\n  }\n  for (const newLine of toAdd) {\n    lines.splice(lineIndex + offset, 0, newLine);\n    lineIndex++;\n  }\n\n  return lines.join('\\n');\n}\n\n/**\n * Removes the generated section from a file, returns null when nothing can be removed.\n * This sways heavily towards not removing lines unless it's certain that modifications were not made manually.\n *\n * @param src\n */\nexport function removeGeneratedContents(src: string, tag: string): string | null {\n  const { contents, start, end } = getGeneratedSectionIndexes(src, tag);\n  if (start > -1 && end > -1 && start < end) {\n    contents.splice(start, end - start + 1);\n    // TODO: We could in theory check that the contents we're removing match the hash used in the header,\n    // this would ensure that we don't accidentally remove lines that someone added or removed from the generated section.\n    return contents.join('\\n');\n  }\n  return null;\n}\n\nexport function createGeneratedHeaderComment(\n  contents: string,\n  tag: string,\n  comment: string\n): string {\n  const hashKey = createHash(contents);\n\n  // Everything after the `${tag} ` is unversioned and can be freely modified without breaking changes.\n  return `${comment} @generated begin ${tag} - expo prebuild (DO NOT MODIFY) ${hashKey}`;\n}\n\nexport function createHash(src: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  const hash = crypto.createHash('sha1').update(src).digest('hex');\n  return `sync-${hash}`;\n}\n"]},"metadata":{},"sourceType":"script"}