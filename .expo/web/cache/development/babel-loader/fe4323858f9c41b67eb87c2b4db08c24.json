{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setProvisioningProfileForPbxproj = setProvisioningProfileForPbxproj;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _Target() {\n  var data = require(\"./Target\");\n  _Target = function _Target() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _string() {\n  var data = require(\"./utils/string\");\n  _string = function _string() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction setProvisioningProfileForPbxproj(projectRoot, _ref) {\n  var targetName = _ref.targetName,\n    profileName = _ref.profileName,\n    appleTeamId = _ref.appleTeamId,\n    _ref$buildConfigurati = _ref.buildConfiguration,\n    buildConfiguration = _ref$buildConfigurati === void 0 ? 'Release' : _ref$buildConfigurati;\n  var project = (0, _Xcodeproj().getPbxproj)(projectRoot);\n  var nativeTargetEntry = targetName ? (0, _Target().findNativeTargetByName)(project, targetName) : (0, _Target().findFirstNativeTarget)(project);\n  var _nativeTargetEntry = _slicedToArray(nativeTargetEntry, 2),\n    nativeTargetId = _nativeTargetEntry[0],\n    nativeTarget = _nativeTargetEntry[1];\n  var quotedAppleTeamId = ensureQuotes(appleTeamId);\n  (0, _Xcodeproj().getBuildConfigurationsForListId)(project, nativeTarget.buildConfigurationList).filter(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      item = _ref3[1];\n    return (0, _string().trimQuotes)(item.name) === buildConfiguration;\n  }).forEach(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      item = _ref5[1];\n    item.buildSettings.PROVISIONING_PROFILE_SPECIFIER = \"\\\"\" + profileName + \"\\\"\";\n    item.buildSettings.DEVELOPMENT_TEAM = quotedAppleTeamId;\n    item.buildSettings.CODE_SIGN_IDENTITY = '\"iPhone Distribution\"';\n    item.buildSettings.CODE_SIGN_STYLE = 'Manual';\n  });\n  Object.entries((0, _Xcodeproj().getProjectSection)(project)).filter(_Xcodeproj().isNotComment).forEach(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      item = _ref7[1];\n    if (!item.attributes.TargetAttributes[nativeTargetId]) {\n      item.attributes.TargetAttributes[nativeTargetId] = {};\n    }\n    item.attributes.TargetAttributes[nativeTargetId].DevelopmentTeam = quotedAppleTeamId;\n    item.attributes.TargetAttributes[nativeTargetId].ProvisioningStyle = 'Manual';\n  });\n  _fs().default.writeFileSync(project.filepath, project.writeSync());\n}\nvar ensureQuotes = function ensureQuotes(value) {\n  if (!value.match(/^['\"]/)) {\n    return \"\\\"\" + value + \"\\\"\";\n  }\n  return value;\n};","map":{"version":3,"sources":["../../src/ios/ProvisioningProfile.ts"],"names":["setProvisioningProfileForPbxproj","projectRoot","targetName","profileName","appleTeamId","buildConfiguration","project","nativeTargetEntry","nativeTargetId","nativeTarget","quotedAppleTeamId","ensureQuotes","buildConfigurationList","filter","item","name","forEach","buildSettings","PROVISIONING_PROFILE_SPECIFIER","DEVELOPMENT_TEAM","CODE_SIGN_IDENTITY","CODE_SIGN_STYLE","Object","entries","isNotComment","attributes","TargetAttributes","DevelopmentTeam","ProvisioningStyle","fs","writeFileSync","filepath","writeSync","value","match"],"mappings":"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","sourcesContent":["import fs from 'fs';\n\nimport { findFirstNativeTarget, findNativeTargetByName } from './Target';\nimport {\n  ConfigurationSectionEntry,\n  getBuildConfigurationsForListId,\n  getPbxproj,\n  getProjectSection,\n  isNotComment,\n  ProjectSectionEntry,\n} from './utils/Xcodeproj';\nimport { trimQuotes } from './utils/string';\n\ntype ProvisioningProfileSettings = {\n  targetName?: string;\n  appleTeamId: string;\n  profileName: string;\n  buildConfiguration?: string;\n};\n\nexport function setProvisioningProfileForPbxproj(\n  projectRoot: string,\n  {\n    targetName,\n    profileName,\n    appleTeamId,\n    buildConfiguration = 'Release',\n  }: ProvisioningProfileSettings\n): void {\n  const project = getPbxproj(projectRoot);\n\n  const nativeTargetEntry = targetName\n    ? findNativeTargetByName(project, targetName)\n    : findFirstNativeTarget(project);\n  const [nativeTargetId, nativeTarget] = nativeTargetEntry;\n\n  const quotedAppleTeamId = ensureQuotes(appleTeamId);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList)\n    .filter(([, item]: ConfigurationSectionEntry) => trimQuotes(item.name) === buildConfiguration)\n    .forEach(([, item]: ConfigurationSectionEntry) => {\n      item.buildSettings.PROVISIONING_PROFILE_SPECIFIER = `\"${profileName}\"`;\n      item.buildSettings.DEVELOPMENT_TEAM = quotedAppleTeamId;\n      item.buildSettings.CODE_SIGN_IDENTITY = '\"iPhone Distribution\"';\n      item.buildSettings.CODE_SIGN_STYLE = 'Manual';\n    });\n\n  Object.entries(getProjectSection(project))\n    .filter(isNotComment)\n    .forEach(([, item]: ProjectSectionEntry) => {\n      if (!item.attributes.TargetAttributes[nativeTargetId]) {\n        item.attributes.TargetAttributes[nativeTargetId] = {};\n      }\n      item.attributes.TargetAttributes[nativeTargetId].DevelopmentTeam = quotedAppleTeamId;\n      item.attributes.TargetAttributes[nativeTargetId].ProvisioningStyle = 'Manual';\n    });\n\n  fs.writeFileSync(project.filepath, project.writeSync());\n}\n\nconst ensureQuotes = (value: string) => {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n"]},"metadata":{},"sourceType":"script"}