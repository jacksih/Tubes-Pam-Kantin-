{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBlockedPermissions = addBlockedPermissions;\nexports.addPermission = addPermission;\nexports.addPermissionToManifest = addPermissionToManifest;\nexports.ensurePermission = ensurePermission;\nexports.ensurePermissionNameFormat = ensurePermissionNameFormat;\nexports.ensurePermissions = ensurePermissions;\nexports.getAndroidPermissions = getAndroidPermissions;\nexports.getPermissions = getPermissions;\nexports.isPermissionAlreadyRequested = isPermissionAlreadyRequested;\nexports.removePermissions = removePermissions;\nexports.setAndroidPermissions = setAndroidPermissions;\nexports.withPermissions = exports.withInternalBlockedPermissions = exports.withBlockedPermissions = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n  _Manifest = function _Manifest() {\n    return data;\n  };\n  return data;\n}\nvar USES_PERMISSION = 'uses-permission';\nvar withPermissions = function withPermissions(config, permissions) {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = _toConsumableArray(new Set(config.android.permissions.concat(permissions)));\n  }\n  return (0, _androidPlugins().withAndroidManifest)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setAndroidPermissions(config, config.modResults);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withPermissions = withPermissions;\nvar withBlockedPermissions = function withBlockedPermissions(config, permissions) {\n  var _config$android;\n  var resolvedPermissions = prefixAndroidPermissionsIfNecessary((Array.isArray(permissions) ? permissions : [permissions]).filter(Boolean));\n  if (config !== null && config !== void 0 && (_config$android = config.android) !== null && _config$android !== void 0 && _config$android.permissions && Array.isArray(config.android.permissions)) {\n    config.android.permissions = prefixAndroidPermissionsIfNecessary(config.android.permissions).filter(function (permission) {\n      return !resolvedPermissions.includes(permission);\n    });\n  }\n  return (0, _androidPlugins().withAndroidManifest)(config, function () {\n    var _ref2 = _asyncToGenerator(function* (config) {\n      config.modResults = (0, _Manifest().ensureToolsAvailable)(config.modResults);\n      config.modResults = addBlockedPermissions(config.modResults, resolvedPermissions);\n      return config;\n    });\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n};\nexports.withBlockedPermissions = withBlockedPermissions;\nvar withInternalBlockedPermissions = function withInternalBlockedPermissions(config) {\n  var _config$android2, _config$android2$bloc;\n  if ((_config$android2 = config.android) !== null && _config$android2 !== void 0 && (_config$android2$bloc = _config$android2.blockedPermissions) !== null && _config$android2$bloc !== void 0 && _config$android2$bloc.length) {\n    return withBlockedPermissions(config, config.android.blockedPermissions);\n  }\n  return config;\n};\nexports.withInternalBlockedPermissions = withInternalBlockedPermissions;\nfunction addBlockedPermissions(androidManifest, permissions) {\n  if (!Array.isArray(androidManifest.manifest['uses-permission'])) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  for (var permission of prefixAndroidPermissionsIfNecessary(permissions)) {\n    androidManifest.manifest['uses-permission'] = ensureBlockedPermission(androidManifest.manifest['uses-permission'], permission);\n  }\n  return androidManifest;\n}\nfunction ensureBlockedPermission(manifestPermissions, permission) {\n  manifestPermissions = manifestPermissions.filter(function (e) {\n    return e.$['android:name'] !== permission;\n  });\n  manifestPermissions.push({\n    $: {\n      'android:name': permission,\n      'tools:node': 'remove'\n    }\n  });\n  return manifestPermissions;\n}\nfunction prefixAndroidPermissionsIfNecessary(permissions) {\n  return permissions.map(function (permission) {\n    if (!permission.includes('.')) {\n      return \"android.permission.\" + permission;\n    }\n    return permission;\n  });\n}\nfunction getAndroidPermissions(config) {\n  var _config$android$permi, _config$android3;\n  return (_config$android$permi = (_config$android3 = config.android) === null || _config$android3 === void 0 ? void 0 : _config$android3.permissions) !== null && _config$android$permi !== void 0 ? _config$android$permi : [];\n}\nfunction setAndroidPermissions(config, androidManifest) {\n  var _androidManifest$mani;\n  var permissions = getAndroidPermissions(config);\n  var providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n  var permissionsToAdd = _toConsumableArray(providedPermissions);\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  var manifestPermissions = (_androidManifest$mani = androidManifest.manifest['uses-permission']) !== null && _androidManifest$mani !== void 0 ? _androidManifest$mani : [];\n  permissionsToAdd.forEach(function (permission) {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n  return androidManifest;\n}\nfunction isPermissionAlreadyRequested(permission, manifestPermissions) {\n  return manifestPermissions.some(function (e) {\n    return e.$['android:name'] === permission;\n  });\n}\nfunction addPermissionToManifest(permission, manifestPermissions) {\n  manifestPermissions.push({\n    $: {\n      'android:name': permission\n    }\n  });\n  return manifestPermissions;\n}\nfunction removePermissions(androidManifest, permissionNames) {\n  var targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  var permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var nextPermissions = [];\n  for (var attribute of permissions) {\n    if (targetNames) {\n      var value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\nfunction addPermission(androidManifest, permissionName) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: {\n      'android:name': permissionName\n    }\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\nfunction ensurePermissions(androidManifest, permissionNames) {\n  var permissions = getPermissions(androidManifest);\n  var results = {};\n  for (var permissionName of permissionNames) {\n    var targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\nfunction ensurePermission(androidManifest, permissionName) {\n  var permissions = getPermissions(androidManifest);\n  var targetName = ensurePermissionNameFormat(permissionName);\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\nfunction ensurePermissionNameFormat(permissionName) {\n  if (permissionName.includes('.')) {\n    var com = permissionName.split('.');\n    var name = com.pop();\n    return [].concat(_toConsumableArray(com), [name.toUpperCase()]).join('.');\n  } else {\n    return ensurePermissionNameFormat(\"android.permission.\" + permissionName);\n  }\n}\nfunction getPermissions(androidManifest) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var permissions = usesPermissions.map(function (permissionObject) {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}","map":{"version":3,"sources":["../../src/android/Permissions.ts"],"names":["USES_PERMISSION","withPermissions","config","permissions","Array","isArray","filter","Boolean","android","Set","concat","modResults","setAndroidPermissions","withBlockedPermissions","resolvedPermissions","prefixAndroidPermissionsIfNecessary","permission","includes","addBlockedPermissions","withInternalBlockedPermissions","blockedPermissions","length","androidManifest","manifest","ensureBlockedPermission","manifestPermissions","e","$","push","map","getAndroidPermissions","providedPermissions","permissionsToAdd","hasOwnProperty","forEach","isPermissionAlreadyRequested","addPermissionToManifest","some","removePermissions","permissionNames","targetNames","ensurePermissionNameFormat","nextPermissions","attribute","value","name","addPermission","permissionName","usesPermissions","ensurePermissions","getPermissions","results","targetName","ensurePermission","com","split","pop","toUpperCase","join","permissionObject"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { AndroidManifest, ensureToolsAvailable, ManifestUsesPermission } from './Manifest';\n\nconst USES_PERMISSION = 'uses-permission';\n\nexport const withPermissions: ConfigPlugin<string[] | void> = (config, permissions) => {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = [\n      // @ts-ignore\n      ...new Set(config.android.permissions.concat(permissions)),\n    ];\n  }\n  return withAndroidManifest(config, async (config) => {\n    config.modResults = await setAndroidPermissions(config, config.modResults);\n    return config;\n  });\n};\n\n/** Given a permission or list of permissions, block permissions in the final `AndroidManifest.xml` to ensure no installed library or plugin can add them. */\nexport const withBlockedPermissions: ConfigPlugin<string[] | string> = (config, permissions) => {\n  const resolvedPermissions = prefixAndroidPermissionsIfNecessary(\n    (Array.isArray(permissions) ? permissions : [permissions]).filter(Boolean)\n  );\n\n  if (config?.android?.permissions && Array.isArray(config.android.permissions)) {\n    // Remove any static config permissions\n    config.android.permissions = prefixAndroidPermissionsIfNecessary(\n      config.android.permissions\n    ).filter((permission) => !resolvedPermissions.includes(permission));\n  }\n\n  return withAndroidManifest(config, async (config) => {\n    config.modResults = ensureToolsAvailable(config.modResults);\n    config.modResults = addBlockedPermissions(config.modResults, resolvedPermissions);\n    return config;\n  });\n};\n\nexport const withInternalBlockedPermissions: ConfigPlugin = (config) => {\n  // Only add permissions if the user defined the property and added some values\n  // this ensures we don't add the `tools:*` namespace extraneously.\n  if (config.android?.blockedPermissions?.length) {\n    return withBlockedPermissions(config, config.android.blockedPermissions);\n  }\n\n  return config;\n};\n\nexport function addBlockedPermissions(androidManifest: AndroidManifest, permissions: string[]) {\n  if (!Array.isArray(androidManifest.manifest['uses-permission'])) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n\n  for (const permission of prefixAndroidPermissionsIfNecessary(permissions)) {\n    androidManifest.manifest['uses-permission'] = ensureBlockedPermission(\n      androidManifest.manifest['uses-permission'],\n      permission\n    );\n  }\n\n  return androidManifest;\n}\n\n/**\n * Filter any existing permissions matching the provided permission name, then add a\n * restricted permission to overwrite any extra permissions that may be added in a\n * third-party package's AndroidManifest.xml.\n *\n * @param manifestPermissions manifest `uses-permissions` array.\n * @param permission `android:name` of the permission to restrict\n * @returns\n */\nfunction ensureBlockedPermission(\n  manifestPermissions: ManifestUsesPermission[],\n  permission: string\n) {\n  // Remove permission if it currently exists\n  manifestPermissions = manifestPermissions.filter((e) => e.$['android:name'] !== permission);\n\n  // Add a permission with tools:node to overwrite any existing permission and ensure it's removed upon building.\n  manifestPermissions.push({\n    $: { 'android:name': permission, 'tools:node': 'remove' },\n  });\n  return manifestPermissions;\n}\n\nfunction prefixAndroidPermissionsIfNecessary(permissions: string[]): string[] {\n  return permissions.map((permission) => {\n    if (!permission.includes('.')) {\n      return `android.permission.${permission}`;\n    }\n    return permission;\n  });\n}\n\nexport function getAndroidPermissions(config: Pick<ExpoConfig, 'android'>): string[] {\n  return config.android?.permissions ?? [];\n}\n\nexport function setAndroidPermissions(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const permissions = getAndroidPermissions(config);\n  const providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n  const permissionsToAdd = [...providedPermissions];\n\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  // manifest.manifest['uses-permission'] = [];\n\n  const manifestPermissions = androidManifest.manifest['uses-permission'] ?? [];\n\n  permissionsToAdd.forEach((permission) => {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n\n  return androidManifest;\n}\n\nexport function isPermissionAlreadyRequested(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n): boolean {\n  return manifestPermissions.some((e) => e.$['android:name'] === permission);\n}\n\nexport function addPermissionToManifest(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n) {\n  manifestPermissions.push({ $: { 'android:name': permission } });\n  return manifestPermissions;\n}\n\nexport function removePermissions(androidManifest: AndroidManifest, permissionNames?: string[]) {\n  const targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  const permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  const nextPermissions = [];\n  for (const attribute of permissions) {\n    if (targetNames) {\n      // @ts-ignore: name isn't part of the type\n      const value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\n\nexport function addPermission(androidManifest: AndroidManifest, permissionName: string): void {\n  const usesPermissions: ManifestUsesPermission[] = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: { 'android:name': permissionName },\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\n\nexport function ensurePermissions(\n  androidManifest: AndroidManifest,\n  permissionNames: string[]\n): { [permission: string]: boolean } {\n  const permissions = getPermissions(androidManifest);\n\n  const results: { [permission: string]: boolean } = {};\n  for (const permissionName of permissionNames) {\n    const targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\n\nexport function ensurePermission(\n  androidManifest: AndroidManifest,\n  permissionName: string\n): boolean {\n  const permissions = getPermissions(androidManifest);\n  const targetName = ensurePermissionNameFormat(permissionName);\n\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\n\nexport function ensurePermissionNameFormat(permissionName: string): string {\n  if (permissionName.includes('.')) {\n    const com = permissionName.split('.');\n    const name = com.pop() as string;\n    return [...com, name.toUpperCase()].join('.');\n  } else {\n    // If shorthand form like `WRITE_CONTACTS` is provided, expand it to `android.permission.WRITE_CONTACTS`.\n    return ensurePermissionNameFormat(`android.permission.${permissionName}`);\n  }\n}\n\nexport function getPermissions(androidManifest: AndroidManifest): string[] {\n  const usesPermissions: { [key: string]: any }[] = androidManifest.manifest[USES_PERMISSION] || [];\n  const permissions = usesPermissions.map((permissionObject) => {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}\n"]},"metadata":{},"sourceType":"script"}