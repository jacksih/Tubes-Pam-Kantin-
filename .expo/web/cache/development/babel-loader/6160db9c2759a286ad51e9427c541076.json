{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExpoSDKVersion = getExpoSDKVersion;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _Errors() {\n  var data = require(\"./Errors\");\n  _Errors = function _Errors() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getExpoSDKVersion(projectRoot, exp) {\n  if (exp !== null && exp !== void 0 && exp.sdkVersion) {\n    return exp.sdkVersion;\n  }\n  var packageJsonPath = _resolveFrom().default.silent(projectRoot, 'expo/package.json');\n  if (packageJsonPath) {\n    var expoPackageJson = _jsonFile().default.read(packageJsonPath, {\n      json5: true\n    });\n    var packageVersion = expoPackageJson.version;\n    if (typeof packageVersion === 'string') {\n      var majorVersion = packageVersion.split('.').shift();\n      return majorVersion + \".0.0\";\n    }\n  }\n  throw new (_Errors().ConfigError)(\"Cannot determine which native SDK version your project uses because the module `expo` is not installed. Please install it with `yarn add expo` and try again.\", 'MODULE_NOT_FOUND');\n}","map":{"version":3,"sources":["../src/Project.ts"],"names":["getExpoSDKVersion","projectRoot","exp","sdkVersion","packageJsonPath","resolveFrom","silent","expoPackageJson","read","json5","version","packageVersion","majorVersion","split","shift","ConfigError"],"mappings":";;;;;;AAAA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,YAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;EAAA,YAAA,GAAA,wBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAGA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,UAAA,CAAA;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAEO,SAASA,iBAAT,CACLC,WADK,EAELC,GAFK,EAGG;EACR,IAAIA,GAAJ,KAAA,IAAA,IAAIA,GAAJ,KAAA,KAAA,CAAA,IAAIA,GAAG,CAAEC,UAAT,EAAqB;IACnB,OAAOD,GAAG,CAACC,UAAX;EACD;EACD,IAAMC,eAAe,GAAGC,YAAAA,EAAAA,CAAAA,OAAAA,CAAYC,MAAZD,CAAmBJ,WAAnBI,EAAgC,mBAAhCA,CAAxB;EACA,IAAID,eAAJ,EAAqB;IACnB,IAAMG,eAAe,GAAG,SAAA,EAAA,CAAA,OAAA,CAASC,IAAT,CAAcJ,eAAd,EAA+B;MAAEK,KAAK,EAAE;IAAT,CAA/B,CAAxB;IACA,IAAiBE,cAAAA,GAAmBJ,eAApC,CAAQG,OAAO;IACf,IAAI,OAAOC,cAAP,KAA0B,QAA9B,EAAwC;MACtC,IAAMC,YAAY,GAAGD,cAAc,CAACE,KAAfF,CAAqB,GAArBA,CAAAA,CAA0BG,KAA1BH,EAArB;MACA,OAAUC,YAAV;IACD;EACF;EACD,MAAM,KAAIG,OAAAA,EAAAA,CAAAA,WAAJ,mKAEJ,kBAFI,CAAN;AAID","sourcesContent":["import JsonFile from '@expo/json-file';\nimport resolveFrom from 'resolve-from';\n\nimport { ExpoConfig } from './Config.types';\nimport { ConfigError } from './Errors';\n\nexport function getExpoSDKVersion(\n  projectRoot: string,\n  exp: Pick<ExpoConfig, 'sdkVersion'>\n): string {\n  if (exp?.sdkVersion) {\n    return exp.sdkVersion;\n  }\n  const packageJsonPath = resolveFrom.silent(projectRoot, 'expo/package.json');\n  if (packageJsonPath) {\n    const expoPackageJson = JsonFile.read(packageJsonPath, { json5: true });\n    const { version: packageVersion } = expoPackageJson;\n    if (typeof packageVersion === 'string') {\n      const majorVersion = packageVersion.split('.').shift();\n      return `${majorVersion}.0.0`;\n    }\n  }\n  throw new ConfigError(\n    `Cannot determine which native SDK version your project uses because the module \\`expo\\` is not installed. Please install it with \\`yarn add expo\\` and try again.`,\n    'MODULE_NOT_FOUND'\n  );\n}\n"]},"metadata":{},"sourceType":"script"}