{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"providers\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIosModFileProviders = getIosModFileProviders;\nexports.withIosBaseMods = withIosBaseMods;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n  _plist = function _plist() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireWildcard(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n  _xcode = function _xcode() {\n    return data;\n  };\n  return data;\n}\nfunction _ios() {\n  var data = require(\"../ios\");\n  _ios = function _ios() {\n    return data;\n  };\n  return data;\n}\nfunction _Entitlements() {\n  var data = require(\"../ios/Entitlements\");\n  _Entitlements = function _Entitlements() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"../ios/utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _getInfoPlistPath() {\n  var data = require(\"../ios/utils/getInfoPlistPath\");\n  _getInfoPlistPath = function _getInfoPlistPath() {\n    return data;\n  };\n  return data;\n}\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n  _modules = function _modules() {\n    return data;\n  };\n  return data;\n}\nfunction _sortObject() {\n  var data = require(\"../utils/sortObject\");\n  _sortObject = function _sortObject() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _fs$promises = _fs().promises,\n  readFile = _fs$promises.readFile,\n  writeFile = _fs$promises.writeFile;\nfunction getEntitlementsPlistTemplate() {\n  return {};\n}\nfunction getInfoPlistTemplate() {\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true\n        }\n      }\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault'\n  };\n}\nvar defaultProviders = {\n  dangerous: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath() {\n      return '';\n    },\n    read: function () {\n      var _read = _asyncToGenerator(function* () {\n        return {};\n      });\n      function read() {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write = _asyncToGenerator(function* () {});\n      function write() {\n        return _write.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  appDelegate: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref) {\n      var projectRoot = _ref.modRequest.projectRoot;\n      return _ios().Paths.getAppDelegateFilePath(projectRoot);\n    },\n    read: function () {\n      var _read2 = _asyncToGenerator(function* (filePath) {\n        return _ios().Paths.getFileInfo(filePath);\n      });\n      function read(_x) {\n        return _read2.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write2 = _asyncToGenerator(function* (filePath, _ref2) {\n        var contents = _ref2.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x2, _x3) {\n        return _write2.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  expoPlist: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref3) {\n      var _ref3$modRequest = _ref3.modRequest,\n        platformProjectRoot = _ref3$modRequest.platformProjectRoot,\n        projectName = _ref3$modRequest.projectName;\n      var supportingDirectory = _path().default.join(platformProjectRoot, projectName, 'Supporting');\n      return _path().default.resolve(supportingDirectory, 'Expo.plist');\n    },\n    read: function () {\n      var _read3 = _asyncToGenerator(function* (filePath, _ref4) {\n        var introspect = _ref4.modRequest.introspect;\n        try {\n          return _plist().default.parse(yield readFile(filePath, 'utf8'));\n        } catch (error) {\n          if (introspect) {\n            return {};\n          }\n          throw error;\n        }\n      });\n      function read(_x4, _x5) {\n        return _read3.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write3 = _asyncToGenerator(function* (filePath, _ref5) {\n        var modResults = _ref5.modResults,\n          introspect = _ref5.modRequest.introspect;\n        if (introspect) {\n          return;\n        }\n        yield writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(modResults)));\n      });\n      function write(_x6, _x7) {\n        return _write3.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  xcodeproj: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref6) {\n      var projectRoot = _ref6.modRequest.projectRoot;\n      return _ios().Paths.getPBXProjectPath(projectRoot);\n    },\n    read: function () {\n      var _read4 = _asyncToGenerator(function* (filePath) {\n        var project = _xcode().default.project(filePath);\n        project.parseSync();\n        return project;\n      });\n      function read(_x8) {\n        return _read4.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write4 = _asyncToGenerator(function* (filePath, _ref7) {\n        var modResults = _ref7.modResults;\n        yield writeFile(filePath, modResults.writeSync());\n      });\n      function write(_x9, _x10) {\n        return _write4.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  infoPlist: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath = _asyncToGenerator(function* (config) {\n        var project = null;\n        try {\n          project = (0, _Xcodeproj().getPbxproj)(config.modRequest.projectRoot);\n        } catch (_unused) {}\n        if (project) {\n          var infoPlistBuildProperty = (0, _getInfoPlistPath().getInfoPlistPathFromPbxproj)(project);\n          if (infoPlistBuildProperty) {\n            var infoPlistPath = _path().default.join(config.modRequest.platformProjectRoot, infoPlistBuildProperty);\n            if ((0, _modules().fileExists)(infoPlistPath)) {\n              return infoPlistPath;\n            }\n            (0, _warnings().addWarningIOS)('mods.ios.infoPlist', \"Info.plist file linked to Xcode project does not exist: \" + infoPlistPath);\n          } else {\n            (0, _warnings().addWarningIOS)('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n          }\n        }\n        try {\n          return yield _ios().Paths.getInfoPlistPath(config.modRequest.projectRoot);\n        } catch (error) {\n          if (config.modRequest.introspect) {\n            return '';\n          }\n          throw error;\n        }\n      });\n      function getFilePath(_x11) {\n        return _getFilePath.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read5 = _asyncToGenerator(function* (filePath, config) {\n        if (!config.ios) config.ios = {};\n        if (!config.ios.infoPlist) config.ios.infoPlist = {};\n        var modResults;\n        try {\n          var contents = yield readFile(filePath, 'utf8');\n          (0, _assert().default)(contents, 'Info.plist is empty');\n          modResults = _plist().default.parse(contents);\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n          modResults = getInfoPlistTemplate();\n        }\n        config.ios.infoPlist = Object.assign({}, modResults || {}, config.ios.infoPlist);\n        return config.ios.infoPlist;\n      });\n      function read(_x12, _x13) {\n        return _read5.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write5 = _asyncToGenerator(function* (filePath, config) {\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.infoPlist = config.modResults;\n        if (config.modRequest.introspect) {\n          return;\n        }\n        yield writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(config.modResults)));\n      });\n      function write(_x14, _x15) {\n        return _write5.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  entitlements: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath2 = _asyncToGenerator(function* (config) {\n        try {\n          var _Entitlements$getEnti;\n          (0, _Entitlements().ensureApplicationTargetEntitlementsFileConfigured)(config.modRequest.projectRoot);\n          return (_Entitlements$getEnti = _ios().Entitlements.getEntitlementsPath(config.modRequest.projectRoot)) !== null && _Entitlements$getEnti !== void 0 ? _Entitlements$getEnti : '';\n        } catch (error) {\n          if (config.modRequest.introspect) {\n            return '';\n          }\n          throw error;\n        }\n      });\n      function getFilePath(_x16) {\n        return _getFilePath2.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read6 = _asyncToGenerator(function* (filePath, config) {\n        var modResults;\n        try {\n          if (_fs().default.existsSync(filePath)) {\n            var contents = yield readFile(filePath, 'utf8');\n            (0, _assert().default)(contents, 'Entitlements plist is empty');\n            modResults = _plist().default.parse(contents);\n          } else {\n            modResults = getEntitlementsPlistTemplate();\n          }\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n          modResults = getEntitlementsPlistTemplate();\n        }\n        if (!config.ios) config.ios = {};\n        if (!config.ios.entitlements) config.ios.entitlements = {};\n        config.ios.entitlements = Object.assign({}, modResults || {}, config.ios.entitlements);\n        return config.ios.entitlements;\n      });\n      function read(_x17, _x18) {\n        return _read6.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write6 = _asyncToGenerator(function* (filePath, config) {\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.entitlements = config.modResults;\n        if (config.modRequest.introspect) {\n          return;\n        }\n        yield writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(config.modResults)));\n      });\n      function write(_x19, _x20) {\n        return _write6.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  podfileProperties: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref8) {\n      var platformProjectRoot = _ref8.modRequest.platformProjectRoot;\n      return _path().default.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    read: function () {\n      var _read7 = _asyncToGenerator(function* (filePath) {\n        var results = {};\n        try {\n          results = yield _jsonFile().default.readAsync(filePath);\n        } catch (_unused2) {}\n        return results;\n      });\n      function read(_x21) {\n        return _read7.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write7 = _asyncToGenerator(function* (filePath, _ref9) {\n        var modResults = _ref9.modResults,\n          introspect = _ref9.modRequest.introspect;\n        if (introspect) {\n          return;\n        }\n        yield _jsonFile().default.writeAsync(filePath, modResults);\n      });\n      function write(_x22, _x23) {\n        return _write7.apply(this, arguments);\n      }\n      return write;\n    }()\n  })\n};\nfunction withIosBaseMods(config) {\n  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    providers = _ref10.providers,\n    props = _objectWithoutProperties(_ref10, _excluded);\n  return (0, _createBaseMod().withGeneratedBaseMods)(config, Object.assign({}, props, {\n    platform: 'ios',\n    providers: providers !== null && providers !== void 0 ? providers : getIosModFileProviders()\n  }));\n}\nfunction getIosModFileProviders() {\n  return defaultProviders;\n}","map":{"version":3,"sources":["../../src/plugins/withIosBaseMods.ts"],"names":["readFile","writeFile","promises","getEntitlementsPlistTemplate","getInfoPlistTemplate","CFBundleDevelopmentRegion","CFBundleExecutable","CFBundleIdentifier","CFBundleName","CFBundlePackageType","CFBundleInfoDictionaryVersion","CFBundleSignature","LSRequiresIPhoneOS","NSAppTransportSecurity","NSAllowsArbitraryLoads","NSExceptionDomains","localhost","NSExceptionAllowsInsecureHTTPLoads","UILaunchStoryboardName","UIRequiredDeviceCapabilities","UIViewControllerBasedStatusBarAppearance","UIStatusBarStyle","defaultProviders","dangerous","getFilePath","read","write","appDelegate","modRequest","projectRoot","Paths","getAppDelegateFilePath","filePath","getFileInfo","modResults","contents","expoPlist","isIntrospective","platformProjectRoot","projectName","supportingDirectory","path","join","resolve","introspect","plist","parse","error","build","xcodeproj","getPBXProjectPath","project","xcode","parseSync","writeSync","infoPlist","config","infoPlistBuildProperty","infoPlistPath","getInfoPlistPath","ios","entitlements","Entitlements","getEntitlementsPath","fs","existsSync","podfileProperties","results","JsonFile","readAsync","writeAsync","withIosBaseMods","providers","props","platform","getIosModFileProviders"],"mappings":"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","sourcesContent":["import JsonFile, { JSONObject, JSONValue } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs, { promises } from 'fs';\nimport path from 'path';\nimport xcode, { XcodeProject } from 'xcode';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Entitlements, Paths } from '../ios';\nimport { ensureApplicationTargetEntitlementsFileConfigured } from '../ios/Entitlements';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { getPbxproj } from '../ios/utils/Xcodeproj';\nimport { getInfoPlistPathFromPbxproj } from '../ios/utils/getInfoPlistPath';\nimport { fileExists } from '../utils/modules';\nimport { sortObject } from '../utils/sortObject';\nimport { addWarningIOS } from '../utils/warnings';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype IosModName = keyof Required<ModConfig>['ios'];\n\nfunction getEntitlementsPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {};\n}\n\nfunction getInfoPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true,\n        },\n      },\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault',\n  };\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return {};\n    },\n    async write() {},\n  }),\n  // Append a rule to supply AppDelegate data to mods on `mods.ios.appDelegate`\n  appDelegate: provider<Paths.AppDelegateProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      // TODO: Get application AppDelegate file from pbxproj.\n      return Paths.getAppDelegateFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath: string, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  expoPlist: provider<JSONObject>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot, projectName } }) {\n      const supportingDirectory = path.join(platformProjectRoot, projectName!, 'Supporting');\n      return path.resolve(supportingDirectory, 'Expo.plist');\n    },\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return plist.parse(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (introspect) {\n          return {};\n        }\n        throw error;\n      }\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await writeFile(filePath, plist.build(sortObject(modResults)));\n    },\n  }),\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  xcodeproj: provider<XcodeProject>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getPBXProjectPath(projectRoot);\n    },\n    async read(filePath) {\n      const project = xcode.project(filePath);\n      project.parseSync();\n      return project;\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, modResults.writeSync());\n    },\n  }),\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  infoPlist: provider<InfoPlist, ForwardedBaseModOptions>({\n    isIntrospective: true,\n    async getFilePath(config) {\n      let project: xcode.XcodeProject | null = null;\n      try {\n        project = getPbxproj(config.modRequest.projectRoot);\n      } catch {\n        // noop\n      }\n\n      // Only check / warn if a project actually exists, this'll provide\n      // more accurate warning messages for users in managed projects.\n      if (project) {\n        const infoPlistBuildProperty = getInfoPlistPathFromPbxproj(project);\n\n        if (infoPlistBuildProperty) {\n          //: [root]/myapp/ios/MyApp/Info.plist\n          const infoPlistPath = path.join(\n            //: myapp/ios\n            config.modRequest.platformProjectRoot,\n            //: MyApp/Info.plist\n            infoPlistBuildProperty\n          );\n          if (fileExists(infoPlistPath)) {\n            return infoPlistPath;\n          }\n          addWarningIOS(\n            'mods.ios.infoPlist',\n            `Info.plist file linked to Xcode project does not exist: ${infoPlistPath}`\n          );\n        } else {\n          addWarningIOS('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n        }\n      }\n      try {\n        // Fallback on glob...\n        return await Paths.getInfoPlistPath(config.modRequest.projectRoot);\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n    async read(filePath, config) {\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.infoPlist) config.ios.infoPlist = {};\n\n      let modResults: InfoPlist;\n      try {\n        const contents = await readFile(filePath, 'utf8');\n        assert(contents, 'Info.plist is empty');\n        modResults = plist.parse(contents) as InfoPlist;\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the infoPlist object from the Expo config.\n        modResults = getInfoPlistTemplate();\n      }\n\n      config.ios.infoPlist = {\n        ...(modResults || {}),\n        ...config.ios.infoPlist,\n      };\n\n      return config.ios.infoPlist!;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static infoPlist object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  entitlements: provider<JSONObject, ForwardedBaseModOptions>({\n    isIntrospective: true,\n\n    async getFilePath(config) {\n      try {\n        ensureApplicationTargetEntitlementsFileConfigured(config.modRequest.projectRoot);\n        return Entitlements.getEntitlementsPath(config.modRequest.projectRoot) ?? '';\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n\n    async read(filePath, config) {\n      let modResults: JSONObject;\n      try {\n        if (fs.existsSync(filePath)) {\n          const contents = await readFile(filePath, 'utf8');\n          assert(contents, 'Entitlements plist is empty');\n          modResults = plist.parse(contents);\n        } else {\n          modResults = getEntitlementsPlistTemplate();\n        }\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the template file.\n        modResults = getEntitlementsPlistTemplate();\n      }\n\n      // Apply all of the .entitlements values to the expo.ios.entitlements object\n      // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.entitlements) config.ios.entitlements = {};\n\n      config.ios.entitlements = {\n        ...(modResults || {}),\n        ...config.ios.entitlements,\n      };\n\n      return config.ios.entitlements!;\n    },\n\n    async write(filePath, config) {\n      // Update the contents of the static entitlements object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n\n  // Append a rule to supply Podfile.properties.json data to mods on `mods.ios.podfileProperties`\n  podfileProperties: provider<Record<string, JSONValue>>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    async read(filePath) {\n      let results: Record<string, JSONValue> = {};\n      try {\n        results = await JsonFile.readAsync(filePath);\n      } catch {}\n      return results;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await JsonFile.writeAsync(filePath, modResults);\n    },\n  }),\n};\n\ntype IosDefaultProviders = typeof defaultProviders;\n\nexport function withIosBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<IosDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<IosModName>(config, {\n    ...props,\n    platform: 'ios',\n    providers: providers ?? getIosModFileProviders(),\n  });\n}\n\nexport function getIosModFileProviders() {\n  return defaultProviders;\n}\n"]},"metadata":{},"sourceType":"script"}