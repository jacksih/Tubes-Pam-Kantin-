{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _native = require(\"@react-navigation/native\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NativeStackView = _interopRequireDefault(require(\"../views/NativeStackView\"));\nvar _excluded = [\"id\", \"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction NativeStackNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  React.useEffect(function () {\n    var _navigation$addListen;\n    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(Object.assign({}, _native.StackActions.popToTop(), {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NavigationContent, null, React.createElement(_NativeStackView.default, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\nvar _default = (0, _native.createNavigatorFactory)(NativeStackNavigator);\nexports.default = _default;","map":{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["NativeStackNavigator","id","initialRouteName","children","screenListeners","screenOptions","rest","state","descriptors","navigation","NavigationContent","useNavigationBuilder","StackRouter","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key","createNavigatorFactory"],"mappings":";;;;;;AAAA;AAWA;AAOA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAEA,SAASA,oBAAT,CAAA,IAAA,EAO8B;EAPA,IAC5BC,EAD4B,GAOA,IAAA,CAN5BA,EAD4B;IAE5BC,gBAF4B,GAOA,IAAA,CAL5BA,gBAF4B;IAG5BC,QAH4B,GAOA,IAAA,CAJ5BA,QAH4B;IAI5BC,eAJ4B,GAOA,IAAA,CAH5BA,eAJ4B;IAK5BC,aAL4B,GAOA,IAAA,CAF5BA,aAL4B;IAMzBC,IAAAA,0CACyB,IAAA;EAC5B,4BACEK,IAAAA,4BAAoB,EAMlBC,mBANkB,EAML;MACbX,EADa,EACbA,EADa;MAEbC,gBAFa,EAEbA,gBAFa;MAGbC,QAHa,EAGbA,QAHa;MAIbC,eAJa,EAIbA,eAJa;MAKbC,aAAAA,EAAAA;IALa,CANK,CADtB;IAAQE,KAAF,yBAAEA,KAAF;IAASC,WAAT,yBAASA,WAAT;IAAsBC,UAAtB,yBAAsBA,UAAtB;IAAkCC,iBAAAA,yBAAAA,iBAAAA;EAexCG,KAAK,CAACC,SAAND,CACE,YAAA;IAAA,IAAA,qBAAA;IAAA,OAEEJ,UAFF,KAAA,IAAA,IAEEA,UAFF,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAEEA,UAAU,CAAEM,WAFd,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAEEN,qBAAAA,CAAAA,IAAAA,CAAAA,UAAU,EAAgB,UAAhB,EAA6BO,UAAAA,CAAD,EAAY;MAChD,IAAMC,SAAS,GAAGR,UAAU,CAACQ,SAAXR,EAD8B;MAKhDS,qBAAqB,CAAC,YAAM;QAC1B,IACEX,KAAK,CAACY,KAANZ,GAAc,CAAdA,IACAU,SADAV,IAEA,CAAES,CAAD,CAAkCI,gBAHrC,EAIE;UAGAX,UAAU,CAACY,QAAXZ,mBACKa,oBAAY,CAACC,QAAbD,EADe;YAElBE,MAAM,EAAEjB,KAAK,CAACkB;UAAAA,GAFhBhB;QAID;MACF,CAboB,CAArBS;IAcD,CAnBS,CAAA;EAFZ,CADFL,EAuBE,CAACJ,UAAD,EAAaF,KAAK,CAACY,KAAnB,EAA0BZ,KAAK,CAACkB,GAAhC,CAvBFZ,CAAAA;EA0BA,OACE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,wBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMP,IADN,EAAA;IAEE,KAAK,EAAEC,KAFT;IAGE,UAAU,EAAEE,UAHd;IAIE,WAAW,EAAED;EAJf,CAAA,CAAA,CADF,CADF;AAUD;AAAA,eAEckB,IAAAA,8BAAsB,EAKnC1B,oBALmC,CAArC;AAAA","sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  id,\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      NativeStackNavigationOptions,\n      NativeStackNavigationEventMap\n    >(StackRouter, {\n      id,\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"script"}