{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"mods\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compileModsAsync = compileModsAsync;\nexports.evalModsAsync = evalModsAsync;\nexports.withDefaultBaseMods = withDefaultBaseMods;\nexports.withIntrospectionBaseMods = withIntrospectionBaseMods;\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"../ios/utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction Warnings() {\n  var data = _interopRequireWildcard(require(\"../utils/warnings\"));\n  Warnings = function Warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n  return data;\n}\nfunction _withAndroidBaseMods() {\n  var data = require(\"./withAndroidBaseMods\");\n  _withAndroidBaseMods = function _withAndroidBaseMods() {\n    return data;\n  };\n  return data;\n}\nfunction _withIosBaseMods() {\n  var data = require(\"./withIosBaseMods\");\n  _withIosBaseMods = function _withIosBaseMods() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:config-plugins:mod-compiler');\nfunction withDefaultBaseMods(config) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = (0, _withIosBaseMods().withIosBaseMods)(config, props);\n  config = (0, _withAndroidBaseMods().withAndroidBaseMods)(config, props);\n  return config;\n}\nfunction withIntrospectionBaseMods(config) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = (0, _withIosBaseMods().withIosBaseMods)(config, Object.assign({\n    saveToInternal: true,\n    skipEmptyMod: false\n  }, props));\n  config = (0, _withAndroidBaseMods().withAndroidBaseMods)(config, Object.assign({\n    saveToInternal: true,\n    skipEmptyMod: false\n  }, props));\n  if (config.mods) {\n    for (var platform of Object.keys(config.mods)) {\n      for (var key of Object.keys(config.mods[platform] || {})) {\n        var _config$mods$platform, _config$mods$platform2;\n        if (!((_config$mods$platform = config.mods[platform]) !== null && _config$mods$platform !== void 0 && (_config$mods$platform2 = _config$mods$platform[key]) !== null && _config$mods$platform2 !== void 0 && _config$mods$platform2.isIntrospective)) {\n          var _config$mods$platform3;\n          debug(\"removing non-idempotent mod: \" + platform + \".\" + key);\n          (_config$mods$platform3 = config.mods[platform]) === null || _config$mods$platform3 === void 0 ? true : delete _config$mods$platform3[key];\n        }\n      }\n    }\n  }\n  return config;\n}\nfunction compileModsAsync(_x, _x2) {\n  return _compileModsAsync.apply(this, arguments);\n}\nfunction _compileModsAsync() {\n  _compileModsAsync = _asyncToGenerator(function* (config, props) {\n    if (props.introspect === true) {\n      config = withIntrospectionBaseMods(config);\n    } else {\n      config = withDefaultBaseMods(config);\n    }\n    return yield evalModsAsync(config, props);\n  });\n  return _compileModsAsync.apply(this, arguments);\n}\nfunction sortMods(commands, order) {\n  var allKeys = commands.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n      key = _ref2[0];\n    return key;\n  });\n  var completeOrder = _toConsumableArray(new Set([].concat(_toConsumableArray(order), _toConsumableArray(allKeys))));\n  var sorted = [];\n  var _loop = function _loop() {\n    var group = completeOrder.shift();\n    var commandSet = commands.find(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n        key = _ref4[0];\n      return key === group;\n    });\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  };\n  while (completeOrder.length) {\n    _loop();\n  }\n  return sorted;\n}\nfunction getRawClone(_ref5) {\n  var mods = _ref5.mods,\n    config = _objectWithoutProperties(_ref5, _excluded);\n  return Object.freeze(JSON.parse(JSON.stringify(config)));\n}\nvar orders = {\n  ios: ['dangerous', 'xcodeproj'],\n  android: ['dangerous']\n};\nfunction evalModsAsync(_x3, _x4) {\n  return _evalModsAsync.apply(this, arguments);\n}\nfunction _evalModsAsync() {\n  _evalModsAsync = _asyncToGenerator(function* (config, _ref6) {\n    var projectRoot = _ref6.projectRoot,\n      introspect = _ref6.introspect,\n      platforms = _ref6.platforms,\n      assertMissingModProviders = _ref6.assertMissingModProviders;\n    var modRawConfig = getRawClone(config);\n    for (var _ref7 of Object.entries((_config$mods = config.mods) !== null && _config$mods !== void 0 ? _config$mods : {})) {\n      var _ref8 = _slicedToArray(_ref7, 2);\n      var platformName = _ref8[0];\n      var platform = _ref8[1];\n      var _config$mods;\n      if (platforms && !platforms.includes(platformName)) {\n        debug(\"skip platform: \" + platformName);\n        continue;\n      }\n      var entries = Object.entries(platform);\n      if (entries.length) {\n        entries = sortMods(entries, orders[platformName]);\n        debug(\"run in order: \" + entries.map(function (_ref9) {\n          var _ref10 = _slicedToArray(_ref9, 1),\n            name = _ref10[0];\n          return name;\n        }).join(', '));\n        var platformProjectRoot = _path().default.join(projectRoot, platformName);\n        var projectName = platformName === 'ios' ? (0, _Xcodeproj().getHackyProjectName)(projectRoot, config) : undefined;\n        for (var _ref11 of entries) {\n          var _ref12 = _slicedToArray(_ref11, 2);\n          var modName = _ref12[0];\n          var mod = _ref12[1];\n          var modRequest = {\n            projectRoot: projectRoot,\n            projectName: projectName,\n            platformProjectRoot: platformProjectRoot,\n            platform: platformName,\n            modName: modName,\n            introspect: !!introspect\n          };\n          if (!mod.isProvider) {\n            var errorMessage = \"Initial base modifier for \\\"\" + platformName + \".\" + modName + \"\\\" is not a provider and therefore will not provide modResults to child mods\";\n            if (assertMissingModProviders !== false) {\n              throw new (_errors().PluginError)(errorMessage, 'MISSING_PROVIDER');\n            } else {\n              Warnings().addWarningForPlatform(platformName, platformName + \".\" + modName, \"Skipping: Initial base modifier for \\\"\" + platformName + \".\" + modName + \"\\\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.\");\n              continue;\n            }\n          }\n          var results = yield mod(Object.assign({}, config, {\n            modResults: null,\n            modRequest: modRequest,\n            modRawConfig: modRawConfig\n          }));\n          config = (0, _createBaseMod().assertModResults)(results, platformName, modName);\n          delete config.modResults;\n          delete config.modRequest;\n          delete config.modRawConfig;\n        }\n      }\n    }\n    return config;\n  });\n  return _evalModsAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/plugins/mod-compiler.ts"],"names":["debug","withDefaultBaseMods","config","props","withIntrospectionBaseMods","saveToInternal","skipEmptyMod","mods","platform","Object","keys","key","isIntrospective","compileModsAsync","introspect","evalModsAsync","sortMods","commands","order","allKeys","map","completeOrder","Set","sorted","length","group","shift","commandSet","find","push","getRawClone","freeze","JSON","parse","stringify","orders","ios","android","projectRoot","platforms","assertMissingModProviders","modRawConfig","platformName","entries","includes","name","join","platformProjectRoot","path","projectName","undefined","modName","mod","modRequest","isProvider","errorMessage","PluginError","Warnings","addWarningForPlatform","results","modResults"],"mappings":"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","sourcesContent":["import Debug from 'debug';\nimport path from 'path';\n\nimport { ExportedConfig, Mod, ModConfig, ModPlatform } from '../Plugin.types';\nimport { getHackyProjectName } from '../ios/utils/Xcodeproj';\nimport { PluginError } from '../utils/errors';\nimport * as Warnings from '../utils/warnings';\nimport { assertModResults, ForwardedBaseModOptions } from './createBaseMod';\nimport { withAndroidBaseMods } from './withAndroidBaseMods';\nimport { withIosBaseMods } from './withIosBaseMods';\n\nconst debug = Debug('expo:config-plugins:mod-compiler');\n\nexport function withDefaultBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, props);\n  config = withAndroidBaseMods(config, props);\n  return config;\n}\n\n/**\n * Get a prebuild config that safely evaluates mods without persisting any changes to the file system.\n * Currently this only supports infoPlist, entitlements, androidManifest, strings, gradleProperties, and expoPlist mods.\n * This plugin should be evaluated directly:\n */\nexport function withIntrospectionBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, {\n    saveToInternal: true,\n    // This writing optimization can be skipped since we never write in introspection mode.\n    // Including empty mods will ensure that all mods get introspected.\n    skipEmptyMod: false,\n    ...props,\n  });\n  config = withAndroidBaseMods(config, {\n    saveToInternal: true,\n    skipEmptyMod: false,\n    ...props,\n  });\n\n  if (config.mods) {\n    // Remove all mods that don't have an introspection base mod, for instance `dangerous` mods.\n    for (const platform of Object.keys(config.mods) as ModPlatform[]) {\n      // const platformPreserve = preserve[platform];\n      for (const key of Object.keys(config.mods[platform] || {})) {\n        // @ts-ignore\n        if (!config.mods[platform]?.[key]?.isIntrospective) {\n          debug(`removing non-idempotent mod: ${platform}.${key}`);\n          // @ts-ignore\n          delete config.mods[platform]?.[key];\n        }\n      }\n    }\n  }\n\n  return config;\n}\n\n/**\n *\n * @param projectRoot\n * @param config\n */\nexport async function compileModsAsync(\n  config: ExportedConfig,\n  props: {\n    projectRoot: string;\n    platforms?: ModPlatform[];\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n  }\n): Promise<ExportedConfig> {\n  if (props.introspect === true) {\n    config = withIntrospectionBaseMods(config);\n  } else {\n    config = withDefaultBaseMods(config);\n  }\n  return await evalModsAsync(config, props);\n}\n\nfunction sortMods(commands: [string, any][], order: string[]): [string, any][] {\n  const allKeys = commands.map(([key]) => key);\n  const completeOrder = [...new Set([...order, ...allKeys])];\n  const sorted: [string, any][] = [];\n  while (completeOrder.length) {\n    const group = completeOrder.shift()!;\n    const commandSet = commands.find(([key]) => key === group);\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  }\n  return sorted;\n}\n\nfunction getRawClone({ mods, ...config }: ExportedConfig) {\n  // Configs should be fully serializable, so we can clone them without worrying about\n  // the mods.\n  return Object.freeze(JSON.parse(JSON.stringify(config)));\n}\n\nconst orders: Record<string, string[]> = {\n  ios: [\n    // dangerous runs first\n    'dangerous',\n    // run the XcodeProject mod second because many plugins attempt to read from it.\n    'xcodeproj',\n  ],\n  android: ['dangerous'],\n};\n/**\n * A generic plugin compiler.\n *\n * @param config\n */\nexport async function evalModsAsync(\n  config: ExportedConfig,\n  {\n    projectRoot,\n    introspect,\n    platforms,\n    /**\n     * Throw errors when mods are missing providers.\n     * @default true\n     */\n    assertMissingModProviders,\n  }: {\n    projectRoot: string;\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n    platforms?: ModPlatform[];\n  }\n): Promise<ExportedConfig> {\n  const modRawConfig = getRawClone(config);\n  for (const [platformName, platform] of Object.entries(config.mods ?? ({} as ModConfig))) {\n    if (platforms && !platforms.includes(platformName as any)) {\n      debug(`skip platform: ${platformName}`);\n      continue;\n    }\n\n    let entries = Object.entries(platform);\n    if (entries.length) {\n      // Move dangerous item to the first position if it exists, this ensures that all dangerous code runs first.\n      entries = sortMods(entries, orders[platformName]!);\n      debug(`run in order: ${entries.map(([name]) => name).join(', ')}`);\n      const platformProjectRoot = path.join(projectRoot, platformName);\n      const projectName =\n        platformName === 'ios' ? getHackyProjectName(projectRoot, config) : undefined;\n\n      for (const [modName, mod] of entries) {\n        const modRequest = {\n          projectRoot,\n          projectName,\n          platformProjectRoot,\n          platform: platformName as ModPlatform,\n          modName,\n          introspect: !!introspect,\n        };\n\n        if (!(mod as Mod).isProvider) {\n          // In strict mode, throw an error.\n          const errorMessage = `Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods`;\n          if (assertMissingModProviders !== false) {\n            throw new PluginError(errorMessage, 'MISSING_PROVIDER');\n          } else {\n            Warnings.addWarningForPlatform(\n              platformName as ModPlatform,\n              `${platformName}.${modName}`,\n              `Skipping: Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.`\n            );\n            // In loose mode, just skip the mod entirely.\n            continue;\n          }\n        }\n\n        const results = await (mod as Mod)({\n          ...config,\n          modResults: null,\n          modRequest,\n          modRawConfig,\n        });\n\n        // Sanity check to help locate non compliant mods.\n        config = assertModResults(results, platformName, modName);\n        // @ts-ignore: `modResults` is added for modifications\n        delete config.modResults;\n        // @ts-ignore: `modRequest` is added for modifications\n        delete config.modRequest;\n        // @ts-ignore: `modRawConfig` is added for modifications\n        delete config.modRawConfig;\n      }\n    }\n  }\n\n  return config;\n}\n"]},"metadata":{},"sourceType":"script"}