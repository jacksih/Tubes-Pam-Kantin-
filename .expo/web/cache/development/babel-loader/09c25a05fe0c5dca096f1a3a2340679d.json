{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isLegacyImportsEnabled = isLegacyImportsEnabled;\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction isLegacyImportsEnabled(exp) {\n  if ((0, _getenv().boolish)('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn('Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.');\n    return true;\n  }\n  return lteSdkVersion(exp, '40.0.0');\n}\nfunction lteSdkVersion(expJson, sdkVersion) {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n  try {\n    return _semver().default.lte(expJson.sdkVersion, sdkVersion);\n  } catch (_unused) {\n    throw new Error(expJson.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}","map":{"version":3,"sources":["../src/isLegacyImportsEnabled.ts"],"names":["isLegacyImportsEnabled","exp","console","warn","lteSdkVersion","expJson","sdkVersion","semver","lte","Error"],"mappings":";;;;;;AAAA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AASO,SAASA,sBAAT,CAAgCC,GAAhC,EAAqE;EAC1E,IAAI,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA,OAAA,EAAQ,qBAAR,EAA+B,KAA/B,CAAJ,EAA2C;IACzCC,OAAO,CAACC,IAARD,CACE,sHADFA,CAAAA;IAGA,OAAO,IAAP;EALwE;EAS1E,OAAOE,aAAa,CAACH,GAAD,EAAM,QAAN,CAApB;AACD;AAED,SAASG,aAAT,CAAuBC,OAAvB,EAAgEC,UAAhE,EAA6F;EAC3F,IAAI,CAACD,OAAO,CAACC,UAAb,EAAyB;IACvB,OAAO,KAAP;EACD;EAED,IAAID,OAAO,CAACC,UAARD,KAAuB,aAA3B,EAA0C;IACxC,OAAO,KAAP;EACD;EAED,IAAI;IACF,OAAOE,OAAAA,EAAAA,CAAAA,OAAAA,CAAOC,GAAPD,CAAWF,OAAO,CAACC,UAAnBC,EAA+BD,UAA/BC,CAAP;EACD,CAFD,CAEE,gBAAM;IACN,MAAM,IAAIE,KAAJ,CAAaJ,OAAO,CAACC,UAArB,2DAAN;EACD;AACF","sourcesContent":["import { boolish } from 'getenv';\nimport semver from 'semver';\n\nimport { ExpoConfig } from './Config.types';\n\n/**\n * Should the bundler use .expo file extensions.\n *\n * @param exp\n */\nexport function isLegacyImportsEnabled(exp: Pick<ExpoConfig, 'sdkVersion'>) {\n  if (boolish('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn(\n      'Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.'\n    );\n    return true;\n  }\n  // Only allow target if the SDK version is available and it's less 41.\n  // This is optimized for making future projects work.\n  return lteSdkVersion(exp, '40.0.0');\n}\n\nfunction lteSdkVersion(expJson: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch {\n    throw new Error(`${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}