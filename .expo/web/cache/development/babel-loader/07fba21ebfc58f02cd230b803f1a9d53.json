{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DevLoadingView;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _DevLoadingViewNativeModule = _interopRequireDefault(require(\"./DevLoadingViewNativeModule\"));\nvar _getInitialSafeArea = require(\"./getInitialSafeArea\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction DevLoadingView() {\n  var _useState = (0, _react.useState)('Refreshing...'),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    message = _useState2[0],\n    setMessage = _useState2[1];\n  var _useState3 = (0, _react.useState)(false),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    isDevLoading = _useState4[0],\n    setIsDevLoading = _useState4[1];\n  var _useState5 = (0, _react.useState)(false),\n    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n    isAnimating = _useState6[0],\n    setIsAnimating = _useState6[1];\n  var translateY = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;\n  var emitter = (0, _react.useMemo)(function () {\n    try {\n      return new _expoModulesCore.EventEmitter(_DevLoadingViewNativeModule.default);\n    } catch (error) {\n      throw new Error('Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: ' + error.message);\n    }\n  }, []);\n  (0, _react.useEffect)(function () {\n    if (!emitter) return;\n    function handleShowMessage(event) {\n      setMessage(event.message);\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n    function handleHide() {\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      _reactNative.Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: _reactNative.Platform.OS !== 'web'\n      }).start(function (_ref) {\n        var finished = _ref.finished;\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n    var showMessageSubscription = emitter.addListener('devLoadingView:showMessage', handleShowMessage);\n    var hideSubscription = emitter.addListener('devLoadingView:hide', handleHide);\n    return function cleanup() {\n      showMessageSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [translateY, emitter]);\n  if (!isDevLoading && !isAnimating) {\n    return null;\n  }\n  return _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.animatedContainer, {\n      transform: [{\n        translateY: translateY\n      }]\n    }],\n    pointerEvents: \"none\"\n  }, _react.default.createElement(_reactNative.View, {\n    style: styles.banner\n  }, _react.default.createElement(_reactNative.View, {\n    style: styles.contentContainer\n  }, _react.default.createElement(_reactNative.View, {\n    style: {\n      flexDirection: 'row'\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.text\n  }, message)), _react.default.createElement(_reactNative.View, {\n    style: {\n      flex: 1\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.subtitle\n  }, isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\")))));\n}\nvar styles = _reactNative.StyleSheet.create({\n  animatedContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42\n  },\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n    paddingBottom: (0, _getInitialSafeArea.getInitialSafeArea)().bottom\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center'\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)'\n  }\n});","map":{"version":3,"sources":["../../src/environment/DevLoadingView.tsx"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'expo-modules-core';\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport { Animated, StyleSheet, Text, Platform, View } from 'react-native';\n\nimport DevLoadingViewNativeModule from './DevLoadingViewNativeModule';\nimport { getInitialSafeArea } from './getInitialSafeArea';\n\nexport default function DevLoadingView() {\n  const [message, setMessage] = useState('Refreshing...');\n  const [isDevLoading, setIsDevLoading] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const translateY = useRef(new Animated.Value(0)).current;\n  const emitter = useMemo<EventEmitter>(() => {\n    try {\n      return new EventEmitter(DevLoadingViewNativeModule);\n    } catch (error) {\n      throw new Error(\n        'Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: ' +\n          error.message\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!emitter) return;\n\n    function handleShowMessage(event: { message: string }) {\n      setMessage(event.message);\n      // TODO: if we show the refreshing banner and don't get a hide message\n      // for 3 seconds, warn the user that it's taking a while and suggest\n      // they reload\n\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n\n    function handleHide() {\n      // TODO: if we showed the 'refreshing' banner less than 250ms ago, delay\n      // switching to the 'finished' banner\n\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: Platform.OS !== 'web',\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n\n    const showMessageSubscription = emitter.addListener(\n      'devLoadingView:showMessage',\n      handleShowMessage\n    );\n    const hideSubscription = emitter.addListener('devLoadingView:hide', handleHide);\n\n    return function cleanup() {\n      showMessageSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [translateY, emitter]);\n\n  if (!isDevLoading && !isAnimating) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={[styles.animatedContainer, { transform: [{ translateY }] }]}\n      pointerEvents=\"none\">\n      <View style={styles.banner}>\n        <View style={styles.contentContainer}>\n          <View style={{ flexDirection: 'row' }}>\n            <Text style={styles.text}>{message}</Text>\n          </View>\n\n          <View style={{ flex: 1 }}>\n            <Text style={styles.subtitle}>\n              {isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\"}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animatedContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42, // arbitrary\n  },\n\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n    paddingBottom: getInitialSafeArea().bottom,\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15,\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)',\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}