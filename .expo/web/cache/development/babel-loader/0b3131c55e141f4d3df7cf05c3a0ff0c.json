{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createExoticTransformer = createExoticTransformer;\nfunction _createMatcher() {\n  var data = require(\"./createMatcher\");\n  _createMatcher = function _createMatcher() {\n    return data;\n  };\n  return data;\n}\nfunction _createMultiRuleTransformer() {\n  var data = require(\"./createMultiRuleTransformer\");\n  _createMultiRuleTransformer = function _createMultiRuleTransformer() {\n    return data;\n  };\n  return data;\n}\nfunction _getCacheKey() {\n  var data = require(\"./getCacheKey\");\n  _getCacheKey = function _getCacheKey() {\n    return data;\n  };\n  return data;\n}\nfunction createExoticTransformer(_ref) {\n  var nodeModulesPaths = _ref.nodeModulesPaths,\n    transpileModules = _ref.transpileModules;\n  if (!nodeModulesPaths) {\n    nodeModulesPaths = ['node_modules'];\n  }\n  var nodeModuleMatcher = (0, _createMatcher().createModuleMatcher)({\n    folders: nodeModulesPaths,\n    moduleIds: []\n  });\n  var impossibleNodeModuleMatcher = (0, _createMatcher().createModuleMatcher)({\n    moduleIds: ['victory', '@expo/vector-icons'].concat(_toConsumableArray(transpileModules || [])),\n    folders: nodeModulesPaths\n  });\n  var transform = (0, _createMultiRuleTransformer().createMultiRuleTransformer)({\n    getRuleType: function getRuleType(_ref2) {\n      var filename = _ref2.filename;\n      return nodeModuleMatcher.test(filename) && !impossibleNodeModuleMatcher.test(filename) ? 'module' : 'app';\n    },\n    rules: [{\n      name: 'bob',\n      type: 'module',\n      test: (0, _createMatcher().createModuleMatcher)({\n        moduleIds: ['.*/lib/commonjs/'],\n        folders: nodeModulesPaths\n      }),\n      transform: _createMultiRuleTransformer().loaders.passthroughModule,\n      warn: true\n    }, {\n      name: 'react-native',\n      type: 'module',\n      test: (0, _createMatcher().createReactNativeMatcher)({\n        folders: nodeModulesPaths\n      }),\n      transform: _createMultiRuleTransformer().loaders.reactNativeModule,\n      warn: true\n    }, {\n      name: 'expo-module',\n      type: 'module',\n      test: (0, _createMatcher().createExpoMatcher)({\n        folders: nodeModulesPaths\n      }),\n      transform: _createMultiRuleTransformer().loaders.expoModule,\n      warn: true\n    }, {\n      name: 'sucrase',\n      type: 'module',\n      test: (0, _createMatcher().createKnownCommunityMatcher)({\n        folders: nodeModulesPaths\n      }),\n      transform: _createMultiRuleTransformer().loaders.untranspiledModule,\n      warn: true\n    }, {\n      name: 'skip-module',\n      type: 'module',\n      test: function test() {\n        return true;\n      },\n      transform: _createMultiRuleTransformer().loaders.passthroughModule\n    }, {\n      name: 'babel',\n      test: function test() {\n        return true;\n      },\n      transform: _createMultiRuleTransformer().loaders.app\n    }]\n  });\n  return {\n    transform: transform,\n    getCacheKey: _getCacheKey().getCacheKey\n  };\n}","map":{"version":3,"sources":["../../src/transformer/createExoticTransformer.ts"],"names":["createExoticTransformer","nodeModulesPaths","transpileModules","nodeModuleMatcher","folders","moduleIds","impossibleNodeModuleMatcher","transform","getRuleType","filename","test","rules","name","type","loaders","passthroughModule","warn","reactNativeModule","expoModule","untranspiledModule","app","getCacheKey"],"mappings":"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","sourcesContent":["// Copyright 2021-present 650 Industries (Expo). All rights reserved.\nimport { BabelTransformer } from 'metro-babel-transformer';\n\nimport {\n  createExpoMatcher,\n  createKnownCommunityMatcher,\n  createModuleMatcher,\n  createReactNativeMatcher,\n} from './createMatcher';\nimport { createMultiRuleTransformer, loaders } from './createMultiRuleTransformer';\nimport { getCacheKey } from './getCacheKey';\n\n/**\n * Create an experimental multi-rule transformer for a React Native app.\n *\n * @example\n * ```\n * module.exports = createExoticTransformer({\n *    nodeModulesPaths: ['react-native'],\n *    transpileModules: ['@stripe/stripe-react-native'],\n * });\n * ```\n *\n * @param props.nodeModulesPaths paths to node_modules folders, relative to project root. Default: `['node_modules']`\n * @param props.transpileModules matchers for module names that should be transpiled using the project Babel configuration. Example: `['@stripe/stripe-react-native']`\n * @returns a Metro `transformer` function and default `getCacheKey` function.\n */\nexport function createExoticTransformer({\n  nodeModulesPaths,\n  transpileModules,\n}: {\n  nodeModulesPaths?: string[];\n  transpileModules?: string[];\n}): BabelTransformer {\n  if (!nodeModulesPaths) {\n    nodeModulesPaths = ['node_modules'];\n  }\n  // Match any node modules, or monorepo module.\n  const nodeModuleMatcher = createModuleMatcher({ folders: nodeModulesPaths, moduleIds: [] });\n\n  // Match node modules which are so oddly written that we must\n  // transpile them with every possible option (most expensive).\n  const impossibleNodeModuleMatcher = createModuleMatcher({\n    moduleIds: [\n      // victory is too wild\n      // SyntaxError in ../../node_modules/victory-native/lib/components/victory-primitives/bar.js: Missing semicolon. (9:1)\n      'victory',\n      // vector icons has some hidden issues that break NCL\n      '@expo/vector-icons',\n      ...(transpileModules || []),\n    ],\n    folders: nodeModulesPaths,\n  });\n\n  const transform = createMultiRuleTransformer({\n    // Specify which rules to use on a per-file basis, basically\n    // this is used to determine which modules are node modules, and which are application code.\n    getRuleType({ filename }) {\n      // Is a node module, and is not one of the impossible modules.\n      return nodeModuleMatcher.test(filename) && !impossibleNodeModuleMatcher.test(filename)\n        ? 'module'\n        : 'app';\n    },\n\n    // Order is very important, we use wild card matchers to transpile\n    // \"every unhandled node module\" and \"every unhandled application module\".\n    rules: [\n      // Match bob compiler modules, use the passthrough loader.\n      {\n        name: 'bob',\n        type: 'module',\n        test: createModuleMatcher({ moduleIds: ['.*/lib/commonjs/'], folders: nodeModulesPaths }),\n        transform: loaders.passthroughModule,\n        warn: true,\n      },\n      // Match React Native modules, convert them statically using sucrase.\n      {\n        name: 'react-native',\n        type: 'module',\n        test: createReactNativeMatcher({ folders: nodeModulesPaths }),\n        transform: loaders.reactNativeModule,\n        warn: true,\n      },\n      // Match Expo SDK modules, convert them statically using sucrase.\n      {\n        name: 'expo-module',\n        type: 'module',\n        test: createExpoMatcher({ folders: nodeModulesPaths }),\n        transform: loaders.expoModule,\n        warn: true,\n      },\n      // Match known problematic modules, convert them statically using an expensive, dynamic sucrase.\n      {\n        name: 'sucrase',\n        type: 'module',\n        test: createKnownCommunityMatcher({\n          folders: nodeModulesPaths,\n        }),\n        transform: loaders.untranspiledModule,\n        warn: true,\n      },\n      // Pass through any unhandled node modules as passthrough, this is where the most savings occur.\n      // Ideally, you want your project to pass all node modules through this loader.\n      // This should be the last \"module\" rule.\n      // Message library authors and ask them to ship their modules as pre-transpiled\n      // commonjs, to improve the development speed of your project.\n      {\n        name: 'skip-module',\n        type: 'module',\n        test: () => true,\n        transform: loaders.passthroughModule,\n      },\n      // All application code should be transpiled with the user's babel preset,\n      // this is the most expensive operation but provides the most customization to the user.\n      // The goal is to use this as sparingly as possible.\n      {\n        name: 'babel',\n        test: () => true,\n        transform: loaders.app,\n      },\n    ],\n  });\n\n  return {\n    transform,\n    getCacheKey,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}