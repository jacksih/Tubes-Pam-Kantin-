{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeAfterStaticPlugins = serializeAfterStaticPlugins;\nexports.serializeAndEvaluate = serializeAndEvaluate;\nexports.serializeSkippingMods = serializeSkippingMods;\nfunction _Errors() {\n  var data = require(\"./Errors\");\n  _Errors = function _Errors() {\n    return data;\n  };\n  return data;\n}\nfunction serializeAndEvaluate(val) {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    return val();\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluate);\n  } else if (typeof val === 'object') {\n    var output = {};\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluate(val[property]);\n      }\n    }\n    return output;\n  }\n  throw new (_Errors().ConfigError)(\"Expo config doesn't support `Symbols`: \" + val, 'INVALID_CONFIG');\n}\nfunction serializeSkippingMods(val) {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    var output = {};\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods' || property === 'plugins') {\n          output[property] = val[property];\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}\nfunction serializeAndEvaluatePlugin(val) {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    var _val$name;\n    return (_val$name = val.name) !== null && _val$name !== void 0 ? _val$name : 'withAnonymous';\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluatePlugin);\n  } else if (typeof val === 'object') {\n    var output = {};\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluatePlugin(val[property]);\n      }\n    }\n    return output;\n  }\n  throw new (_Errors().ConfigError)(\"Expo config doesn't support `Symbols`: \" + val, 'INVALID_CONFIG');\n}\nfunction serializeAfterStaticPlugins(val) {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    var output = {};\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods') {\n          output[property] = val[property];\n        } else if (property === 'plugins' && Array.isArray(val[property])) {\n          output[property] = val[property].map(serializeAndEvaluatePlugin);\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}","map":{"version":3,"sources":["../src/Serialize.ts"],"names":["serializeAndEvaluate","val","includes","Array","isArray","map","output","property","hasOwnProperty","ConfigError","serializeSkippingMods","serializeAndEvaluatePlugin","name","serializeAfterStaticPlugins"],"mappings":"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","sourcesContent":["import { ConfigError } from './Errors';\n\nexport function serializeAndEvaluate(val: any): any {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    // TODO: Bacon: Should we support async methods?\n    return val();\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluate);\n  } else if (typeof val === 'object') {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluate(val[property]);\n      }\n    }\n    return output;\n  }\n  // symbol\n  throw new ConfigError(`Expo config doesn't support \\`Symbols\\`: ${val}`, 'INVALID_CONFIG');\n}\n\nexport function serializeSkippingMods(val: any): any {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods' || property === 'plugins') {\n          // Don't serialize mods or plugins\n          output[property] = val[property];\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}\n\nfunction serializeAndEvaluatePlugin(val: any): any {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    return val.name ?? 'withAnonymous';\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluatePlugin);\n  } else if (typeof val === 'object') {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluatePlugin(val[property]);\n      }\n    }\n    return output;\n  }\n  // symbol\n  throw new ConfigError(`Expo config doesn't support \\`Symbols\\`: ${val}`, 'INVALID_CONFIG');\n}\n\nexport function serializeAfterStaticPlugins(val: any): any {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods') {\n          // Don't serialize mods\n          output[property] = val[property];\n        } else if (property === 'plugins' && Array.isArray(val[property])) {\n          // Serialize the mods by removing any config plugins\n          output[property] = val[property].map(serializeAndEvaluatePlugin);\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}\n"]},"metadata":{},"sourceType":"script"}