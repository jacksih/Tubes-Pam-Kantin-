{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withPlugins = void 0;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _withStaticPlugin() {\n  var data = require(\"./withStaticPlugin\");\n  _withStaticPlugin = function _withStaticPlugin() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withPlugins = function withPlugins(config, plugins) {\n  (0, _assert().default)(Array.isArray(plugins), 'withPlugins expected a valid array of plugins or plugin module paths');\n  return plugins.reduce(function (prev, plugin) {\n    return (0, _withStaticPlugin().withStaticPlugin)(prev, {\n      plugin: plugin\n    });\n  }, config);\n};\nexports.withPlugins = withPlugins;","map":{"version":3,"sources":["../../src/plugins/withPlugins.ts"],"names":["withPlugins","config","plugins","Array","isArray","reduce","prev","plugin"],"mappings":";;;;;;AAAA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAGA,SAAA,iBAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;EAAA,iBAAA,GAAA,6BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAQO,IAAMA,WAAmE,GAAG,SAAtEA,WAAmE,CAC9EC,MADiF,EAEjFC,OAFiF,EAG9E;EACH,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA,OAAA,EACEC,KAAK,CAACC,OAAND,CAAcD,OAAdC,CADF,EAEE,sEAFF,CAAA;EAIA,OAAO,OAAO,CAACE,MAAR,CAAe,UAACC,IAAD,EAAOC,MAAP;IAAA,OAAkB,CAAA,CAAA,EAAA,iBAAA,EAAA,CAAA,gBAAA,EAAiBD,IAAjB,EAAuB;MAAEC,MAAAA,EAAAA;IAAF,CAAvB,CAAjC;EAAA,GAAqEN,MAArE,CAAP;AACD,CATM","sourcesContent":["import assert from 'assert';\n\nimport { ConfigPlugin, StaticPlugin } from '../Plugin.types';\nimport { withStaticPlugin } from './withStaticPlugin';\n\n/**\n * Resolves a list of plugins.\n *\n * @param config exported config\n * @param plugins list of config config plugins to apply to the exported config\n */\nexport const withPlugins: ConfigPlugin<(StaticPlugin | ConfigPlugin | string)[]> = (\n  config,\n  plugins\n) => {\n  assert(\n    Array.isArray(plugins),\n    'withPlugins expected a valid array of plugins or plugin module paths'\n  );\n  return plugins.reduce((prev, plugin) => withStaticPlugin(prev, { plugin }), config);\n};\n"]},"metadata":{},"sourceType":"script"}