{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBitcode = getBitcode;\nexports.setBitcode = setBitcode;\nexports.setBitcodeWithConfig = setBitcodeWithConfig;\nexports.withCustomBitcode = exports.withBitcode = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nvar withBitcode = function withBitcode(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setBitcodeWithConfig(config, {\n        project: config.modResults\n      });\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withBitcode = withBitcode;\nvar withCustomBitcode = function withCustomBitcode(config, bitcode) {\n  return (0, _iosPlugins().withXcodeProject)(config, function () {\n    var _ref2 = _asyncToGenerator(function* (config) {\n      config.modResults = yield setBitcode(bitcode, {\n        project: config.modResults\n      });\n      return config;\n    });\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n};\nexports.withCustomBitcode = withCustomBitcode;\nfunction getBitcode(config) {\n  var _config$ios;\n  return (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.bitcode;\n}\nfunction setBitcodeWithConfig(config, _ref3) {\n  var project = _ref3.project;\n  var bitcode = getBitcode(config);\n  return setBitcode(bitcode, {\n    project: project\n  });\n}\nfunction setBitcode(bitcode, _ref4) {\n  var project = _ref4.project;\n  var isDefaultBehavior = bitcode == null;\n  if (isDefaultBehavior) {\n    return project;\n  }\n  var targetName = typeof bitcode === 'string' ? bitcode : undefined;\n  var isBitcodeEnabled = !!bitcode;\n  if (targetName) {\n    var configs = Object.entries(project.pbxXCBuildConfigurationSection()).filter(_Xcodeproj().isNotComment);\n    var hasConfiguration = configs.find(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        configuration = _ref6[1];\n      return configuration.name === targetName;\n    });\n    if (hasConfiguration) {\n      project.addBuildProperty('ENABLE_BITCODE', 'NO');\n    } else {\n      var names = _toConsumableArray(new Set(configs.map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n          configuration = _ref8[1];\n        return \"\\\"\" + configuration.name + \"\\\"\";\n      }))).sort();\n      (0, _warnings().addWarningIOS)('ios.bitcode', \"No configuration named \\\"\" + targetName + \"\\\". Expected one of: \" + names.join(', ') + \".\");\n    }\n  }\n  project.addBuildProperty('ENABLE_BITCODE', isBitcodeEnabled ? 'YES' : 'NO', targetName);\n  return project;\n}","map":{"version":3,"sources":["../../src/ios/Bitcode.ts"],"names":["withBitcode","config","modResults","setBitcodeWithConfig","project","withCustomBitcode","bitcode","setBitcode","getBitcode","ios","isDefaultBehavior","targetName","undefined","isBitcodeEnabled","configs","Object","entries","pbxXCBuildConfigurationSection","filter","isNotComment","hasConfiguration","find","configuration","name","addBuildProperty","names","Set","map","sort","join"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { isNotComment } from './utils/Xcodeproj';\n\ntype Bitcode = NonNullable<ExpoConfig['ios']>['bitcode'];\n\n/**\n * Plugin to set a bitcode preference for the Xcode project\n * based on the project's Expo config `ios.bitcode` value.\n */\nexport const withBitcode: ConfigPlugin = (config) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setBitcodeWithConfig(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Plugin to set a custom bitcode preference for the Xcode project.\n * Does not read from the Expo config `ios.bitcode`.\n *\n * @param bitcode custom bitcode setting.\n */\nexport const withCustomBitcode: ConfigPlugin<Bitcode> = (config, bitcode) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setBitcode(bitcode, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Get the bitcode preference from the Expo config.\n */\nexport function getBitcode(config: Pick<ExpoConfig, 'ios'>): Bitcode {\n  return config.ios?.bitcode;\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property of the project configurations.\n */\nexport function setBitcodeWithConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const bitcode = getBitcode(config);\n  return setBitcode(bitcode, { project });\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property.\n */\nexport function setBitcode(bitcode: Bitcode, { project }: { project: XcodeProject }): XcodeProject {\n  const isDefaultBehavior = bitcode == null;\n  // If the value is undefined, then do nothing.\n  if (isDefaultBehavior) {\n    return project;\n  }\n\n  const targetName = typeof bitcode === 'string' ? bitcode : undefined;\n  const isBitcodeEnabled = !!bitcode;\n  if (targetName) {\n    // Assert if missing\n    const configs = Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment);\n    const hasConfiguration = configs.find(([, configuration]) => configuration.name === targetName);\n    if (hasConfiguration) {\n      // If targetName is defined then disable bitcode everywhere.\n      project.addBuildProperty('ENABLE_BITCODE', 'NO');\n    } else {\n      const names = [\n        // Remove duplicates, wrap in double quotes, and sort alphabetically.\n        ...new Set(configs.map(([, configuration]) => `\"${configuration.name}\"`)),\n      ].sort();\n      addWarningIOS(\n        'ios.bitcode',\n        `No configuration named \"${targetName}\". Expected one of: ${names.join(', ')}.`\n      );\n    }\n  }\n\n  project.addBuildProperty('ENABLE_BITCODE', isBitcodeEnabled ? 'YES' : 'NO', targetName);\n\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}