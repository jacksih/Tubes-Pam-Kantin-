{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"GMSApiKey\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MATCH_INIT = void 0;\nexports.addGoogleMapsAppDelegateImport = addGoogleMapsAppDelegateImport;\nexports.addGoogleMapsAppDelegateInit = addGoogleMapsAppDelegateInit;\nexports.addMapsCocoaPods = addMapsCocoaPods;\nexports.getGoogleMapsApiKey = getGoogleMapsApiKey;\nexports.removeGoogleMapsAppDelegateImport = removeGoogleMapsAppDelegateImport;\nexports.removeGoogleMapsAppDelegateInit = removeGoogleMapsAppDelegateInit;\nexports.removeMapsCocoaPods = removeMapsCocoaPods;\nexports.setGoogleMapsApiKey = setGoogleMapsApiKey;\nexports.withMaps = void 0;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _generateCode() {\n  var data = require(\"../utils/generateCode\");\n  _generateCode = function _generateCode() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require('debug')('expo:config-plugins:ios:maps');\nvar MATCH_INIT = /(?:(self\\.|_)(\\w+)\\s?=\\s?\\[\\[UMModuleRegistryAdapter alloc\\])|(?:RCTBridge\\s?\\*\\s?(\\w+)\\s?=\\s?\\[\\[RCTBridge alloc\\])|(\\[self\\.reactDelegate createBridgeWithDelegate:self launchOptions:launchOptions\\])/g;\nexports.MATCH_INIT = MATCH_INIT;\nvar withGoogleMapsKey = (0, _iosPlugins().createInfoPlistPlugin)(setGoogleMapsApiKey, 'withGoogleMapsKey');\nvar withMaps = function withMaps(config) {\n  config = withGoogleMapsKey(config);\n  var apiKey = getGoogleMapsApiKey(config);\n  debug('Google Maps API Key:', apiKey);\n  config = withMapsCocoaPods(config, {\n    useGoogleMaps: !!apiKey\n  });\n  config = withGoogleMapsAppDelegate(config, {\n    apiKey: apiKey\n  });\n  return config;\n};\nexports.withMaps = withMaps;\nfunction getGoogleMapsApiKey(config) {\n  var _config$ios$config$go, _config$ios, _config$ios$config;\n  return (_config$ios$config$go = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : _config$ios$config.googleMapsApiKey) !== null && _config$ios$config$go !== void 0 ? _config$ios$config$go : null;\n}\nfunction setGoogleMapsApiKey(config, _ref) {\n  var GMSApiKey = _ref.GMSApiKey,\n    infoPlist = _objectWithoutProperties(_ref, _excluded);\n  var apiKey = getGoogleMapsApiKey(config);\n  if (apiKey === null) {\n    return infoPlist;\n  }\n  return Object.assign({}, infoPlist, {\n    GMSApiKey: apiKey\n  });\n}\nfunction addGoogleMapsAppDelegateImport(src) {\n  var newSrc = [];\n  newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)', '#import <GoogleMaps/GoogleMaps.h>', '#endif');\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps-import',\n    src: src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//'\n  });\n}\nfunction removeGoogleMapsAppDelegateImport(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps-import',\n    src: src\n  });\n}\nfunction addGoogleMapsAppDelegateInit(src, apiKey) {\n  var newSrc = [];\n  newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)', \"  [GMSServices provideAPIKey:@\\\"\" + apiKey + \"\\\"];\", '#endif');\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps-init',\n    src: src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 0,\n    comment: '//'\n  });\n}\nfunction removeGoogleMapsAppDelegateInit(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps-init',\n    src: src\n  });\n}\nfunction addMapsCocoaPods(src) {\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps',\n    src: src,\n    newSrc: \"  pod 'react-native-google-maps', path: File.dirname(`node --print \\\"require.resolve('react-native-maps/package.json')\\\"`)\",\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#'\n  });\n}\nfunction removeMapsCocoaPods(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps',\n    src: src\n  });\n}\nfunction isReactNativeMapsInstalled(projectRoot) {\n  var resolved = _resolveFrom().default.silent(projectRoot, 'react-native-maps/package.json');\n  return resolved ? _path().default.dirname(resolved) : null;\n}\nfunction isReactNativeMapsAutolinked(config) {\n  return true;\n}\nvar withMapsCocoaPods = function withMapsCocoaPods(config, _ref2) {\n  var useGoogleMaps = _ref2.useGoogleMaps;\n  return (0, _withDangerousMod().withDangerousMod)(config, ['ios', function () {\n    var _ref3 = _asyncToGenerator(function* (config) {\n      var filePath = _path().default.join(config.modRequest.platformProjectRoot, 'Podfile');\n      var contents = yield _fs().default.promises.readFile(filePath, 'utf-8');\n      var results;\n      var googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      var isLinked = isReactNativeMapsAutolinked(config);\n      debug('Is Expo Autolinked:', isLinked);\n      debug('react-native-maps path:', googleMapsPath);\n      if (isLinked && googleMapsPath && useGoogleMaps) {\n        try {\n          results = addMapsCocoaPods(contents);\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\"Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.\");\n          }\n          throw error;\n        }\n      } else {\n        results = removeMapsCocoaPods(contents);\n      }\n      if (results.didMerge || results.didClear) {\n        yield _fs().default.promises.writeFile(filePath, results.contents);\n      }\n      return config;\n    });\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }()]);\n};\nvar withGoogleMapsAppDelegate = function withGoogleMapsAppDelegate(config, _ref4) {\n  var apiKey = _ref4.apiKey;\n  return (0, _iosPlugins().withAppDelegate)(config, function (config) {\n    if (['objc', 'objcpp'].includes(config.modResults.language)) {\n      if (apiKey && isReactNativeMapsAutolinked(config) && isReactNativeMapsInstalled(config.modRequest.projectRoot)) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(config.modResults.contents).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(config.modResults.contents, apiKey).contents;\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\"Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.\");\n          }\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(config.modResults.contents).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(config.modResults.contents).contents;\n      }\n    } else {\n      throw new Error(\"Cannot setup Google Maps because the project AppDelegate is not a supported language: \" + config.modResults.language);\n    }\n    return config;\n  });\n};","map":{"version":3,"sources":["../../src/ios/Maps.ts"],"names":["debug","require","MATCH_INIT","withGoogleMapsKey","setGoogleMapsApiKey","withMaps","config","apiKey","getGoogleMapsApiKey","withMapsCocoaPods","useGoogleMaps","withGoogleMapsAppDelegate","ios","googleMapsApiKey","GMSApiKey","infoPlist","addGoogleMapsAppDelegateImport","src","newSrc","push","tag","join","anchor","offset","comment","removeGoogleMapsAppDelegateImport","addGoogleMapsAppDelegateInit","removeGoogleMapsAppDelegateInit","addMapsCocoaPods","removeMapsCocoaPods","isReactNativeMapsInstalled","projectRoot","resolved","resolveFrom","silent","path","dirname","isReactNativeMapsAutolinked","filePath","modRequest","platformProjectRoot","contents","fs","promises","readFile","results","googleMapsPath","isLinked","error","code","Error","didMerge","didClear","writeFile","includes","modResults","language"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin, InfoPlist } from '../Plugin.types';\nimport { createInfoPlistPlugin, withAppDelegate } from '../plugins/ios-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { mergeContents, MergeResults, removeContents } from '../utils/generateCode';\n\nconst debug = require('debug')('expo:config-plugins:ios:maps') as typeof console.log;\n\n// Match against `UMModuleRegistryAdapter` (unimodules), and React Native without unimodules (Expo Modules), and SDK +44 React AppDelegate subscriber.\nexport const MATCH_INIT =\n  /(?:(self\\.|_)(\\w+)\\s?=\\s?\\[\\[UMModuleRegistryAdapter alloc\\])|(?:RCTBridge\\s?\\*\\s?(\\w+)\\s?=\\s?\\[\\[RCTBridge alloc\\])|(\\[self\\.reactDelegate createBridgeWithDelegate:self launchOptions:launchOptions\\])/g;\n\nconst withGoogleMapsKey = createInfoPlistPlugin(setGoogleMapsApiKey, 'withGoogleMapsKey');\n\nexport const withMaps: ConfigPlugin = (config) => {\n  config = withGoogleMapsKey(config);\n\n  const apiKey = getGoogleMapsApiKey(config);\n  // Technically adds react-native-maps (Apple maps) and google maps.\n\n  debug('Google Maps API Key:', apiKey);\n  config = withMapsCocoaPods(config, { useGoogleMaps: !!apiKey });\n\n  // Adds/Removes AppDelegate setup for Google Maps API on iOS\n  config = withGoogleMapsAppDelegate(config, { apiKey });\n\n  return config;\n};\n\nexport function getGoogleMapsApiKey(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleMapsApiKey ?? null;\n}\n\nexport function setGoogleMapsApiKey(\n  config: Pick<ExpoConfig, 'ios'>,\n  { GMSApiKey, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const apiKey = getGoogleMapsApiKey(config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GMSApiKey: apiKey,\n  };\n}\n\nexport function addGoogleMapsAppDelegateImport(src: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    '#import <GoogleMaps/GoogleMaps.h>',\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateImport(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-import',\n    src,\n  });\n}\n\nexport function addGoogleMapsAppDelegateInit(src: string, apiKey: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    `  [GMSServices provideAPIKey:@\"${apiKey}\"];`,\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-init',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 0,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateInit(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-init',\n    src,\n  });\n}\n\n/**\n * @param src The contents of the Podfile.\n * @returns Podfile with Google Maps added.\n */\nexport function addMapsCocoaPods(src: string): MergeResults {\n  return mergeContents({\n    tag: 'react-native-maps',\n    src,\n    newSrc: `  pod 'react-native-google-maps', path: File.dirname(\\`node --print \"require.resolve('react-native-maps/package.json')\"\\`)`,\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#',\n  });\n}\n\nexport function removeMapsCocoaPods(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps',\n    src,\n  });\n}\n\nfunction isReactNativeMapsInstalled(projectRoot: string): string | null {\n  const resolved = resolveFrom.silent(projectRoot, 'react-native-maps/package.json');\n  return resolved ? path.dirname(resolved) : null;\n}\n\nfunction isReactNativeMapsAutolinked(config: Pick<ExpoConfig, '_internal'>): boolean {\n  // Only add the native code changes if we know that the package is going to be linked natively.\n  // This is specifically for monorepo support where one app might have react-native-maps (adding it to the node_modules)\n  // but another app will not have it installed in the package.json, causing it to not be linked natively.\n  // This workaround only exists because react-native-maps doesn't have a config plugin vendored in the package.\n\n  // TODO: `react-native-maps` doesn't use Expo autolinking so we cannot safely disable the module.\n  return true;\n\n  // return (\n  //   !config._internal?.autolinkedModules ||\n  //   config._internal.autolinkedModules.includes('react-native-maps')\n  // );\n}\n\nconst withMapsCocoaPods: ConfigPlugin<{ useGoogleMaps: boolean }> = (config, { useGoogleMaps }) => {\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      const filePath = path.join(config.modRequest.platformProjectRoot, 'Podfile');\n      const contents = await fs.promises.readFile(filePath, 'utf-8');\n      let results: MergeResults;\n      // Only add the block if react-native-maps is installed in the project (best effort).\n      // Generally prebuild runs after a yarn install so this should always work as expected.\n      const googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      const isLinked = isReactNativeMapsAutolinked(config);\n      debug('Is Expo Autolinked:', isLinked);\n      debug('react-native-maps path:', googleMapsPath);\n      if (isLinked && googleMapsPath && useGoogleMaps) {\n        try {\n          results = addMapsCocoaPods(contents);\n        } catch (error: any) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        // If the package is no longer installed, then remove the block.\n        results = removeMapsCocoaPods(contents);\n      }\n      if (results.didMerge || results.didClear) {\n        await fs.promises.writeFile(filePath, results.contents);\n      }\n      return config;\n    },\n  ]);\n};\n\nconst withGoogleMapsAppDelegate: ConfigPlugin<{ apiKey: string | null }> = (config, { apiKey }) => {\n  return withAppDelegate(config, (config) => {\n    if (['objc', 'objcpp'].includes(config.modResults.language)) {\n      if (\n        apiKey &&\n        isReactNativeMapsAutolinked(config) &&\n        isReactNativeMapsInstalled(config.modRequest.projectRoot)\n      ) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(\n            config.modResults.contents\n          ).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(\n            config.modResults.contents,\n            apiKey\n          ).contents;\n        } catch (error: any) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(\n          config.modResults.contents\n        ).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(\n          config.modResults.contents\n        ).contents;\n      }\n    } else {\n      throw new Error(\n        `Cannot setup Google Maps because the project AppDelegate is not a supported language: ${config.modResults.language}`\n      );\n    }\n    return config;\n  });\n};\n"]},"metadata":{},"sourceType":"script"}