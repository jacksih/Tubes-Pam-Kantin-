{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuildPodfilePropsConfigPlugin = createBuildPodfilePropsConfigPlugin;\nexports.updateIosBuildPropertiesFromConfig = updateIosBuildPropertiesFromConfig;\nexports.updateIosBuildProperty = updateIosBuildProperty;\nexports.withJsEnginePodfileProps = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction createBuildPodfilePropsConfigPlugin(configToPropertyRules, name) {\n  var withUnknown = function withUnknown(config, sourceConfig) {\n    return (0, _iosPlugins().withPodfileProperties)(config, function (config) {\n      config.modResults = updateIosBuildPropertiesFromConfig(sourceConfig !== null && sourceConfig !== void 0 ? sourceConfig : config, config.modResults, configToPropertyRules);\n      return config;\n    });\n  };\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n  return withUnknown;\n}\nvar withJsEnginePodfileProps = createBuildPodfilePropsConfigPlugin([{\n  propName: 'expo.jsEngine',\n  propValueGetter: function propValueGetter(config) {\n    var _ref, _config$ios$jsEngine, _config$ios;\n    return (_ref = (_config$ios$jsEngine = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.jsEngine) !== null && _config$ios$jsEngine !== void 0 ? _config$ios$jsEngine : config.jsEngine) !== null && _ref !== void 0 ? _ref : 'jsc';\n  }\n}], 'withJsEnginePodfileProps');\nexports.withJsEnginePodfileProps = withJsEnginePodfileProps;\nfunction updateIosBuildPropertiesFromConfig(config, podfileProperties, configToPropertyRules) {\n  for (var configToProperty of configToPropertyRules) {\n    var value = configToProperty.propValueGetter(config);\n    updateIosBuildProperty(podfileProperties, configToProperty.propName, value);\n  }\n  return podfileProperties;\n}\nfunction updateIosBuildProperty(podfileProperties, name, value, options) {\n  if (value) {\n    podfileProperties[name] = value;\n  } else if (options !== null && options !== void 0 && options.removePropWhenValueIsNull) {\n    delete podfileProperties[name];\n  }\n  return podfileProperties;\n}","map":{"version":3,"sources":["../../src/ios/BuildProperties.ts"],"names":["createBuildPodfilePropsConfigPlugin","configToPropertyRules","name","withUnknown","config","sourceConfig","modResults","updateIosBuildPropertiesFromConfig","Object","defineProperty","value","withJsEnginePodfileProps","propName","propValueGetter","ios","jsEngine","podfileProperties","configToProperty","updateIosBuildProperty","options","removePropWhenValueIsNull"],"mappings":";;;;;;;;;AAGA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;EAAA,WAAA,GAAA,uBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAkBO,SAASA,mCAAT,CACLC,qBADK,EAELC,IAFK,EAGL;EACA,IAAMC,WAAwF,GAAG,SAA3FA,WAAwF,CAC5FC,MAD+F,EAE/FC,YAF+F;IAAA,OAI/F,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,qBAAA,EAAsBD,MAAtB,EAA+BA,UAAAA,MAAD,EAAY;MACxCA,MAAM,CAACE,UAAPF,GAAoBG,kCAAkC,CACnDF,YADmD,KAAA,IAAA,IACnDA,YADmD,KAAA,KAAA,CAAA,GACnDA,YADmD,GACnCD,MADmC,EAEpDA,MAAM,CAACE,UAF6C,EAGpDL,qBAHoD,CAAtDG;MAKA,OAAOA,MAAP;IACD,CAPD,CAJF;EAAA;EAYA,IAAIF,IAAJ,EAAU;IACRM,MAAM,CAACC,cAAPD,CAAsBL,WAAtBK,EAAmC,MAAnCA,EAA2C;MACzCE,KAAK,EAAER;IADkC,CAA3CM,CAAAA;EAGD;EACD,OAAOL,WAAP;AACD;AAKM,IAAMQ,wBAAwB,GAAGX,mCAAmC,CACzE,CACE;EACEY,QAAQ,EAAE,eADZ;EAEEC,eAAe,EAAGT,yBAAAA,MAAD,EAAA;IAAA,IAAA,IAAA,EAAA,oBAAA,EAAA,WAAA;IAAA,OAAA,CAAA,IAAA,GAAA,CAAA,oBAAA,GAAA,CAAA,WAAA,GAAYA,MAAM,CAACU,GAAnB,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAYV,WAAAA,CAAYW,QAAxB,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,oBAAA,GAAoCX,MAAM,CAACW,QAA3C,MAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAuD,KAAvD;EAAA;AAFnB,CADF,CADyE,EAOzE,0BAPyE,CAApE;;AAUA,SAASR,kCAAT,CACLH,MADK,EAELY,iBAFK,EAGLf,qBAHK,EAIL;EACA,KAAK,IAAMgB,gBAAX,IAA+BhB,qBAA/B,EAAsD;IACpD,IAAMS,KAAK,GAAGO,gBAAgB,CAACJ,eAAjBI,CAAiCb,MAAjCa,CAAd;IACAC,sBAAsB,CAACF,iBAAD,EAAoBC,gBAAgB,CAACL,QAArC,EAA+CF,KAA/C,CAAtBQ;EACD;EACD,OAAOF,iBAAP;AACD;AAEM,SAASE,sBAAT,CACLF,iBADK,EAELd,IAFK,EAGLQ,KAHK,EAILS,OAJK,EAKL;EACA,IAAIT,KAAJ,EAAW;IACTM,iBAAiB,CAACd,IAAD,CAAjBc,GAA0BN,KAA1BM;EACD,CAFD,MAEO,IAAIG,OAAJ,KAAA,IAAA,IAAIA,OAAJ,KAAA,KAAA,CAAA,IAAIA,OAAO,CAAEC,yBAAb,EAAwC;IAC7C,OAAOJ,iBAAiB,CAACd,IAAD,CAAxB;EACD;EACD,OAAOc,iBAAP;AACD","sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\n\nimport type { ConfigPlugin } from '../Plugin.types';\nimport { withPodfileProperties } from '../plugins/ios-plugins';\nimport { BuildPropertiesConfig, ConfigToPropertyRuleType } from '../utils/BuildProperties.types';\n\n/**\n * Creates a `withPodfileProperties` config-plugin based on given config to property mapping rules.\n *\n * The factory supports two modes from generic type inference\n * ```ts\n * // config-plugin without `props`, it will implicitly use the expo config as source config.\n * createBuildPodfilePropsConfigPlugin<ExpoConfig>(): ConfigPlugin<void>;\n *\n * // config-plugin with a parameter `props: CustomType`, it will use the `props` as source config.\n * createBuildPodfilePropsConfigPlugin<CustomType>(): ConfigPlugin<CustomType>;\n * ```\n *\n * @param configToPropertyRules config to property mapping rules\n * @param name the config plugin name\n */\nexport function createBuildPodfilePropsConfigPlugin<SourceConfigType extends BuildPropertiesConfig>(\n  configToPropertyRules: ConfigToPropertyRuleType<SourceConfigType>[],\n  name?: string\n) {\n  const withUnknown: ConfigPlugin<SourceConfigType extends ExpoConfig ? void : SourceConfigType> = (\n    config,\n    sourceConfig\n  ) =>\n    withPodfileProperties(config, (config) => {\n      config.modResults = updateIosBuildPropertiesFromConfig(\n        (sourceConfig ?? config) as SourceConfigType,\n        config.modResults,\n        configToPropertyRules\n      );\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * A config-plugin to update `ios/Podfile.properties.json` from the `jsEngine` in expo config\n */\nexport const withJsEnginePodfileProps = createBuildPodfilePropsConfigPlugin<ExpoConfig>(\n  [\n    {\n      propName: 'expo.jsEngine',\n      propValueGetter: (config) => config.ios?.jsEngine ?? config.jsEngine ?? 'jsc',\n    },\n  ],\n  'withJsEnginePodfileProps'\n);\n\nexport function updateIosBuildPropertiesFromConfig<SourceConfigType extends BuildPropertiesConfig>(\n  config: SourceConfigType,\n  podfileProperties: Record<string, string>,\n  configToPropertyRules: ConfigToPropertyRuleType<SourceConfigType>[]\n) {\n  for (const configToProperty of configToPropertyRules) {\n    const value = configToProperty.propValueGetter(config);\n    updateIosBuildProperty(podfileProperties, configToProperty.propName, value);\n  }\n  return podfileProperties;\n}\n\nexport function updateIosBuildProperty(\n  podfileProperties: Record<string, string>,\n  name: string,\n  value: string | null | undefined,\n  options?: { removePropWhenValueIsNull?: boolean }\n) {\n  if (value) {\n    podfileProperties[name] = value;\n  } else if (options?.removePropWhenValueIsNull) {\n    delete podfileProperties[name];\n  }\n  return podfileProperties;\n}\n"]},"metadata":{},"sourceType":"script"}