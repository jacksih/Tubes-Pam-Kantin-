{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidManifestAsync = getAndroidManifestAsync;\nexports.getAppBuildGradleAsync = getAppBuildGradleAsync;\nexports.getAppBuildGradleFilePath = getAppBuildGradleFilePath;\nexports.getFileInfo = getFileInfo;\nexports.getGradleFilePath = getGradleFilePath;\nexports.getMainActivityAsync = getMainActivityAsync;\nexports.getMainApplicationAsync = getMainApplicationAsync;\nexports.getProjectBuildGradleAsync = getProjectBuildGradleAsync;\nexports.getProjectBuildGradleFilePath = getProjectBuildGradleFilePath;\nexports.getProjectFilePath = getProjectFilePath;\nexports.getProjectPathOrThrowAsync = getProjectPathOrThrowAsync;\nexports.getResourceFolderAsync = getResourceFolderAsync;\nexports.getResourceXMLPathAsync = getResourceXMLPathAsync;\nexports.getSettingsGradleAsync = getSettingsGradleAsync;\nexports.getSettingsGradleFilePath = getSettingsGradleFilePath;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _glob() {\n  var data = require(\"glob\");\n  _glob = function _glob() {\n    return data;\n  };\n  return data;\n}\nfunction path() {\n  var data = _interopRequireWildcard(require(\"path\"));\n  path = function path() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n  _modules = function _modules() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getProjectFilePath(projectRoot, name) {\n  var filePath = (0, _glob().sync)(path().join(projectRoot, \"android/app/src/main/java/**/\" + name + \".@(java|kt)\"))[0];\n  (0, _assert().default)(filePath, \"Project file \\\"\" + name + \"\\\" does not exist in android project for root \\\"\" + projectRoot + \"\\\"\");\n  return filePath;\n}\nfunction getLanguage(filePath) {\n  var extension = path().extname(filePath);\n  switch (extension) {\n    case '.java':\n      return 'java';\n    case '.kts':\n    case '.kt':\n      return 'kt';\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n    default:\n      throw new (_errors().UnexpectedError)(\"Unexpected Android file extension: \" + extension);\n  }\n}\nfunction getFileInfo(filePath) {\n  return {\n    path: path().normalize(filePath),\n    contents: _fs().default.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath)\n  };\n}\nfunction getMainApplicationAsync(_x) {\n  return _getMainApplicationAsync.apply(this, arguments);\n}\nfunction _getMainApplicationAsync() {\n  _getMainApplicationAsync = _asyncToGenerator(function* (projectRoot) {\n    var filePath = getProjectFilePath(projectRoot, 'MainApplication');\n    return getFileInfo(filePath);\n  });\n  return _getMainApplicationAsync.apply(this, arguments);\n}\nfunction getMainActivityAsync(_x2) {\n  return _getMainActivityAsync.apply(this, arguments);\n}\nfunction _getMainActivityAsync() {\n  _getMainActivityAsync = _asyncToGenerator(function* (projectRoot) {\n    var filePath = getProjectFilePath(projectRoot, 'MainActivity');\n    return getFileInfo(filePath);\n  });\n  return _getMainActivityAsync.apply(this, arguments);\n}\nfunction getGradleFilePath(projectRoot, gradleName) {\n  var groovyPath = path().resolve(projectRoot, gradleName + \".gradle\");\n  var ktPath = path().resolve(projectRoot, gradleName + \".gradle.kts\");\n  var isGroovy = _fs().default.existsSync(groovyPath);\n  var isKotlin = !isGroovy && _fs().default.existsSync(ktPath);\n  if (!isGroovy && !isKotlin) {\n    throw new Error(\"Failed to find '\" + gradleName + \".gradle' file for project: \" + projectRoot + \".\");\n  }\n  var filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\nfunction getProjectBuildGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android'), 'build');\n}\nfunction getProjectBuildGradleAsync(_x3) {\n  return _getProjectBuildGradleAsync.apply(this, arguments);\n}\nfunction _getProjectBuildGradleAsync() {\n  _getProjectBuildGradleAsync = _asyncToGenerator(function* (projectRoot) {\n    return getFileInfo(getProjectBuildGradleFilePath(projectRoot));\n  });\n  return _getProjectBuildGradleAsync.apply(this, arguments);\n}\nfunction getSettingsGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android'), 'settings');\n}\nfunction getSettingsGradleAsync(_x4) {\n  return _getSettingsGradleAsync.apply(this, arguments);\n}\nfunction _getSettingsGradleAsync() {\n  _getSettingsGradleAsync = _asyncToGenerator(function* (projectRoot) {\n    return getFileInfo(getSettingsGradleFilePath(projectRoot));\n  });\n  return _getSettingsGradleAsync.apply(this, arguments);\n}\nfunction getAppBuildGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android', 'app'), 'build');\n}\nfunction getAppBuildGradleAsync(_x5) {\n  return _getAppBuildGradleAsync.apply(this, arguments);\n}\nfunction _getAppBuildGradleAsync() {\n  _getAppBuildGradleAsync = _asyncToGenerator(function* (projectRoot) {\n    return getFileInfo(getAppBuildGradleFilePath(projectRoot));\n  });\n  return _getAppBuildGradleAsync.apply(this, arguments);\n}\nfunction getProjectPathOrThrowAsync(_x6) {\n  return _getProjectPathOrThrowAsync.apply(this, arguments);\n}\nfunction _getProjectPathOrThrowAsync() {\n  _getProjectPathOrThrowAsync = _asyncToGenerator(function* (projectRoot) {\n    var projectPath = path().join(projectRoot, 'android');\n    if (yield (0, _modules().directoryExistsAsync)(projectPath)) {\n      return projectPath;\n    }\n    throw new Error(\"Android project folder is missing in project: \" + projectRoot);\n  });\n  return _getProjectPathOrThrowAsync.apply(this, arguments);\n}\nfunction getAndroidManifestAsync(_x7) {\n  return _getAndroidManifestAsync.apply(this, arguments);\n}\nfunction _getAndroidManifestAsync() {\n  _getAndroidManifestAsync = _asyncToGenerator(function* (projectRoot) {\n    var projectPath = yield getProjectPathOrThrowAsync(projectRoot);\n    var filePath = path().join(projectPath, 'app/src/main/AndroidManifest.xml');\n    return filePath;\n  });\n  return _getAndroidManifestAsync.apply(this, arguments);\n}\nfunction getResourceFolderAsync(_x8) {\n  return _getResourceFolderAsync.apply(this, arguments);\n}\nfunction _getResourceFolderAsync() {\n  _getResourceFolderAsync = _asyncToGenerator(function* (projectRoot) {\n    var projectPath = yield getProjectPathOrThrowAsync(projectRoot);\n    return path().join(projectPath, \"app/src/main/res\");\n  });\n  return _getResourceFolderAsync.apply(this, arguments);\n}\nfunction getResourceXMLPathAsync(_x9, _x10) {\n  return _getResourceXMLPathAsync.apply(this, arguments);\n}\nfunction _getResourceXMLPathAsync() {\n  _getResourceXMLPathAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var _ref$kind = _ref.kind,\n      kind = _ref$kind === void 0 ? 'values' : _ref$kind,\n      name = _ref.name;\n    var resourcePath = yield getResourceFolderAsync(projectRoot);\n    var filePath = path().join(resourcePath, kind + \"/\" + name + \".xml\");\n    return filePath;\n  });\n  return _getResourceXMLPathAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/android/Paths.ts"],"names":["getProjectFilePath","projectRoot","name","filePath","path","join","getLanguage","extension","extname","UnexpectedError","getFileInfo","normalize","contents","fs","readFileSync","language","getMainApplicationAsync","getMainActivityAsync","getGradleFilePath","gradleName","groovyPath","resolve","ktPath","isGroovy","existsSync","isKotlin","Error","getProjectBuildGradleFilePath","getProjectBuildGradleAsync","getSettingsGradleFilePath","getSettingsGradleAsync","getAppBuildGradleFilePath","getAppBuildGradleAsync","getProjectPathOrThrowAsync","projectPath","getAndroidManifestAsync","getResourceFolderAsync","getResourceXMLPathAsync","kind","resourcePath"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,IAAA,GAAA;EAAA,IAAA,IAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;EAAA,IAAA,GAAA,gBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAEA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,QAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;EAAA,QAAA,GAAA,oBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYO,SAASA,kBAAT,CAA4BC,WAA5B,EAAiDC,IAAjD,EAAuE;EAC5E,IAAMC,QAAQ,GAAG,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,IAAA,EACfC,IAAI,EAAA,CAACC,IAALD,CAAUH,WAAVG,oCAAuDF,IAAvDE,iBADe,CAAA,CAEf,CAFe,CAAjB;EAGA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA,OAAA,EACED,QADF,sBAEmBD,IAAK,wDAAgDD,WAFxE,QAAA;EAKA,OAAOE,QAAP;AACD;AAED,SAASG,WAAT,CAAqBH,QAArB,EAAiE;EAC/D,IAAMI,SAAS,GAAGH,IAAI,EAAA,CAACI,OAALJ,CAAaD,QAAbC,CAAlB;EACA,QAAQG,SAAR;IACE,KAAK,OAAL;MACE,OAAO,MAAP;IACF,KAAK,MAAL;IACA,KAAK,KAAL;MACE,OAAO,IAAP;IACF,KAAK,SAAL;IACA,KAAK,SAAL;MACE,OAAO,QAAP;IACF;MACE,MAAM,KAAIE,OAAAA,EAAAA,CAAAA,eAAJ,0CAA0DF,SAA1D,CAAN;EAAA;AAEL;AAEM,SAASG,WAAT,CAAqBP,QAArB,EAAuC;EAC5C,OAAO;IACLC,IAAI,EAAEA,IAAI,EAAA,CAACO,SAALP,CAAeD,QAAfC,CADD;IAELQ,QAAQ,EAAEC,GAAAA,EAAAA,CAAAA,OAAAA,CAAGC,YAAHD,CAAgBV,QAAhBU,EAA0B,MAA1BA,CAFL;IAGLE,QAAQ,EAAET,WAAW,CAACH,QAAD;EAHhB,CAAP;AAKD;AAAA,SAEqBa,uBAAf;EAAA;AAAA;AAAA;EAAA,6CAAA,WACLf,WADK,EAE4B;IACjC,IAAME,QAAQ,GAAGH,kBAAkB,CAACC,WAAD,EAAc,iBAAd,CAAnC;IACA,OAAOS,WAAW,CAACP,QAAD,CAAlB;EACD,CAAA;EAAA;AAAA;AAAA,SAEqBc,oBAAf;EAAA;AAAA;AAAA;EAAA,0CAAA,WAAoChB,WAApC,EAA0F;IAC/F,IAAME,QAAQ,GAAGH,kBAAkB,CAACC,WAAD,EAAc,cAAd,CAAnC;IACA,OAAOS,WAAW,CAACP,QAAD,CAAlB;EACD,CAAA;EAAA;AAAA;AAEM,SAASe,iBAAT,CAA2BjB,WAA3B,EAAgDkB,UAAhD,EAA4E;EACjF,IAAMC,UAAU,GAAGhB,IAAI,EAAA,CAACiB,OAALjB,CAAaH,WAAbG,EAA6Be,UAA7Bf,aAAnB;EACA,IAAMkB,MAAM,GAAGlB,IAAI,EAAA,CAACiB,OAALjB,CAAaH,WAAbG,EAA6Be,UAA7Bf,iBAAf;EAEA,IAAMmB,QAAQ,GAAGV,GAAAA,EAAAA,CAAAA,OAAAA,CAAGW,UAAHX,CAAcO,UAAdP,CAAjB;EACA,IAAMY,QAAQ,GAAG,CAACF,QAAD,IAAaV,GAAAA,EAAAA,CAAAA,OAAAA,CAAGW,UAAHX,CAAcS,MAAdT,CAA9B;EAEA,IAAI,CAACU,QAAD,IAAa,CAACE,QAAlB,EAA4B;IAC1B,MAAM,IAAIC,KAAJ,sBAA6BP,UAAW,mCAA6BlB,WAArE,OAAN;EACD;EACD,IAAME,QAAQ,GAAGoB,QAAQ,GAAGH,UAAH,GAAgBE,MAAzC;EACA,OAAOnB,QAAP;AACD;AAEM,SAASwB,6BAAT,CAAuC1B,WAAvC,EAAoE;EACzE,OAAOiB,iBAAiB,CAACd,IAAI,EAAA,CAACC,IAALD,CAAUH,WAAVG,EAAuB,SAAvBA,CAAD,EAAoC,OAApC,CAAxB;AACD;AAAA,SAEqBwB,0BAAf;EAAA;AAAA;AAAA;EAAA,gDAAA,WAA0C3B,WAA1C,EAA2F;IAChG,OAAOS,WAAW,CAACiB,6BAA6B,CAAC1B,WAAD,CAA9B,CAAlB;EACD,CAAA;EAAA;AAAA;AAEM,SAAS4B,yBAAT,CAAmC5B,WAAnC,EAAgE;EACrE,OAAOiB,iBAAiB,CAACd,IAAI,EAAA,CAACC,IAALD,CAAUH,WAAVG,EAAuB,SAAvBA,CAAD,EAAoC,UAApC,CAAxB;AACD;AAAA,SAEqB0B,sBAAf;EAAA;AAAA;AAAA;EAAA,4CAAA,WAAsC7B,WAAtC,EAAuF;IAC5F,OAAOS,WAAW,CAACmB,yBAAyB,CAAC5B,WAAD,CAA1B,CAAlB;EACD,CAAA;EAAA;AAAA;AAEM,SAAS8B,yBAAT,CAAmC9B,WAAnC,EAAgE;EACrE,OAAOiB,iBAAiB,CAACd,IAAI,EAAA,CAACC,IAALD,CAAUH,WAAVG,EAAuB,SAAvBA,EAAkC,KAAlCA,CAAD,EAA2C,OAA3C,CAAxB;AACD;AAAA,SAEqB4B,sBAAf;EAAA;AAAA;AAAA;EAAA,4CAAA,WAAsC/B,WAAtC,EAAuF;IAC5F,OAAOS,WAAW,CAACqB,yBAAyB,CAAC9B,WAAD,CAA1B,CAAlB;EACD,CAAA;EAAA;AAAA;AAAA,SAEqBgC,0BAAf;EAAA;AAAA;AAAA;EAAA,gDAAA,WAA0ChC,WAA1C,EAAgF;IACrF,IAAMiC,WAAW,GAAG9B,IAAI,EAAA,CAACC,IAALD,CAAUH,WAAVG,EAAuB,SAAvBA,CAApB;IACA,UAAU,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA,oBAAA,EAAqB8B,WAArB,CAAV,EAA6C;MAC3C,OAAOA,WAAP;IACD;IACD,MAAM,IAAIR,KAAJ,oDAA2DzB,WAA3D,CAAN;EACD,CAAA;EAAA;AAAA;AAAA,SAEqBkC,uBAAf;EAAA;AAAA;AAAA;EAAA,6CAAA,WAAuClC,WAAvC,EAA6E;IAClF,IAAMiC,WAAW,SAASD,0BAA0B,CAAChC,WAAD,CAApD;IACA,IAAME,QAAQ,GAAGC,IAAI,EAAA,CAACC,IAALD,CAAU8B,WAAV9B,EAAuB,kCAAvBA,CAAjB;IACA,OAAOD,QAAP;EACD,CAAA;EAAA;AAAA;AAAA,SAEqBiC,sBAAf;EAAA;AAAA;AAAA;EAAA,4CAAA,WAAsCnC,WAAtC,EAA4E;IACjF,IAAMiC,WAAW,SAASD,0BAA0B,CAAChC,WAAD,CAApD;IACA,OAAOG,IAAI,EAAA,CAACC,IAALD,CAAU8B,WAAV9B,qBAAP;EACD,CAAA;EAAA;AAAA;AAAA,SAEqBiC,uBAAf;EAAA;AAAA;AAAA;EAAA,6CAAA,WACLpC,WADK,QAGY;IAAA,qBADfqC,IAAI;MAAJA,IAAI,0BAAG,QAAT;MAAmBpC,IAAAA,QAAAA,IAAAA;IAEnB,IAAMqC,YAAY,SAASH,sBAAsB,CAACnC,WAAD,CAAjD;IAEA,IAAME,QAAQ,GAAGC,IAAI,EAAA,CAACC,IAALD,CAAUmC,YAAVnC,EAA2BkC,IAAK,SAAGpC,IAAnCE,UAAjB;IACA,OAAOD,QAAP;EACD,CAAA;EAAA;AAAA","sourcesContent":["import assert from 'assert';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport { UnexpectedError } from '../utils/errors';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { ResourceKind } from './Resources';\n\nexport interface ProjectFile<L extends string = string> {\n  path: string;\n  language: L;\n  contents: string;\n}\n\nexport type ApplicationProjectFile = ProjectFile<'java' | 'kt'>;\nexport type GradleProjectFile = ProjectFile<'groovy' | 'kt'>;\n\nexport function getProjectFilePath(projectRoot: string, name: string): string {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/main/java/**/${name}.@(java|kt)`)\n  )[0];\n  assert(\n    filePath,\n    `Project file \"${name}\" does not exist in android project for root \"${projectRoot}\"`\n  );\n\n  return filePath;\n}\n\nfunction getLanguage(filePath: string): 'java' | 'groovy' | 'kt' {\n  const extension = path.extname(filePath);\n  switch (extension) {\n    case '.java':\n      return 'java';\n    case '.kts':\n    case '.kt':\n      return 'kt';\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n    default:\n      throw new UnexpectedError(`Unexpected Android file extension: ${extension}`);\n  }\n}\n\nexport function getFileInfo(filePath: string) {\n  return {\n    path: path.normalize(filePath),\n    contents: fs.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath) as any,\n  };\n}\n\nexport async function getMainApplicationAsync(\n  projectRoot: string\n): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainApplication');\n  return getFileInfo(filePath);\n}\n\nexport async function getMainActivityAsync(projectRoot: string): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainActivity');\n  return getFileInfo(filePath);\n}\n\nexport function getGradleFilePath(projectRoot: string, gradleName: string): string {\n  const groovyPath = path.resolve(projectRoot, `${gradleName}.gradle`);\n  const ktPath = path.resolve(projectRoot, `${gradleName}.gradle.kts`);\n\n  const isGroovy = fs.existsSync(groovyPath);\n  const isKotlin = !isGroovy && fs.existsSync(ktPath);\n\n  if (!isGroovy && !isKotlin) {\n    throw new Error(`Failed to find '${gradleName}.gradle' file for project: ${projectRoot}.`);\n  }\n  const filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\n\nexport function getProjectBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'build');\n}\n\nexport async function getProjectBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getProjectBuildGradleFilePath(projectRoot));\n}\n\nexport function getSettingsGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'settings');\n}\n\nexport async function getSettingsGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getSettingsGradleFilePath(projectRoot));\n}\n\nexport function getAppBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android', 'app'), 'build');\n}\n\nexport async function getAppBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getAppBuildGradleFilePath(projectRoot));\n}\n\nexport async function getProjectPathOrThrowAsync(projectRoot: string): Promise<string> {\n  const projectPath = path.join(projectRoot, 'android');\n  if (await directoryExistsAsync(projectPath)) {\n    return projectPath;\n  }\n  throw new Error(`Android project folder is missing in project: ${projectRoot}`);\n}\n\nexport async function getAndroidManifestAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  const filePath = path.join(projectPath, 'app/src/main/AndroidManifest.xml');\n  return filePath;\n}\n\nexport async function getResourceFolderAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  return path.join(projectPath, `app/src/main/res`);\n}\n\nexport async function getResourceXMLPathAsync(\n  projectRoot: string,\n  { kind = 'values', name }: { kind?: ResourceKind; name: 'colors' | 'strings' | 'styles' | string }\n): Promise<string> {\n  const resourcePath = await getResourceFolderAsync(projectRoot);\n\n  const filePath = path.join(resourcePath, `${kind}/${name}.xml`);\n  return filePath;\n}\n"]},"metadata":{},"sourceType":"script"}