{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBareExtensions = getBareExtensions;\nexports.getExtensions = getExtensions;\nexports.getLanguageExtensionsInOrder = getLanguageExtensionsInOrder;\nexports.getManagedExtensions = getManagedExtensions;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getExtensions(platforms, extensions, workflows) {\n  (0, _assert().default)(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  (0, _assert().default)(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  (0, _assert().default)(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n  var fileExtensions = [];\n  for (var workflow of [].concat(_toConsumableArray(workflows), [''])) {\n    for (var platform of [].concat(_toConsumableArray(platforms), [''])) {\n      for (var extension of extensions) {\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n  return fileExtensions;\n}\nfunction getLanguageExtensionsInOrder(_ref) {\n  var isTS = _ref.isTS,\n    isModern = _ref.isModern,\n    isReact = _ref.isReact;\n  var addLanguage = function addLanguage(lang) {\n    return [lang, isReact && lang + \"x\"].filter(Boolean);\n  };\n  var extensions = addLanguage('js');\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [].concat(_toConsumableArray(addLanguage('ts')), _toConsumableArray(extensions));\n  }\n  return extensions;\n}\nfunction getManagedExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), ['expo']);\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\nfunction getBareExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), []);\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\nfunction _addMiscellaneousExtensions(platforms, fileExtensions) {\n  fileExtensions.push('json');\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}","map":{"version":3,"sources":["../../src/paths/extensions.ts"],"names":["getExtensions","platforms","extensions","workflows","Array","isArray","fileExtensions","workflow","platform","extension","push","filter","Boolean","join","getLanguageExtensionsInOrder","isTS","isModern","isReact","addLanguage","lang","unshift","getManagedExtensions","languageOptions","_addMiscellaneousExtensions","getBareExtensions","includes"],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nexport type LanguageOptions = {\n  isTS: boolean;\n  isModern: boolean;\n  isReact: boolean;\n};\n\nexport function getExtensions(\n  platforms: string[],\n  extensions: string[],\n  workflows: string[]\n): string[] {\n  // In the past we used spread operators to collect the values so now we enforce type safety on them.\n  assert(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  assert(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  assert(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n\n  const fileExtensions = [];\n  // support .expo files\n  for (const workflow of [...workflows, '']) {\n    // Ensure order is correct: [platformA.js, platformB.js, js]\n    for (const platform of [...platforms, '']) {\n      // Support both TypeScript and JavaScript\n      for (const extension of extensions) {\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n  return fileExtensions;\n}\n\nexport function getLanguageExtensionsInOrder({\n  isTS,\n  isModern,\n  isReact,\n}: LanguageOptions): string[] {\n  // @ts-ignore: filter removes false type\n  const addLanguage = (lang: string): string[] => [lang, isReact && `${lang}x`].filter(Boolean);\n\n  // Support JavaScript\n  let extensions = addLanguage('js');\n\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [...addLanguage('ts'), ...extensions];\n  }\n\n  return extensions;\n}\n\nexport function getManagedExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), [\n    'expo',\n  ]);\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nexport function getBareExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(\n    platforms,\n    getLanguageExtensionsInOrder(languageOptions),\n    []\n  );\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nfunction _addMiscellaneousExtensions(platforms: string[], fileExtensions: string[]): string[] {\n  // Always add these with no platform extension\n  // In the future we may want to add platform and workspace extensions to json.\n  fileExtensions.push('json');\n  // Native doesn't currently support web assembly.\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}\n"]},"metadata":{},"sourceType":"script"}