{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBundleIdentifier = getBundleIdentifier;\nexports.getBundleIdentifierFromPbxproj = getBundleIdentifierFromPbxproj;\nexports.resetAllPlistBundleIdentifiers = resetAllPlistBundleIdentifiers;\nexports.resetPlistBundleIdentifier = resetPlistBundleIdentifier;\nexports.setBundleIdentifier = setBundleIdentifier;\nexports.setBundleIdentifierForPbxproj = setBundleIdentifierForPbxproj;\nexports.updateBundleIdentifierForPbxproj = updateBundleIdentifierForPbxproj;\nexports.withBundleIdentifier = void 0;\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n  _plist = function _plist() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n  _xcode = function _xcode() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _Target() {\n  var data = require(\"./Target\");\n  _Target = function _Target() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _string() {\n  var data = require(\"./utils/string\");\n  _string = function _string() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withBundleIdentifier = function withBundleIdentifier(config, _ref) {\n  var bundleIdentifier = _ref.bundleIdentifier;\n  return (0, _withDangerousMod().withDangerousMod)(config, ['ios', function () {\n    var _ref2 = _asyncToGenerator(function* (config) {\n      var _config$ios;\n      var bundleId = bundleIdentifier !== null && bundleIdentifier !== void 0 ? bundleIdentifier : (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.bundleIdentifier;\n      (0, _assert().default)(bundleId, '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.');\n      yield setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId);\n      return config;\n    });\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withBundleIdentifier = withBundleIdentifier;\nfunction getBundleIdentifier(config) {\n  var _config$ios$bundleIde, _config$ios2;\n  return (_config$ios$bundleIde = (_config$ios2 = config.ios) === null || _config$ios2 === void 0 ? void 0 : _config$ios2.bundleIdentifier) !== null && _config$ios$bundleIde !== void 0 ? _config$ios$bundleIde : null;\n}\nfunction setBundleIdentifier(config, infoPlist) {\n  var bundleIdentifier = getBundleIdentifier(config);\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n  return Object.assign({}, infoPlist, {\n    CFBundleIdentifier: bundleIdentifier\n  });\n}\nfunction getBundleIdentifierFromPbxproj(projectRoot) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    targetName = _ref3.targetName,\n    _ref3$buildConfigurat = _ref3.buildConfiguration,\n    buildConfiguration = _ref3$buildConfigurat === void 0 ? 'Release' : _ref3$buildConfigurat;\n  var pbxprojPath;\n  try {\n    pbxprojPath = (0, _Paths().getPBXProjectPath)(projectRoot);\n  } catch (_unused) {\n    return null;\n  }\n  var project = _xcode().default.project(pbxprojPath);\n  project.parseSync();\n  var xcBuildConfiguration = (0, _Target().getXCBuildConfigurationFromPbxproj)(project, {\n    targetName: targetName,\n    buildConfiguration: buildConfiguration\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\nfunction getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration) {\n  var bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n  if (bundleIdentifierRaw) {\n    var bundleIdentifier = (0, _string().trimQuotes)(bundleIdentifierRaw);\n    var bundleIdentifierParts = bundleIdentifier.split('.');\n    if (bundleIdentifierParts[bundleIdentifierParts.length - 1] === '$(PRODUCT_NAME:rfc1034identifier)' && xcBuildConfiguration.buildSettings.PRODUCT_NAME) {\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] = xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\nfunction updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier) {\n  var updateProductName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var project = _xcode().default.project(pbxprojPath);\n  project.parseSync();\n  var _ref4 = (0, _Target().findFirstNativeTarget)(project),\n    _ref5 = _slicedToArray(_ref4, 2),\n    nativeTarget = _ref5[1];\n  (0, _Xcodeproj().getBuildConfigurationsForListId)(project, nativeTarget.buildConfigurationList).forEach(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      item = _ref7[1];\n    if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n      return;\n    }\n    item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = \"\\\"\" + bundleIdentifier + \"\\\"\";\n    if (updateProductName) {\n      var productName = bundleIdentifier.split('.').pop();\n      if (!(productName !== null && productName !== void 0 && productName.includes('$'))) {\n        item.buildSettings.PRODUCT_NAME = productName;\n      }\n    }\n  });\n  _fs().default.writeFileSync(pbxprojPath, project.writeSync());\n}\nfunction setBundleIdentifierForPbxproj(projectRoot, bundleIdentifier) {\n  var updateProductName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var pbxprojPaths = [];\n  try {\n    pbxprojPaths = (0, _Paths().getAllPBXProjectPaths)(projectRoot);\n  } catch (_unused2) {}\n  for (var pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\nvar defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\nfunction resetAllPlistBundleIdentifiers(projectRoot) {\n  var infoPlistPaths = (0, _Paths().getAllInfoPlistPaths)(projectRoot);\n  for (var plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\nfunction resetPlistBundleIdentifier(plistPath) {\n  var rawPlist = _fs().default.readFileSync(plistPath, 'utf8');\n  var plistObject = _plist().default.parse(rawPlist);\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n    var format = {\n      pretty: true,\n      indent: \"\\t\"\n    };\n    var xml = _plist().default.build(Object.assign({}, plistObject, {\n      CFBundleIdentifier: defaultBundleId\n    }), format);\n    if (xml !== rawPlist) {\n      _fs().default.writeFileSync(plistPath, xml);\n    }\n  }\n}","map":{"version":3,"sources":["../../src/ios/BundleIdentifier.ts"],"names":["withBundleIdentifier","config","bundleIdentifier","bundleId","ios","setBundleIdentifierForPbxproj","modRequest","projectRoot","getBundleIdentifier","setBundleIdentifier","infoPlist","CFBundleIdentifier","getBundleIdentifierFromPbxproj","targetName","buildConfiguration","pbxprojPath","project","xcode","parseSync","xcBuildConfiguration","getProductBundleIdentifierFromBuildConfiguration","bundleIdentifierRaw","buildSettings","PRODUCT_BUNDLE_IDENTIFIER","bundleIdentifierParts","split","length","PRODUCT_NAME","replace","join","updateBundleIdentifierForPbxproj","updateProductName","nativeTarget","buildConfigurationList","forEach","item","productName","pop","includes","fs","writeFileSync","writeSync","pbxprojPaths","defaultBundleId","resetAllPlistBundleIdentifiers","infoPlistPaths","plistPath","resetPlistBundleIdentifier","rawPlist","readFileSync","plistObject","plist","parse","format","pretty","indent","xml","build"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist, { PlistObject } from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport xcode, { XCBuildConfiguration } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { InfoPlist } from './IosConfig.types';\nimport { getAllInfoPlistPaths, getAllPBXProjectPaths, getPBXProjectPath } from './Paths';\nimport { findFirstNativeTarget, getXCBuildConfigurationFromPbxproj } from './Target';\nimport { ConfigurationSectionEntry, getBuildConfigurationsForListId } from './utils/Xcodeproj';\nimport { trimQuotes } from './utils/string';\n\nexport const withBundleIdentifier: ConfigPlugin<{ bundleIdentifier?: string }> = (\n  config,\n  { bundleIdentifier }\n) => {\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      const bundleId = bundleIdentifier ?? config.ios?.bundleIdentifier;\n      assert(\n        bundleId,\n        '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.'\n      );\n      await setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId!);\n      return config;\n    },\n  ]);\n};\n\nfunction getBundleIdentifier(config: Pick<ExpoConfig, 'ios'>): string | null {\n  return config.ios?.bundleIdentifier ?? null;\n}\n\n/**\n * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather\n * than in pbxproj\n */\nfunction setBundleIdentifier(config: ExpoConfig, infoPlist: InfoPlist): InfoPlist {\n  const bundleIdentifier = getBundleIdentifier(config);\n\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleIdentifier: bundleIdentifier,\n  };\n}\n\n/**\n * Gets the bundle identifier defined in the Xcode project found in the project directory.\n *\n * A bundle identifier is stored as a value in XCBuildConfiguration entry.\n * Those entries exist for every pair (build target, build configuration).\n * Unless target name is passed, the first target defined in the pbxproj is used\n * (to keep compatibility with the inaccurate legacy implementation of this function).\n * The build configuration is usually 'Release' or 'Debug'. However, it could be any arbitrary string.\n * Defaults to 'Release'.\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} targetName Target name\n * @param {string} buildConfiguration Build configuration. Defaults to 'Release'.\n * @returns {string | null} bundle identifier of the Xcode project or null if the project is not configured\n */\nfunction getBundleIdentifierFromPbxproj(\n  projectRoot: string,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): string | null {\n  let pbxprojPath: string;\n  try {\n    pbxprojPath = getPBXProjectPath(projectRoot);\n  } catch {\n    return null;\n  }\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const xcBuildConfiguration = getXCBuildConfigurationFromPbxproj(project, {\n    targetName,\n    buildConfiguration,\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\n\nfunction getProductBundleIdentifierFromBuildConfiguration(\n  xcBuildConfiguration: XCBuildConfiguration\n): string | null {\n  const bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n  if (bundleIdentifierRaw) {\n    const bundleIdentifier = trimQuotes(bundleIdentifierRaw);\n    // it's possible to use interpolation for the bundle identifier\n    // the most common case is when the last part of the id is set to `$(PRODUCT_NAME:rfc1034identifier)`\n    // in this case, PRODUCT_NAME should be replaced with its value\n    // the `rfc1034identifier` modifier replaces all non-alphanumeric characters with dashes\n    const bundleIdentifierParts = bundleIdentifier.split('.');\n    if (\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] ===\n        '$(PRODUCT_NAME:rfc1034identifier)' &&\n      xcBuildConfiguration.buildSettings.PRODUCT_NAME\n    ) {\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] =\n        xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Updates the bundle identifier for a given pbxproj\n *\n * @param {string} pbxprojPath Path to pbxproj file\n * @param {string} bundleIdentifier Bundle identifier to set in the pbxproj\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction updateBundleIdentifierForPbxproj(\n  pbxprojPath: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const [, nativeTarget] = findFirstNativeTarget(project);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).forEach(\n    ([, item]: ConfigurationSectionEntry) => {\n      if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n        return;\n      }\n\n      item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `\"${bundleIdentifier}\"`;\n\n      if (updateProductName) {\n        const productName = bundleIdentifier.split('.').pop();\n        if (!productName?.includes('$')) {\n          item.buildSettings.PRODUCT_NAME = productName;\n        }\n      }\n    }\n  );\n  fs.writeFileSync(pbxprojPath, project.writeSync());\n}\n\n/**\n * Updates the bundle identifier for pbx projects inside the ios directory of the given project root\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} bundleIdentifier Desired bundle identifier\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction setBundleIdentifierForPbxproj(\n  projectRoot: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  // Get all pbx projects in the ${projectRoot}/ios directory\n  let pbxprojPaths: string[] = [];\n  try {\n    pbxprojPaths = getAllPBXProjectPaths(projectRoot);\n  } catch {}\n\n  for (const pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\n\n/**\n * Reset bundle identifier field in Info.plist to use PRODUCT_BUNDLE_IDENTIFIER, as recommended by Apple.\n */\n\nconst defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\n\nfunction resetAllPlistBundleIdentifiers(projectRoot: string): void {\n  const infoPlistPaths = getAllInfoPlistPaths(projectRoot);\n\n  for (const plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\n\nfunction resetPlistBundleIdentifier(plistPath: string): void {\n  const rawPlist = fs.readFileSync(plistPath, 'utf8');\n  const plistObject = plist.parse(rawPlist) as PlistObject;\n\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n\n    // attempt to match default Info.plist format\n    const format = { pretty: true, indent: `\\t` };\n\n    const xml = plist.build(\n      {\n        ...plistObject,\n        CFBundleIdentifier: defaultBundleId,\n      },\n      format\n    );\n\n    if (xml !== rawPlist) {\n      fs.writeFileSync(plistPath, xml);\n    }\n  }\n}\n\nexport {\n  getBundleIdentifier,\n  setBundleIdentifier,\n  getBundleIdentifierFromPbxproj,\n  updateBundleIdentifierForPbxproj,\n  setBundleIdentifierForPbxproj,\n  resetAllPlistBundleIdentifiers,\n  resetPlistBundleIdentifier,\n};\n"]},"metadata":{},"sourceType":"script"}