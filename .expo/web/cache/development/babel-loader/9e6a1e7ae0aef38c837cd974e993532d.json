{"ast":null,"code":"var Range = require('../classes/range.js');\nvar _require = require('../classes/comparator.js'),\n  ANY = _require.ANY;\nvar satisfies = require('../functions/satisfies.js');\nvar compare = require('../functions/compare.js');\nvar subset = function subset(sub, dom, options) {\n  sub = new Range(sub, options);\n  dom = new Range(dom, options);\n  var sawNonNull = false;\n  OUTER: for (var simpleSub of sub.set) {\n    for (var simpleDom of dom.set) {\n      var isSub = simpleSubset(simpleSub, simpleDom, options);\n      sawNonNull = sawNonNull || isSub !== null;\n      if (isSub) continue OUTER;\n    }\n    if (sawNonNull) return false;\n  }\n  return true;\n};\nvar simpleSubset = function simpleSubset(sub, dom, options) {\n  if (sub.length === 1 && sub[0].semver === ANY) return dom.length === 1 && dom[0].semver === ANY;\n  var eqSet = new Set();\n  var gt, lt;\n  for (var c of sub) {\n    if (c.operator === '>' || c.operator === '>=') gt = higherGT(gt, c, options);else if (c.operator === '<' || c.operator === '<=') lt = lowerLT(lt, c, options);else eqSet.add(c.semver);\n  }\n  if (eqSet.size > 1) return null;\n  var gtltComp;\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options);\n    if (gtltComp > 0) return null;else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) return null;\n  }\n  for (var eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) return null;\n    if (lt && !satisfies(eq, String(lt), options)) return null;\n    for (var _c of dom) {\n      if (!satisfies(eq, String(_c), options)) return false;\n    }\n    return true;\n  }\n  var higher, lower;\n  var hasDomLT, hasDomGT;\n  for (var _c2 of dom) {\n    hasDomGT = hasDomGT || _c2.operator === '>' || _c2.operator === '>=';\n    hasDomLT = hasDomLT || _c2.operator === '<' || _c2.operator === '<=';\n    if (gt) {\n      if (_c2.operator === '>' || _c2.operator === '>=') {\n        higher = higherGT(gt, _c2, options);\n        if (higher === _c2) return false;\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(_c2), options)) return false;\n    }\n    if (lt) {\n      if (_c2.operator === '<' || _c2.operator === '<=') {\n        lower = lowerLT(lt, _c2, options);\n        if (lower === _c2) return false;\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(_c2), options)) return false;\n    }\n    if (!_c2.operator && (lt || gt) && gtltComp !== 0) return false;\n  }\n  if (gt && hasDomLT && !lt && gtltComp !== 0) return false;\n  if (lt && hasDomGT && !gt && gtltComp !== 0) return false;\n  return true;\n};\nvar higherGT = function higherGT(a, b, options) {\n  if (!a) return b;\n  var comp = compare(a.semver, b.semver, options);\n  return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;\n};\nvar lowerLT = function lowerLT(a, b, options) {\n  if (!a) return b;\n  var comp = compare(a.semver, b.semver, options);\n  return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;\n};\nmodule.exports = subset;","map":{"version":3,"names":["Range","require","ANY","satisfies","compare","subset","sub","dom","options","sawNonNull","OUTER","simpleSub","set","simpleDom","isSub","simpleSubset","length","semver","eqSet","Set","gt","lt","c","operator","higherGT","lowerLT","add","size","gtltComp","eq","String","higher","lower","hasDomLT","hasDomGT","a","b","comp","module","exports"],"sources":["D:/Node Js/Latihan/clone/Tubes-Pam-Kantin-/node_modules/@expo/config/node_modules/semver/ranges/subset.js"],"sourcesContent":["const Range = require('../classes/range.js')\nconst { ANY } = require('../classes/comparator.js')\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a subset of some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else return false\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n// - If LT\n//   - If LT.semver is greater than that of any > comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n// - If any C is a = range, and GT or LT are set, return false\n// - Else return true\n\nconst subset = (sub, dom, options) => {\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub)\n        continue OUTER\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull)\n      return false\n  }\n  return true\n}\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub.length === 1 && sub[0].semver === ANY)\n    return dom.length === 1 && dom[0].semver === ANY\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=')\n      gt = higherGT(gt, c, options)\n    else if (c.operator === '<' || c.operator === '<=')\n      lt = lowerLT(lt, c, options)\n    else\n      eqSet.add(c.semver)\n  }\n\n  if (eqSet.size > 1)\n    return null\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0)\n      return null\n    else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<='))\n      return null\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options))\n      return null\n\n    if (lt && !satisfies(eq, String(lt), options))\n      return null\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options))\n        return false\n    }\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c)\n          return false\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options))\n        return false\n    }\n    if (lt) {\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c)\n          return false\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options))\n        return false\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0)\n      return false\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0)\n    return false\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0)\n    return false\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a)\n    return b\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a)\n    return b\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}