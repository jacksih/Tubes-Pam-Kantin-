{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"ITSAppUsesNonExemptEncryption\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUsesNonExemptEncryption = getUsesNonExemptEncryption;\nexports.setUsesNonExemptEncryption = setUsesNonExemptEncryption;\nexports.withUsesNonExemptEncryption = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nvar withUsesNonExemptEncryption = (0, _iosPlugins().createInfoPlistPluginWithPropertyGuard)(setUsesNonExemptEncryption, {\n  infoPlistProperty: 'ITSAppUsesNonExemptEncryption',\n  expoConfigProperty: 'ios.config.usesNonExemptEncryption'\n}, 'withUsesNonExemptEncryption');\nexports.withUsesNonExemptEncryption = withUsesNonExemptEncryption;\nfunction getUsesNonExemptEncryption(config) {\n  var _config$ios$config$us, _config$ios, _config$ios$config;\n  return (_config$ios$config$us = config === null || config === void 0 ? void 0 : (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : _config$ios$config.usesNonExemptEncryption) !== null && _config$ios$config$us !== void 0 ? _config$ios$config$us : null;\n}\nfunction setUsesNonExemptEncryption(config, _ref) {\n  var ITSAppUsesNonExemptEncryption = _ref.ITSAppUsesNonExemptEncryption,\n    infoPlist = _objectWithoutProperties(_ref, _excluded);\n  var usesNonExemptEncryption = getUsesNonExemptEncryption(config);\n  if (usesNonExemptEncryption === null) {\n    return infoPlist;\n  }\n  return Object.assign({}, infoPlist, {\n    ITSAppUsesNonExemptEncryption: usesNonExemptEncryption\n  });\n}","map":{"version":3,"sources":["../../src/ios/UsesNonExemptEncryption.ts"],"names":["withUsesNonExemptEncryption","setUsesNonExemptEncryption","infoPlistProperty","expoConfigProperty","getUsesNonExemptEncryption","config","ios","usesNonExemptEncryption","ITSAppUsesNonExemptEncryption","infoPlist"],"mappings":";;;;;;;;;;AAEA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;EAAA,WAAA,GAAA,uBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAGO,IAAMA,2BAA2B,GAAG,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,sCAAA,EACzCC,0BADyC,EAEzC;EACEC,iBAAiB,EAAE,+BADrB;EAEEC,kBAAkB,EAAE;AAFtB,CAFyC,EAMzC,6BANyC,CAApC;;AASA,SAASC,0BAAT,CAAoCC,MAApC,EAAqE;EAAA,IAAA,qBAAA,EAAA,WAAA,EAAA,kBAAA;EAC1E,OAAA,CAAA,qBAAA,GAAOA,MAAP,KAAA,IAAA,IAAOA,MAAP,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,WAAA,GAAOA,MAAM,CAAEC,GAAf,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,kBAAA,GAAOD,WAAAA,CAAaA,MAApB,MAAA,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,kBAAAA,CAAqBE,uBAA5B,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAuD,IAAvD;AACD;AAEM,SAASN,0BAAT,CACLI,MADK,QAGM;EAAA,IADTG,6BAAF,QAAEA,6BAAF;IAAoCC,SAAAA;EAEpC,IAAMF,uBAAuB,GAAGH,0BAA0B,CAACC,MAAD,CAD/C;EAIX,IAAIE,uBAAuB,KAAK,IAAhC,EAAsC;IACpC,OAAOE,SAAP;EACD;EAED,yBACKA,SADE;IAELD,6BAA6B,EAAED;EAAAA;AAElC","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPluginWithPropertyGuard } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withUsesNonExemptEncryption = createInfoPlistPluginWithPropertyGuard(\n  setUsesNonExemptEncryption,\n  {\n    infoPlistProperty: 'ITSAppUsesNonExemptEncryption',\n    expoConfigProperty: 'ios.config.usesNonExemptEncryption',\n  },\n  'withUsesNonExemptEncryption'\n);\n\nexport function getUsesNonExemptEncryption(config: Pick<ExpoConfig, 'ios'>) {\n  return config?.ios?.config?.usesNonExemptEncryption ?? null;\n}\n\nexport function setUsesNonExemptEncryption(\n  config: Pick<ExpoConfig, 'ios'>,\n  { ITSAppUsesNonExemptEncryption, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const usesNonExemptEncryption = getUsesNonExemptEncryption(config);\n\n  // Make no changes if the key is left blank\n  if (usesNonExemptEncryption === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    ITSAppUsesNonExemptEncryption: usesNonExemptEncryption,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}