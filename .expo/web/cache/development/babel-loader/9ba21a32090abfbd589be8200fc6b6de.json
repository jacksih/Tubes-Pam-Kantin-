{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"providers\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidModFileProviders = getAndroidModFileProviders;\nexports.sortAndroidManifest = sortAndroidManifest;\nexports.withAndroidBaseMods = withAndroidBaseMods;\nfunction _fs() {\n  var data = require(\"fs\");\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _android() {\n  var data = require(\"../android\");\n  _android = function _android() {\n    return data;\n  };\n  return data;\n}\nfunction _XML() {\n  var data = require(\"../utils/XML\");\n  _XML = function _XML() {\n    return data;\n  };\n  return data;\n}\nfunction _sortObject() {\n  var data = require(\"../utils/sortObject\");\n  _sortObject = function _sortObject() {\n    return data;\n  };\n  return data;\n}\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _fs$promises = _fs().promises,\n  readFile = _fs$promises.readFile,\n  writeFile = _fs$promises.writeFile;\nfunction getAndroidManifestTemplate(config) {\n  var _config$android$packa, _config$android;\n  return (0, _XML().parseXMLAsync)(\"\\n  <manifest xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" package=\\\"\" + ((_config$android$packa = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.package) !== null && _config$android$packa !== void 0 ? _config$android$packa : 'com.placeholder.appid') + \"\\\">\\n\\n    <uses-permission android:name=\\\"android.permission.INTERNET\\\"/>\\n    <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\\n    <uses-permission android:name=\\\"android.permission.SYSTEM_ALERT_WINDOW\\\"/>\\n    <!-- These require runtime permissions on M -->\\n    <uses-permission android:name=\\\"android.permission.READ_EXTERNAL_STORAGE\\\"/>\\n    <uses-permission android:name=\\\"android.permission.WRITE_EXTERNAL_STORAGE\\\"/>\\n    <!-- END OPTIONAL PERMISSIONS -->\\n\\n    <queries>\\n      <!-- Support checking for http(s) links via the Linking API -->\\n      <intent>\\n        <action android:name=\\\"android.intent.action.VIEW\\\" />\\n        <category android:name=\\\"android.intent.category.BROWSABLE\\\" />\\n        <data android:scheme=\\\"https\\\" />\\n      </intent>\\n    </queries>\\n\\n    <application\\n      android:name=\\\".MainApplication\\\"\\n      android:label=\\\"@string/app_name\\\"\\n      android:icon=\\\"@mipmap/ic_launcher\\\"\\n      android:roundIcon=\\\"@mipmap/ic_launcher_round\\\"\\n      android:allowBackup=\\\"false\\\"\\n      android:theme=\\\"@style/AppTheme\\\"\\n      android:usesCleartextTraffic=\\\"true\\\"\\n    >\\n      <meta-data android:name=\\\"expo.modules.updates.EXPO_UPDATE_URL\\\" android:value=\\\"YOUR-APP-URL-HERE\\\"/>\\n      <meta-data android:name=\\\"expo.modules.updates.EXPO_SDK_VERSION\\\" android:value=\\\"YOUR-APP-SDK-VERSION-HERE\\\"/>\\n      <activity\\n        android:name=\\\".MainActivity\\\"\\n        android:label=\\\"@string/app_name\\\"\\n        android:configChanges=\\\"keyboard|keyboardHidden|orientation|screenSize|uiMode\\\"\\n        android:launchMode=\\\"singleTask\\\"\\n        android:windowSoftInputMode=\\\"adjustResize\\\"\\n        android:theme=\\\"@style/Theme.App.SplashScreen\\\"\\n      >\\n        <intent-filter>\\n          <action android:name=\\\"android.intent.action.MAIN\\\"/>\\n          <category android:name=\\\"android.intent.category.LAUNCHER\\\"/>\\n        </intent-filter>\\n      </activity>\\n      <activity android:name=\\\"com.facebook.react.devsupport.DevSettingsActivity\\\"/>\\n    </application>\\n  </manifest>\\n  \");\n}\nfunction sortAndroidManifest(obj) {\n  if (obj.manifest) {\n    obj.manifest = (0, _sortObject().sortObject)(obj.manifest, _sortObject().reverseSortString);\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      obj.manifest['uses-permission'].sort(function (a, b) {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n    if (Array.isArray(obj.manifest.application)) {\n      obj.manifest.application = obj.manifest.application.map(function (application) {\n        application = (0, _sortObject().sortObjWithOrder)(application, ['meta-data', 'service', 'activity']);\n        if (Array.isArray(application['meta-data'])) {\n          application['meta-data'].sort(function (a, b) {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n        return application;\n      });\n    }\n  }\n  return obj;\n}\nvar defaultProviders = {\n  dangerous: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath() {\n      return '';\n    },\n    read: function () {\n      var _read = _asyncToGenerator(function* () {\n        return {\n          filePath: '',\n          modResults: {}\n        };\n      });\n      function read() {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write = _asyncToGenerator(function* () {});\n      function write() {\n        return _write.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  manifest: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref) {\n      var platformProjectRoot = _ref.modRequest.platformProjectRoot;\n      return _path().default.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    read: function () {\n      var _read2 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Manifest.readAndroidManifestAsync(filePath);\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return yield getAndroidManifestTemplate(config);\n      });\n      function read(_x, _x2) {\n        return _read2.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write2 = _asyncToGenerator(function* (filePath, _ref2) {\n        var modResults = _ref2.modResults,\n          introspect = _ref2.modRequest.introspect;\n        if (introspect) return;\n        yield _android().Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults));\n      });\n      function write(_x3, _x4) {\n        return _write2.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  gradleProperties: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref3) {\n      var platformProjectRoot = _ref3.modRequest.platformProjectRoot;\n      return _path().default.join(platformProjectRoot, 'gradle.properties');\n    },\n    read: function () {\n      var _read3 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Properties.parsePropertiesFile(yield readFile(filePath, 'utf8'));\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return [];\n      });\n      function read(_x5, _x6) {\n        return _read3.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write3 = _asyncToGenerator(function* (filePath, _ref4) {\n        var modResults = _ref4.modResults,\n          introspect = _ref4.modRequest.introspect;\n        if (introspect) return;\n        yield writeFile(filePath, _android().Properties.propertiesListToString(modResults));\n      });\n      function write(_x7, _x8) {\n        return _write3.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  strings: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath = _asyncToGenerator(function* (_ref5) {\n        var _ref5$modRequest = _ref5.modRequest,\n          projectRoot = _ref5$modRequest.projectRoot,\n          introspect = _ref5$modRequest.introspect;\n        try {\n          return yield _android().Strings.getProjectStringsXMLPathAsync(projectRoot);\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x9) {\n        return _getFilePath.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read4 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Resources.readResourcesXMLAsync({\n            path: filePath\n          });\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return {\n          resources: {}\n        };\n      });\n      function read(_x10, _x11) {\n        return _read4.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write4 = _asyncToGenerator(function* (filePath, _ref6) {\n        var modResults = _ref6.modResults,\n          introspect = _ref6.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x12, _x13) {\n        return _write4.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  colors: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath2 = _asyncToGenerator(function* (_ref7) {\n        var _ref7$modRequest = _ref7.modRequest,\n          projectRoot = _ref7$modRequest.projectRoot,\n          introspect = _ref7$modRequest.introspect;\n        try {\n          return yield _android().Colors.getProjectColorsXMLPathAsync(projectRoot);\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x14) {\n        return _getFilePath2.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read5 = _asyncToGenerator(function* (filePath, _ref8) {\n        var introspect = _ref8.modRequest.introspect;\n        try {\n          return yield _android().Resources.readResourcesXMLAsync({\n            path: filePath\n          });\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return {\n          resources: {}\n        };\n      });\n      function read(_x15, _x16) {\n        return _read5.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write5 = _asyncToGenerator(function* (filePath, _ref9) {\n        var modResults = _ref9.modResults,\n          introspect = _ref9.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x17, _x18) {\n        return _write5.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  colorsNight: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath3 = _asyncToGenerator(function* (_ref10) {\n        var _ref10$modRequest = _ref10.modRequest,\n          projectRoot = _ref10$modRequest.projectRoot,\n          introspect = _ref10$modRequest.introspect;\n        try {\n          return yield _android().Colors.getProjectColorsXMLPathAsync(projectRoot, {\n            kind: 'values-night'\n          });\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x19) {\n        return _getFilePath3.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read6 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Resources.readResourcesXMLAsync({\n            path: filePath\n          });\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return {\n          resources: {}\n        };\n      });\n      function read(_x20, _x21) {\n        return _read6.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write6 = _asyncToGenerator(function* (filePath, _ref11) {\n        var modResults = _ref11.modResults,\n          introspect = _ref11.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x22, _x23) {\n        return _write6.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  styles: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath4 = _asyncToGenerator(function* (_ref12) {\n        var _ref12$modRequest = _ref12.modRequest,\n          projectRoot = _ref12$modRequest.projectRoot,\n          introspect = _ref12$modRequest.introspect;\n        try {\n          return yield _android().Styles.getProjectStylesXMLPathAsync(projectRoot);\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x24) {\n        return _getFilePath4.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read7 = _asyncToGenerator(function* (filePath, config) {\n        var _styles$resources$$;\n        var styles = {\n          resources: {}\n        };\n        try {\n          styles = yield _android().Resources.readResourcesXMLAsync({\n            path: filePath,\n            fallback: \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><resources xmlns:tools=\\\"http://schemas.android.com/tools\\\"></resources>\"\n          });\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        if (!styles.resources.$) {\n          styles.resources.$ = {};\n        }\n        if (!((_styles$resources$$ = styles.resources.$) !== null && _styles$resources$$ !== void 0 && _styles$resources$$['xmlns:tools'])) {\n          styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n        }\n        return styles;\n      });\n      function read(_x25, _x26) {\n        return _read7.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write7 = _asyncToGenerator(function* (filePath, _ref13) {\n        var modResults = _ref13.modResults,\n          introspect = _ref13.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x27, _x28) {\n        return _write7.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  projectBuildGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref14) {\n      var projectRoot = _ref14.modRequest.projectRoot;\n      return _android().Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    read: function () {\n      var _read8 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x29) {\n        return _read8.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write8 = _asyncToGenerator(function* (filePath, _ref15) {\n        var contents = _ref15.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x30, _x31) {\n        return _write8.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  settingsGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref16) {\n      var projectRoot = _ref16.modRequest.projectRoot;\n      return _android().Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    read: function () {\n      var _read9 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x32) {\n        return _read9.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write9 = _asyncToGenerator(function* (filePath, _ref17) {\n        var contents = _ref17.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x33, _x34) {\n        return _write9.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  appBuildGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref18) {\n      var projectRoot = _ref18.modRequest.projectRoot;\n      return _android().Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    read: function () {\n      var _read10 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x35) {\n        return _read10.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write10 = _asyncToGenerator(function* (filePath, _ref19) {\n        var contents = _ref19.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x36, _x37) {\n        return _write10.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  mainActivity: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref20) {\n      var projectRoot = _ref20.modRequest.projectRoot;\n      return _android().Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    read: function () {\n      var _read11 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x38) {\n        return _read11.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write11 = _asyncToGenerator(function* (filePath, _ref21) {\n        var contents = _ref21.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x39, _x40) {\n        return _write11.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  mainApplication: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref22) {\n      var projectRoot = _ref22.modRequest.projectRoot;\n      return _android().Paths.getProjectFilePath(projectRoot, 'MainApplication');\n    },\n    read: function () {\n      var _read12 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x41) {\n        return _read12.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write12 = _asyncToGenerator(function* (filePath, _ref23) {\n        var contents = _ref23.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x42, _x43) {\n        return _write12.apply(this, arguments);\n      }\n      return write;\n    }()\n  })\n};\nfunction withAndroidBaseMods(config) {\n  var _ref24 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    providers = _ref24.providers,\n    props = _objectWithoutProperties(_ref24, _excluded);\n  return (0, _createBaseMod().withGeneratedBaseMods)(config, Object.assign({}, props, {\n    platform: 'android',\n    providers: providers !== null && providers !== void 0 ? providers : getAndroidModFileProviders()\n  }));\n}\nfunction getAndroidModFileProviders() {\n  return defaultProviders;\n}","map":{"version":3,"sources":["../../src/plugins/withAndroidBaseMods.ts"],"names":["readFile","writeFile","promises","getAndroidManifestTemplate","config","android","package","sortAndroidManifest","obj","manifest","reverseSortString","Array","isArray","sort","a","b","$","application","map","defaultProviders","dangerous","getFilePath","read","filePath","modResults","write","isIntrospective","modRequest","platformProjectRoot","path","join","Manifest","readAndroidManifestAsync","error","introspect","writeAndroidManifestAsync","gradleProperties","Properties","parsePropertiesFile","propertiesListToString","strings","projectRoot","Strings","getProjectStringsXMLPathAsync","readResourcesXMLAsync","resources","xml","colors","Colors","getProjectColorsXMLPathAsync","colorsNight","kind","styles","Styles","getProjectStylesXMLPathAsync","fallback","projectBuildGradle","Paths","getProjectBuildGradleFilePath","getFileInfo","contents","settingsGradle","getSettingsGradleFilePath","appBuildGradle","getAppBuildGradleFilePath","mainActivity","getProjectFilePath","mainApplication","withAndroidBaseMods","providers","props","platform","getAndroidModFileProviders"],"mappings":";;;;;;;;;;;AAAA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAGA,SAAA,QAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,YAAA,CAAA;EAAA,QAAA,GAAA,oBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAEA,SAAA,IAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,cAAA,CAAA;EAAA,IAAA,GAAA,gBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;EAAA,WAAA,GAAA,uBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,cAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;EAAA,cAAA,GAAA,0BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAEA,mBAAgCE,GAAAA,EAAAA,CAAAA,QAAhC;EAAQF,QAAF,gBAAEA,QAAF;EAAYC,SAAAA,gBAAAA,SAAAA;AAIlB,SAASE,0BAAT,CAAoCC,MAApC,EAA4D;EAAA,IAAA,qBAAA,EAAA,eAAA;EAG1D,OAAO,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA,aAAA,6FAAc,CAAA,qBAAA,GAAA,CAAA,eAAA,GAEnBA,MAAM,CAACC,OAFY,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAEnBD,eAAAA,CAAgBE,OAFG,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAEQ,uBAC5B,kgEAHD;AAkDD;AAEM,SAASC,mBAAT,CAA6BC,GAA7B,EAAmD;EACxD,IAAIA,GAAG,CAACC,QAAR,EAAkB;IAEhBD,GAAG,CAACC,QAAJD,GAAe,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,UAAA,EAAWA,GAAG,CAACC,QAAf,EAAyBC,WAAAA,EAAAA,CAAAA,iBAAzB,CAAfF;IAEA,IAAIG,KAAK,CAACC,OAAND,CAAcH,GAAG,CAACC,QAAJD,CAAa,iBAAbA,CAAdG,CAAJ,EAAoD;MAElDH,GAAG,CAACC,QAAJD,CAAa,iBAAbA,CAAAA,CAAgCK,IAAhCL,CAAqC,UAACM,CAAD,EAAIC,CAAJ,EAAU;QAC7C,IAAID,CAAC,CAACE,CAAFF,CAAI,cAAJA,CAAAA,GAAsBC,CAAC,CAACC,CAAFD,CAAI,cAAJA,CAA1B,EAA+C,OAAO,CAAC,CAAR;QAC/C,IAAID,CAAC,CAACE,CAAFF,CAAI,cAAJA,CAAAA,GAAsBC,CAAC,CAACC,CAAFD,CAAI,cAAJA,CAA1B,EAA+C,OAAO,CAAP;QAC/C,OAAO,CAAP;MACD,CAJDP,CAAAA;IAKD;IAED,IAAIG,KAAK,CAACC,OAAND,CAAcH,GAAG,CAACC,QAAJD,CAAaS,WAA3BN,CAAJ,EAA6C;MAE3CH,GAAG,CAACC,QAAJD,CAAaS,WAAbT,GAA2B,GAAG,CAACC,QAAJ,CAAaQ,WAAb,CAAyBC,GAAzB,CAA8BD,UAAAA,WAAD,EAAiB;QACvEA,WAAW,GAAG,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,gBAAA,EAAiBA,WAAjB,EAA8B,CAAC,WAAD,EAAc,SAAd,EAAyB,UAAzB,CAA9B,CAAdA;QAEA,IAAIN,KAAK,CAACC,OAAND,CAAcM,WAAW,CAAC,WAAD,CAAzBN,CAAJ,EAA6C;UAE3CM,WAAW,CAAC,WAAD,CAAXA,CAAyBJ,IAAzBI,CAA8B,UAACH,CAAD,EAAIC,CAAJ,EAAU;YACtC,IAAID,CAAC,CAACE,CAAFF,CAAI,cAAJA,CAAAA,GAAsBC,CAAC,CAACC,CAAFD,CAAI,cAAJA,CAA1B,EAA+C,OAAO,CAAC,CAAR;YAC/C,IAAID,CAAC,CAACE,CAAFF,CAAI,cAAJA,CAAAA,GAAsBC,CAAC,CAACC,CAAFD,CAAI,cAAJA,CAA1B,EAA+C,OAAO,CAAP;YAC/C,OAAO,CAAP;UACD,CAJDE,CAAAA;QAKD;QACD,OAAOA,WAAP;MACD,CAZ0B,CAA3BT;IAaD;EACF;EACD,OAAOA,GAAP;AACD;AAED,IAAMW,gBAAgB,GAAG;EACvBC,SAAS,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAkB;IAC3BC,WAAW,yBAAG;MACZ,OAAO,EAAP;IACD,CAH0B;IAIrBC,IAAN;MAAA,2CAAa;QACX,OAAO;UAAEC,QAAQ,EAAE,EAAZ;UAAgBC,UAAU,EAAE,CAAA;QAA5B,CAAP;MACD,CAN0B;MAAA;QAAA;MAAA;MAAA;IAAA;IAOrBC,KAAN;MAAA,4CAAc,CAAE,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAPW,CAAlB,CADY;EAYvBhB,QAAQ,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAmC;IAC3CiB,eAAe,EAAE,IAD0B;IAE3CL,WAAW,6BAA0C;MAAA,IAAzBO,mBAAAA,QAAdD,UAAU,CAAIC,mBAAAA;MAC1B,OAAOC,KAAAA,EAAAA,CAAAA,OAAAA,CAAKC,IAALD,CAAUD,mBAAVC,EAA+B,kCAA/BA,CAAP;IACD,CAJ0C;IAKrCP,IAAN;MAAA,0CAAWC,QAAX,EAAqBnB,MAArB,EAA6B;QAC3B,IAAI;UACF,aAAa2B,QAAAA,EAAAA,CAAAA,QAAAA,CAASC,wBAATD,CAAkCR,QAAlCQ,CAAb;QACD,CAFD,CAEE,OAAOE,KAAP,EAAmB;UACnB,IAAI,CAAC7B,MAAM,CAACuB,UAAPvB,CAAkB8B,UAAvB,EAAmC;YACjC,MAAMD,KAAN;UACD;QACF;QACD,aAAa9B,0BAA0B,CAACC,MAAD,CAAvC;MACD,CAd0C;MAAA;QAAA;MAAA;MAAA;IAAA;IAerCqB,KAAN;MAAA,2CAAYF,QAAZ,SAAkE;QAAA,IAA1CC,UAAF,SAAEA,UAAF;UAA4BU,UAAAA,SAAdP,UAAU,CAAIO,UAAAA;QAChD,IAAIA,UAAJ,EAAgB;QAChB,MAAMH,QAAAA,EAAAA,CAAAA,QAAAA,CAASI,yBAATJ,CAAmCR,QAAnCQ,EAA6CxB,mBAAmB,CAACiB,UAAD,CAAhEO,CAAN;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAlB0C,CAAnC,CAZa;EAkCvBK,gBAAgB,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAsC;IACtDV,eAAe,EAAE,IADqC;IAGtDL,WAAW,8BAA0C;MAAA,IAAzBO,mBAAAA,SAAdD,UAAU,CAAIC,mBAAAA;MAC1B,OAAOC,KAAAA,EAAAA,CAAAA,OAAAA,CAAKC,IAALD,CAAUD,mBAAVC,EAA+B,mBAA/BA,CAAP;IACD,CALqD;IAMhDP,IAAN;MAAA,0CAAWC,QAAX,EAAqBnB,MAArB,EAA6B;QAC3B,IAAI;UACF,aAAaiC,QAAAA,EAAAA,CAAAA,UAAAA,CAAWC,mBAAXD,OAAqCrC,QAAQ,CAACuB,QAAD,EAAW,MAAX,CAA7Cc,CAAb;QACD,CAFD,CAEE,OAAOJ,KAAP,EAAc;UACd,IAAI,CAAC7B,MAAM,CAACuB,UAAPvB,CAAkB8B,UAAvB,EAAmC;YACjC,MAAMD,KAAN;UACD;QACF;QACD,OAAO,EAAP;MACD,CAfqD;MAAA;QAAA;MAAA;MAAA;IAAA;IAgBhDR,KAAN;MAAA,2CAAYF,QAAZ,SAAkE;QAAA,IAA1CC,UAAF,SAAEA,UAAF;UAA4BU,UAAAA,SAAdP,UAAU,CAAIO,UAAAA;QAChD,IAAIA,UAAJ,EAAgB;QAChB,MAAMjC,SAAS,CAACsB,QAAD,EAAWc,QAAAA,EAAAA,CAAAA,UAAAA,CAAWE,sBAAXF,CAAkCb,UAAlCa,CAAX,CAAf;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAnBqD,CAAtC,CAlCK;EAyDvBG,OAAO,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAgC;IACvCd,eAAe,EAAE,IADsB;IAGjCL,WAAN;MAAA,uDAA+D;QAAA,6BAA3CM,UAAU;UAAIc,WAAF,oBAAEA,WAAF;UAAeP,UAAAA,oBAAAA,UAAAA;QAC7C,IAAI;UACF,aAAaQ,QAAAA,EAAAA,CAAAA,OAAAA,CAAQC,6BAARD,CAAsCD,WAAtCC,CAAb;QACD,CAFD,CAEE,OAAOT,KAAP,EAAmB;UACnB,IAAI,CAACC,UAAL,EAAiB;YACf,MAAMD,KAAN;UACD;QACF;QACD,OAAO,EAAP;MACD,CAZsC;MAAA;QAAA;MAAA;MAAA;IAAA;IAcjCX,IAAN;MAAA,0CAAWC,QAAX,EAAqBnB,MAArB,EAA6B;QAC3B,IAAI;UACF,aAAa,QAAA,EAAA,CAAA,SAAA,CAAUwC,qBAAV,CAAgC;YAAEf,IAAI,EAAEN;UAAR,CAAhC,CAAb;QACD,CAFD,CAEE,OAAOU,KAAP,EAAc;UACd,IAAI,CAAC7B,MAAM,CAACuB,UAAPvB,CAAkB8B,UAAvB,EAAmC;YACjC,MAAMD,KAAN;UACD;QACF;QACD,OAAO;UAAEY,SAAS,EAAE,CAAA;QAAb,CAAP;MACD,CAvBsC;MAAA;QAAA;MAAA;MAAA;IAAA;IAwBjCpB,KAAN;MAAA,2CAAYF,QAAZ,SAAkE;QAAA,IAA1CC,UAAF,SAAEA,UAAF;UAA4BU,UAAAA,SAAdP,UAAU,CAAIO,UAAAA;QAChD,IAAIA,UAAJ,EAAgB;QAChB,MAAM,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA,aAAA,EAAc;UAAEL,IAAI,EAAEN,QAAR;UAAkBuB,GAAG,EAAEtB;QAAvB,CAAd,CAAN;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EA3BsC,CAAhC,CAzDc;EAuFvBuB,MAAM,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAgC;IACtCrB,eAAe,EAAE,IADqB;IAGhCL,WAAN;MAAA,wDAA+D;QAAA,6BAA3CM,UAAU;UAAIc,WAAF,oBAAEA,WAAF;UAAeP,UAAAA,oBAAAA,UAAAA;QAC7C,IAAI;UACF,aAAac,QAAAA,EAAAA,CAAAA,MAAAA,CAAOC,4BAAPD,CAAoCP,WAApCO,CAAb;QACD,CAFD,CAEE,OAAOf,KAAP,EAAmB;UACnB,IAAI,CAACC,UAAL,EAAiB;YACf,MAAMD,KAAN;UACD;QACF;QACD,OAAO,EAAP;MACD,CAZqC;MAAA;QAAA;MAAA;MAAA;IAAA;IAchCX,IAAN;MAAA,0CAAWC,QAAX,SAAqD;QAAA,IAAhBW,UAAAA,SAAdP,UAAU,CAAIO,UAAAA;QACnC,IAAI;UACF,aAAa,QAAA,EAAA,CAAA,SAAA,CAAUU,qBAAV,CAAgC;YAAEf,IAAI,EAAEN;UAAR,CAAhC,CAAb;QACD,CAFD,CAEE,OAAOU,KAAP,EAAmB;UACnB,IAAI,CAACC,UAAL,EAAiB;YACf,MAAMD,KAAN;UACD;QACF;QACD,OAAO;UAAEY,SAAS,EAAE,CAAA;QAAb,CAAP;MACD,CAvBqC;MAAA;QAAA;MAAA;MAAA;IAAA;IAwBhCpB,KAAN;MAAA,2CAAYF,QAAZ,SAAkE;QAAA,IAA1CC,UAAF,SAAEA,UAAF;UAA4BU,UAAAA,SAAdP,UAAU,CAAIO,UAAAA;QAChD,IAAIA,UAAJ,EAAgB;QAChB,MAAM,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA,aAAA,EAAc;UAAEL,IAAI,EAAEN,QAAR;UAAkBuB,GAAG,EAAEtB;QAAvB,CAAd,CAAN;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EA3BqC,CAAhC,CAvFe;EAqHvB0B,WAAW,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAgC;IAC3CxB,eAAe,EAAE,IAD0B;IAGrCL,WAAN;MAAA,yDAA+D;QAAA,+BAA3CM,UAAU;UAAIc,WAAF,qBAAEA,WAAF;UAAeP,UAAAA,qBAAAA,UAAAA;QAC7C,IAAI;UACF,aAAa,QAAA,EAAA,CAAA,MAAA,CAAOe,4BAAP,CAAoCR,WAApC,EAAiD;YAAEU,IAAI,EAAE;UAAR,CAAjD,CAAb;QACD,CAFD,CAEE,OAAOlB,KAAP,EAAmB;UACnB,IAAI,CAACC,UAAL,EAAiB;YACf,MAAMD,KAAN;UACD;QACF;QACD,OAAO,EAAP;MACD,CAZ0C;MAAA;QAAA;MAAA;MAAA;IAAA;IAarCX,IAAN;MAAA,0CAAWC,QAAX,EAAqBnB,MAArB,EAA6B;QAC3B,IAAI;UACF,aAAa,QAAA,EAAA,CAAA,SAAA,CAAUwC,qBAAV,CAAgC;YAAEf,IAAI,EAAEN;UAAR,CAAhC,CAAb;QACD,CAFD,CAEE,OAAOU,KAAP,EAAmB;UACnB,IAAI,CAAC7B,MAAM,CAACuB,UAAPvB,CAAkB8B,UAAvB,EAAmC;YACjC,MAAMD,KAAN;UACD;QACF;QACD,OAAO;UAAEY,SAAS,EAAE,CAAA;QAAb,CAAP;MACD,CAtB0C;MAAA;QAAA;MAAA;MAAA;IAAA;IAuBrCpB,KAAN;MAAA,2CAAYF,QAAZ,UAAkE;QAAA,IAA1CC,UAAF,UAAEA,UAAF;UAA4BU,UAAAA,UAAdP,UAAU,CAAIO,UAAAA;QAChD,IAAIA,UAAJ,EAAgB;QAChB,MAAM,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA,aAAA,EAAc;UAAEL,IAAI,EAAEN,QAAR;UAAkBuB,GAAG,EAAEtB;QAAvB,CAAd,CAAN;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EA1B0C,CAAhC,CArHU;EAkJvB4B,MAAM,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAgC;IACtC1B,eAAe,EAAE,IADqB;IAGhCL,WAAN;MAAA,yDAA+D;QAAA,+BAA3CM,UAAU;UAAIc,WAAF,qBAAEA,WAAF;UAAeP,UAAAA,qBAAAA,UAAAA;QAC7C,IAAI;UACF,aAAamB,QAAAA,EAAAA,CAAAA,MAAAA,CAAOC,4BAAPD,CAAoCZ,WAApCY,CAAb;QACD,CAFD,CAEE,OAAOpB,KAAP,EAAmB;UACnB,IAAI,CAACC,UAAL,EAAiB;YACf,MAAMD,KAAN;UACD;QACF;QACD,OAAO,EAAP;MACD,CAZqC;MAAA;QAAA;MAAA;MAAA;IAAA;IAahCX,IAAN;MAAA,0CAAWC,QAAX,EAAqBnB,MAArB,EAA6B;QAAA,IAAA,mBAAA;QAC3B,IAAIgD,MAA6B,GAAG;UAAEP,SAAS,EAAE,CAAA;QAAb,CAApC;QAEA,IAAI;UAEFO,MAAM,SAAS,QAAA,EAAA,CAAA,SAAA,CAAUR,qBAAV,CAAgC;YAC7Cf,IAAI,EAAEN,QADuC;YAE7CgC,QAAQ;UAFqC,CAAhC,CAAfH;QAID,CAND,CAME,OAAOnB,KAAP,EAAmB;UACnB,IAAI,CAAC7B,MAAM,CAACuB,UAAPvB,CAAkB8B,UAAvB,EAAmC;YACjC,MAAMD,KAAN;UACD;QAZwB;QAgB3B,IAAI,CAACmB,MAAM,CAACP,SAAPO,CAAiBpC,CAAtB,EAAyB;UACvBoC,MAAM,CAACP,SAAPO,CAAiBpC,CAAjBoC,GAAqB,CAAA,CAArBA;QACD;QACD,IAAI,EAAA,CAAA,mBAAA,GAACA,MAAM,CAACP,SAAPO,CAAiBpC,CAAlB,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,IAACoC,mBAAAA,CAAqB,aAArBA,CAAD,CAAJ,EAA0C;UACxCA,MAAM,CAACP,SAAPO,CAAiBpC,CAAjBoC,CAAmB,aAAnBA,CAAAA,GAAoC,kCAApCA;QACD;QACD,OAAOA,MAAP;MACD,CApCqC;MAAA;QAAA;MAAA;MAAA;IAAA;IAqChC3B,KAAN;MAAA,2CAAYF,QAAZ,UAAkE;QAAA,IAA1CC,UAAF,UAAEA,UAAF;UAA4BU,UAAAA,UAAdP,UAAU,CAAIO,UAAAA;QAChD,IAAIA,UAAJ,EAAgB;QAChB,MAAM,CAAA,CAAA,EAAA,IAAA,EAAA,CAAA,aAAA,EAAc;UAAEL,IAAI,EAAEN,QAAR;UAAkBuB,GAAG,EAAEtB;QAAvB,CAAd,CAAN;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAxCqC,CAAhC,CAlJe;EA6LvBgC,kBAAkB,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAkC;IACpDnC,WAAW,+BAAkC;MAAA,IAAjBoB,WAAAA,UAAdd,UAAU,CAAIc,WAAAA;MAC1B,OAAOgB,QAAAA,EAAAA,CAAAA,KAAAA,CAAMC,6BAAND,CAAoChB,WAApCgB,CAAP;IACD,CAHmD;IAI9CnC,IAAN;MAAA,0CAAWC,QAAX,EAAqB;QACnB,OAAOkC,QAAAA,EAAAA,CAAAA,KAAAA,CAAME,WAANF,CAAkBlC,QAAlBkC,CAAP;MACD,CANmD;MAAA;QAAA;MAAA;MAAA;IAAA;IAO9ChC,KAAN;MAAA,2CAAYF,QAAZ,UAAoD;QAAA,IAAdqC,QAAAA,UAAdpC,UAAU,CAAIoC,QAAAA;QACpC,MAAM3D,SAAS,CAACsB,QAAD,EAAWqC,QAAX,CAAf;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EATmD,CAAlC,CA7LG;EAyMvBC,cAAc,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAkC;IAChDxC,WAAW,+BAAkC;MAAA,IAAjBoB,WAAAA,UAAdd,UAAU,CAAIc,WAAAA;MAC1B,OAAOgB,QAAAA,EAAAA,CAAAA,KAAAA,CAAMK,yBAANL,CAAgChB,WAAhCgB,CAAP;IACD,CAH+C;IAI1CnC,IAAN;MAAA,0CAAWC,QAAX,EAAqB;QACnB,OAAOkC,QAAAA,EAAAA,CAAAA,KAAAA,CAAME,WAANF,CAAkBlC,QAAlBkC,CAAP;MACD,CAN+C;MAAA;QAAA;MAAA;MAAA;IAAA;IAO1ChC,KAAN;MAAA,2CAAYF,QAAZ,UAAoD;QAAA,IAAdqC,QAAAA,UAAdpC,UAAU,CAAIoC,QAAAA;QACpC,MAAM3D,SAAS,CAACsB,QAAD,EAAWqC,QAAX,CAAf;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAT+C,CAAlC,CAzMO;EAqNvBG,cAAc,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAkC;IAChD1C,WAAW,+BAAkC;MAAA,IAAjBoB,WAAAA,UAAdd,UAAU,CAAIc,WAAAA;MAC1B,OAAOgB,QAAAA,EAAAA,CAAAA,KAAAA,CAAMO,yBAANP,CAAgChB,WAAhCgB,CAAP;IACD,CAH+C;IAI1CnC,IAAN;MAAA,2CAAWC,QAAX,EAAqB;QACnB,OAAOkC,QAAAA,EAAAA,CAAAA,KAAAA,CAAME,WAANF,CAAkBlC,QAAlBkC,CAAP;MACD,CAN+C;MAAA;QAAA;MAAA;MAAA;IAAA;IAO1ChC,KAAN;MAAA,4CAAYF,QAAZ,UAAoD;QAAA,IAAdqC,QAAAA,UAAdpC,UAAU,CAAIoC,QAAAA;QACpC,MAAM3D,SAAS,CAACsB,QAAD,EAAWqC,QAAX,CAAf;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAT+C,CAAlC,CArNO;EAiOvBK,YAAY,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAuC;IACnD5C,WAAW,+BAAkC;MAAA,IAAjBoB,WAAAA,UAAdd,UAAU,CAAIc,WAAAA;MAC1B,OAAOgB,QAAAA,EAAAA,CAAAA,KAAAA,CAAMS,kBAANT,CAAyBhB,WAAzBgB,EAAsC,cAAtCA,CAAP;IACD,CAHkD;IAI7CnC,IAAN;MAAA,2CAAWC,QAAX,EAAqB;QACnB,OAAOkC,QAAAA,EAAAA,CAAAA,KAAAA,CAAME,WAANF,CAAkBlC,QAAlBkC,CAAP;MACD,CANkD;MAAA;QAAA;MAAA;MAAA;IAAA;IAO7ChC,KAAN;MAAA,4CAAYF,QAAZ,UAAoD;QAAA,IAAdqC,QAAAA,UAAdpC,UAAU,CAAIoC,QAAAA;QACpC,MAAM3D,SAAS,CAACsB,QAAD,EAAWqC,QAAX,CAAf;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EATkD,CAAvC,CAjOS;EA6OvBO,eAAe,EAAE,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,QAAA,EAAuC;IACtD9C,WAAW,+BAAkC;MAAA,IAAjBoB,WAAAA,UAAdd,UAAU,CAAIc,WAAAA;MAC1B,OAAOgB,QAAAA,EAAAA,CAAAA,KAAAA,CAAMS,kBAANT,CAAyBhB,WAAzBgB,EAAsC,iBAAtCA,CAAP;IACD,CAHqD;IAIhDnC,IAAN;MAAA,2CAAWC,QAAX,EAAqB;QACnB,OAAOkC,QAAAA,EAAAA,CAAAA,KAAAA,CAAME,WAANF,CAAkBlC,QAAlBkC,CAAP;MACD,CANqD;MAAA;QAAA;MAAA;MAAA;IAAA;IAOhDhC,KAAN;MAAA,4CAAYF,QAAZ,UAAoD;QAAA,IAAdqC,QAAAA,UAAdpC,UAAU,CAAIoC,QAAAA;QACpC,MAAM3D,SAAS,CAACsB,QAAD,EAAWqC,QAAX,CAAf;MACD,CAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EATqD,CAAvC;AA7OM,CAAzB;AA4PO,SAASQ,mBAAT,CACLhE,MADK,EAMW;EAAA,iFADgE,CAAA,CAL3E;IAGHiE,SADF,UACEA,SADF;IAEKC,KAAAA;EAGL,OAAO,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,qBAAA,EAAsClE,MAAtC,oBACFkE,KADgD;IAEnDC,QAAQ,EAAE,SAFyC;IAGnDF,SAAS,EAAEA,SAAF,KAAA,IAAA,IAAEA,SAAF,KAAA,KAAA,CAAA,GAAEA,SAAF,GAAeG,0BAA0B;EAAA,GAHpD;AAKD;AAEM,SAASA,0BAAT,GAAsC;EAC3C,OAAOrD,gBAAP;AACD","sourcesContent":["import { promises } from 'fs';\nimport path from 'path';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Colors, Manifest, Paths, Properties, Resources, Strings, Styles } from '../android';\nimport { AndroidManifest } from '../android/Manifest';\nimport { parseXMLAsync, writeXMLAsync } from '../utils/XML';\nimport { reverseSortString, sortObject, sortObjWithOrder } from '../utils/sortObject';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype AndroidModName = keyof Required<ModConfig>['android'];\n\nfunction getAndroidManifestTemplate(config: ExportedConfig) {\n  // Keep in sync with https://github.com/expo/expo/blob/master/templates/expo-template-bare-minimum/android/app/src/main/AndroidManifest.xml\n  // TODO: Read from remote template when possible\n  return parseXMLAsync(`\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"${\n    config.android?.package ?? 'com.placeholder.appid'\n  }\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/>\n    <!-- These require runtime permissions on M -->\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <!-- END OPTIONAL PERMISSIONS -->\n\n    <queries>\n      <!-- Support checking for http(s) links via the Linking API -->\n      <intent>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" />\n      </intent>\n    </queries>\n\n    <application\n      android:name=\".MainApplication\"\n      android:label=\"@string/app_name\"\n      android:icon=\"@mipmap/ic_launcher\"\n      android:roundIcon=\"@mipmap/ic_launcher_round\"\n      android:allowBackup=\"false\"\n      android:theme=\"@style/AppTheme\"\n      android:usesCleartextTraffic=\"true\"\n    >\n      <meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\"/>\n      <meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\"/>\n      <activity\n        android:name=\".MainActivity\"\n        android:label=\"@string/app_name\"\n        android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n        android:launchMode=\"singleTask\"\n        android:windowSoftInputMode=\"adjustResize\"\n        android:theme=\"@style/Theme.App.SplashScreen\"\n      >\n        <intent-filter>\n          <action android:name=\"android.intent.action.MAIN\"/>\n          <category android:name=\"android.intent.category.LAUNCHER\"/>\n        </intent-filter>\n      </activity>\n      <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\"/>\n    </application>\n  </manifest>\n  `) as Promise<AndroidManifest>;\n}\n\nexport function sortAndroidManifest(obj: AndroidManifest) {\n  if (obj.manifest) {\n    // Reverse sort so application is last and permissions are first\n    obj.manifest = sortObject(obj.manifest, reverseSortString);\n\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      // Sort permissions alphabetically\n      obj.manifest['uses-permission'].sort((a, b) => {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n\n    if (Array.isArray(obj.manifest.application)) {\n      // reverse sort applications so activity is towards the end and meta-data is towards the front.\n      obj.manifest.application = obj.manifest.application.map((application) => {\n        application = sortObjWithOrder(application, ['meta-data', 'service', 'activity']);\n\n        if (Array.isArray(application['meta-data'])) {\n          // Sort metadata alphabetically\n          application['meta-data'].sort((a, b) => {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n        return application;\n      });\n    }\n  }\n  return obj;\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return { filePath: '', modResults: {} };\n    },\n    async write() {},\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  manifest: provider<Manifest.AndroidManifest>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    async read(filePath, config) {\n      try {\n        return await Manifest.readAndroidManifestAsync(filePath);\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return await getAndroidManifestTemplate(config);\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults));\n    },\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  gradleProperties: provider<Properties.PropertiesItem[]>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'gradle.properties');\n    },\n    async read(filePath, config) {\n      try {\n        return await Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return [];\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeFile(filePath, Properties.propertiesListToString(modResults));\n    },\n  }),\n\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  strings: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Strings.getProjectStringsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colors: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colorsNight: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot, { kind: 'values-night' });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  styles: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Styles.getProjectStylesXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      let styles: Resources.ResourceXML = { resources: {} };\n\n      try {\n        // Adds support for `tools:x`\n        styles = await Resources.readResourcesXMLAsync({\n          path: filePath,\n          fallback: `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`,\n        });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n\n      // Ensure support for tools is added...\n      if (!styles.resources.$) {\n        styles.resources.$ = {};\n      }\n      if (!styles.resources.$?.['xmlns:tools']) {\n        styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n      }\n      return styles;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  projectBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  settingsGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  appBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainActivity: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainApplication: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainApplication');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n};\n\ntype AndroidDefaultProviders = typeof defaultProviders;\n\nexport function withAndroidBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<AndroidDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<AndroidModName>(config, {\n    ...props,\n    platform: 'android',\n    providers: providers ?? getAndroidModFileProviders(),\n  });\n}\n\nexport function getAndroidModFileProviders() {\n  return defaultProviders;\n}\n"]},"metadata":{},"sourceType":"script"}