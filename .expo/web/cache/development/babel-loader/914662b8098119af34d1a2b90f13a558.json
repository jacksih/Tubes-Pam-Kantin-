{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyPlugin = applyPlugin;\nexports.getGoogleServicesFilePath = getGoogleServicesFilePath;\nexports.setClassPath = setClassPath;\nexports.setGoogleServicesFile = setGoogleServicesFile;\nexports.withGoogleServicesFile = exports.withClassPath = exports.withApplyPlugin = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = require(\"../utils/fs\");\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar DEFAULT_TARGET_PATH = './android/app/google-services.json';\nvar googleServicesClassPath = 'com.google.gms:google-services';\nvar googleServicesPlugin = 'com.google.gms.google-services';\nvar googleServicesVersion = '4.3.3';\nvar withClassPath = function withClassPath(config) {\n  return (0, _androidPlugins().withProjectBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.googleServicesFile', \"Cannot automatically configure project build.gradle if it's not groovy\");\n    }\n    return config;\n  });\n};\nexports.withClassPath = withClassPath;\nvar withApplyPlugin = function withApplyPlugin(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.googleServicesFile', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n    return config;\n  });\n};\nexports.withApplyPlugin = withApplyPlugin;\nvar withGoogleServicesFile = function withGoogleServicesFile(config) {\n  return (0, _withDangerousMod().withDangerousMod)(config, ['android', function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      yield setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withGoogleServicesFile = withGoogleServicesFile;\nfunction getGoogleServicesFilePath(config) {\n  var _config$android$googl, _config$android;\n  return (_config$android$googl = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.googleServicesFile) !== null && _config$android$googl !== void 0 ? _config$android$googl : null;\n}\nfunction setGoogleServicesFile(_x2, _x3) {\n  return _setGoogleServicesFile.apply(this, arguments);\n}\nfunction _setGoogleServicesFile() {\n  _setGoogleServicesFile = _asyncToGenerator(function* (config, projectRoot) {\n    var targetPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_TARGET_PATH;\n    var partialSourcePath = getGoogleServicesFilePath(config);\n    if (!partialSourcePath) {\n      return false;\n    }\n    var completeSourcePath = _path().default.resolve(projectRoot, partialSourcePath);\n    var destinationPath = _path().default.resolve(projectRoot, targetPath);\n    try {\n      yield (0, _fs().copyFilePathToPathAsync)(completeSourcePath, destinationPath);\n    } catch (e) {\n      console.log(e);\n      throw new Error(\"Cannot copy google-services.json from \" + completeSourcePath + \" to \" + destinationPath + \". Please make sure the source and destination paths exist.\");\n    }\n    return true;\n  });\n  return _setGoogleServicesFile.apply(this, arguments);\n}\nfunction setClassPath(config, buildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n  return buildGradle.replace(/dependencies\\s?{/, \"dependencies {\\n        classpath '\" + googleServicesClassPath + \":\" + googleServicesVersion + \"'\");\n}\nfunction applyPlugin(config, appBuildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n  var pattern = new RegExp(\"apply\\\\s+plugin:\\\\s+['\\\"]\" + googleServicesPlugin + \"['\\\"]\");\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n  return appBuildGradle + (\"\\napply plugin: '\" + googleServicesPlugin + \"'\");\n}","map":{"version":3,"sources":["../../src/android/GoogleServices.ts"],"names":["DEFAULT_TARGET_PATH","googleServicesClassPath","googleServicesPlugin","googleServicesVersion","withClassPath","config","modResults","language","contents","setClassPath","withApplyPlugin","applyPlugin","withGoogleServicesFile","setGoogleServicesFile","modRequest","projectRoot","getGoogleServicesFilePath","android","googleServicesFile","targetPath","partialSourcePath","completeSourcePath","path","resolve","destinationPath","e","console","log","Error","buildGradle","includes","replace","appBuildGradle","pattern","RegExp","match"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { copyFilePathToPathAsync } from '../utils/fs';\nimport { addWarningAndroid } from '../utils/warnings';\n\nconst DEFAULT_TARGET_PATH = './android/app/google-services.json';\n\nconst googleServicesClassPath = 'com.google.gms:google-services';\nconst googleServicesPlugin = 'com.google.gms.google-services';\n\n// NOTE(brentvatne): This may be annoying to keep up to date...\nconst googleServicesVersion = '4.3.3';\n\nexport const withClassPath: ConfigPlugin = (config) => {\n  return withProjectBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withApplyPlugin: ConfigPlugin = (config) => {\n  return withAppBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/**\n * Add `google-services.json` to project\n */\nexport const withGoogleServicesFile: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getGoogleServicesFilePath(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.googleServicesFile ?? null;\n}\n\nexport async function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string,\n  targetPath: string = DEFAULT_TARGET_PATH\n) {\n  const partialSourcePath = getGoogleServicesFilePath(config);\n  if (!partialSourcePath) {\n    return false;\n  }\n\n  const completeSourcePath = path.resolve(projectRoot, partialSourcePath);\n  const destinationPath = path.resolve(projectRoot, targetPath);\n\n  try {\n    await copyFilePathToPathAsync(completeSourcePath, destinationPath);\n  } catch (e) {\n    console.log(e);\n    throw new Error(\n      `Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`\n    );\n  }\n  return true;\n}\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  //\n  return buildGradle.replace(\n    /dependencies\\s?{/,\n    `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`\n  );\n}\n\nexport function applyPlugin(config: Pick<ExpoConfig, 'android'>, appBuildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  // Make sure the project does not have the plugin already\n  const pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  // Add it to the end of the file\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}\n"]},"metadata":{},"sourceType":"script"}