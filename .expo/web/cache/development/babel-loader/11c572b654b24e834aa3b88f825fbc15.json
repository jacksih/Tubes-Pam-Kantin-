{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuildSourceFile = createBuildSourceFile;\nexports.withBuildSourceFile = void 0;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withBuildSourceFile = function withBuildSourceFile(config, _ref) {\n  var filePath = _ref.filePath,\n    contents = _ref.contents,\n    overwrite = _ref.overwrite;\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    var projectName = (0, _Xcodeproj().getProjectName)(config.modRequest.projectRoot);\n    config.modResults = createBuildSourceFile({\n      project: config.modResults,\n      nativeProjectRoot: config.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: _path().default.join(projectName, filePath),\n      overwrite: overwrite\n    });\n    return config;\n  });\n};\nexports.withBuildSourceFile = withBuildSourceFile;\nfunction createBuildSourceFile(_ref2) {\n  var project = _ref2.project,\n    nativeProjectRoot = _ref2.nativeProjectRoot,\n    filePath = _ref2.filePath,\n    fileContents = _ref2.fileContents,\n    overwrite = _ref2.overwrite;\n  var absoluteFilePath = _path().default.join(nativeProjectRoot, filePath);\n  if (overwrite || !_fs().default.existsSync(absoluteFilePath)) {\n    _fs().default.writeFileSync(absoluteFilePath, fileContents, 'utf8');\n  }\n  var groupName = _path().default.dirname(filePath);\n  if (!project.hasFile(filePath)) {\n    project = (0, _Xcodeproj().addBuildSourceFileToGroup)({\n      filepath: filePath,\n      groupName: groupName,\n      project: project\n    });\n  }\n  return project;\n}","map":{"version":3,"sources":["../../src/ios/XcodeProjectFile.ts"],"names":["withBuildSourceFile","config","filePath","contents","overwrite","projectName","modRequest","projectRoot","modResults","createBuildSourceFile","project","nativeProjectRoot","platformProjectRoot","fileContents","path","join","absoluteFilePath","fs","existsSync","writeFileSync","groupName","dirname","hasFile","filepath"],"mappings":";;;;;;;AAAA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAGA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;EAAA,WAAA,GAAA,uBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,UAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;EAAA,UAAA,GAAA,sBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAWO,IAAMA,mBAIX,GAAG,SAJQA,mBAIX,CAAIC,MAAD,QAA+C;EAAA,IAApCC,QAAF,QAAEA,QAAF;IAAYC,QAAZ,QAAYA,QAAZ;IAAsBC,SAAAA,QAAAA,SAAAA;EAClC,OAAO,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,gBAAA,EAAiBH,MAAjB,EAA0BA,UAAAA,MAAD,EAAY;IAC1C,IAAMI,WAAW,GAAG,CAAA,CAAA,EAAA,UAAA,EAAA,CAAA,cAAA,EAAeJ,MAAM,CAACK,UAAPL,CAAkBM,WAAjC,CAApB;IAEAN,MAAM,CAACO,UAAPP,GAAoBQ,qBAAqB,CAAC;MACxCC,OAAO,EAAET,MAAM,CAACO,UADwB;MAExCG,iBAAiB,EAAEV,MAAM,CAACK,UAAPL,CAAkBW,mBAFG;MAGxCC,YAAY,EAAEV,QAH0B;MAIxCD,QAAQ,EAAEY,KAAAA,EAAAA,CAAAA,OAAAA,CAAKC,IAALD,CAAUT,WAAVS,EAAuBZ,QAAvBY,CAJ8B;MAKxCV,SAAAA,EAAAA;IALwC,CAAD,CAAzCH;IAOA,OAAOA,MAAP;EACD,CAXM,CAAP;AAYD,CAjBM;;AA2BA,SAASQ,qBAAT,QAYU;EAAA,IAXfC,OADoC,SACpCA,OADoC;IAEpCC,iBAFoC,SAEpCA,iBAFoC;IAGpCT,QAHoC,SAGpCA,QAHoC;IAIpCW,YAJoC,SAIpCA,YAJoC;IAKpCT,SAAAA,SAAAA,SAAAA;EAQA,IAAMY,gBAAgB,GAAGF,KAAAA,EAAAA,CAAAA,OAAAA,CAAKC,IAALD,CAAUH,iBAAVG,EAA6BZ,QAA7BY,CAAzB;EACA,IAAIV,SAAS,IAAI,CAACa,GAAAA,EAAAA,CAAAA,OAAAA,CAAGC,UAAHD,CAAcD,gBAAdC,CAAlB,EAAmD;IAEjDA,GAAAA,EAAAA,CAAAA,OAAAA,CAAGE,aAAHF,CAAiBD,gBAAjBC,EAAmCJ,YAAnCI,EAAiD,MAAjDA,CAAAA;EAJa;EAQf,IAAMG,SAAS,GAAGN,KAAAA,EAAAA,CAAAA,OAAAA,CAAKO,OAALP,CAAaZ,QAAbY,CARH;EAWf,IAAI,CAACJ,OAAO,CAACY,OAARZ,CAAgBR,QAAhBQ,CAAL,EAAgC;IAC9BA,OAAO,GAAG,CAAA,CAAA,EAAA,UAAA,EAAA,CAAA,yBAAA,EAA0B;MAClCa,QAAQ,EAAErB,QADwB;MAElCkB,SAFkC,EAElCA,SAFkC;MAGlCV,OAAAA,EAAAA;IAHkC,CAA1B,CAAVA;EAKD;EACD,OAAOA,OAAP;AACD","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addBuildSourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\n/**\n * Create a build source file and link it to Xcode.\n *\n * @param config\n * @param props.filePath relative to the build source folder. ex: `ViewController.swift` would be created in `ios/myapp/ViewController.swift`.\n * @param props.contents file contents to write.\n * @param props.overwrite should the contents overwrite any existing file in the same location on disk.\n * @returns\n */\nexport const withBuildSourceFile: ConfigPlugin<{\n  filePath: string;\n  contents: string;\n  overwrite?: boolean;\n}> = (config, { filePath, contents, overwrite }) => {\n  return withXcodeProject(config, (config) => {\n    const projectName = getProjectName(config.modRequest.projectRoot);\n\n    config.modResults = createBuildSourceFile({\n      project: config.modResults,\n      nativeProjectRoot: config.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: path.join(projectName, filePath),\n      overwrite,\n    });\n    return config;\n  });\n};\n\n/**\n * Add a source file to the Xcode project and write it to the file system.\n *\n * @param nativeProjectRoot absolute path to the native app root `user/app/ios`\n * @param filePath path relative to the `nativeProjectRoot` for the file to create `user/app/ios/myapp/foobar.swift`\n * @param fileContents string file contents to write to the `filePath`\n * @param overwrite should write file even if one already exists\n */\nexport function createBuildSourceFile({\n  project,\n  nativeProjectRoot,\n  filePath,\n  fileContents,\n  overwrite,\n}: {\n  project: XcodeProject;\n  nativeProjectRoot: string;\n  filePath: string;\n  fileContents: string;\n  overwrite?: boolean;\n}): XcodeProject {\n  const absoluteFilePath = path.join(nativeProjectRoot, filePath);\n  if (overwrite || !fs.existsSync(absoluteFilePath)) {\n    // Create the file\n    fs.writeFileSync(absoluteFilePath, fileContents, 'utf8');\n  }\n\n  // `myapp`\n  const groupName = path.dirname(filePath);\n\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addBuildSourceFileToGroup({\n      filepath: filePath,\n      groupName,\n      project,\n    });\n  }\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}