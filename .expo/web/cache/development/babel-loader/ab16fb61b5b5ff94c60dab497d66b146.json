{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAllowBackup = getAllowBackup;\nexports.getAllowBackupFromManifest = getAllowBackupFromManifest;\nexports.setAllowBackup = setAllowBackup;\nexports.withAllowBackup = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n  _Manifest = function _Manifest() {\n    return data;\n  };\n  return data;\n}\nvar withAllowBackup = (0, _androidPlugins().createAndroidManifestPlugin)(setAllowBackup, 'withAllowBackup');\nexports.withAllowBackup = withAllowBackup;\nfunction getAllowBackup(config) {\n  var _config$android$allow, _config$android;\n  return (_config$android$allow = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.allowBackup) !== null && _config$android$allow !== void 0 ? _config$android$allow : true;\n}\nfunction setAllowBackup(config, androidManifest) {\n  var allowBackup = getAllowBackup(config);\n  var mainApplication = (0, _Manifest().getMainApplication)(androidManifest);\n  if (mainApplication !== null && mainApplication !== void 0 && mainApplication.$) {\n    mainApplication.$['android:allowBackup'] = String(allowBackup);\n  }\n  return androidManifest;\n}\nfunction getAllowBackupFromManifest(androidManifest) {\n  var mainApplication = (0, _Manifest().getMainApplication)(androidManifest);\n  if (mainApplication !== null && mainApplication !== void 0 && mainApplication.$) {\n    return String(mainApplication.$['android:allowBackup']) === 'true';\n  }\n  return null;\n}","map":{"version":3,"sources":["../../src/android/AllowBackup.ts"],"names":["withAllowBackup","setAllowBackup","getAllowBackup","config","android","allowBackup","androidManifest","mainApplication","$","String","getAllowBackupFromManifest"],"mappings":";;;;;;;;;AAEA,SAAA,eAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;EAAA,eAAA,GAAA,2BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,YAAA,CAAA;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAEO,IAAMA,eAAe,GAAG,CAAA,CAAA,EAAA,eAAA,EAAA,CAAA,2BAAA,EAA4BC,cAA5B,EAA4C,iBAA5C,CAAxB;;AAEA,SAASC,cAAT,CAAwBC,MAAxB,EAA6D;EAAA,IAAA,qBAAA,EAAA,eAAA;EAGlE,OAAA,CAAA,qBAAA,GAAA,CAAA,eAAA,GAAOA,MAAM,CAACC,OAAd,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOD,eAAAA,CAAgBE,WAAvB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAsC,IAAtC;AACD;AAEM,SAASJ,cAAT,CACLE,MADK,EAELG,eAFK,EAGL;EACA,IAAMD,WAAW,GAAGH,cAAc,CAACC,MAAD,CAAlC;EAEA,IAAMI,eAAe,GAAG,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,kBAAA,EAAmBD,eAAnB,CAAxB;EACA,IAAIC,eAAJ,KAAA,IAAA,IAAIA,eAAJ,KAAA,KAAA,CAAA,IAAIA,eAAe,CAAEC,CAArB,EAAwB;IACtBD,eAAe,CAACC,CAAhBD,CAAkB,qBAAlBA,CAAAA,GAA2CE,MAAM,CAACJ,WAAD,CAAjDE;EACD;EAED,OAAOD,eAAP;AACD;AAEM,SAASI,0BAAT,CAAoCJ,eAApC,EAAsF;EAC3F,IAAMC,eAAe,GAAG,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,kBAAA,EAAmBD,eAAnB,CAAxB;EAEA,IAAIC,eAAJ,KAAA,IAAA,IAAIA,eAAJ,KAAA,KAAA,CAAA,IAAIA,eAAe,CAAEC,CAArB,EAAwB;IACtB,OAAOC,MAAM,CAACF,eAAe,CAACC,CAAhBD,CAAkB,qBAAlBA,CAAD,CAANE,KAAqD,MAA5D;EACD;EAED,OAAO,IAAP;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainApplication, StringBoolean } from './Manifest';\n\nexport const withAllowBackup = createAndroidManifestPlugin(setAllowBackup, 'withAllowBackup');\n\nexport function getAllowBackup(config: Pick<ExpoConfig, 'android'>) {\n  // Defaults to true.\n  // https://docs.expo.dev/versions/latest/config/app/#allowbackup\n  return config.android?.allowBackup ?? true;\n}\n\nexport function setAllowBackup(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const allowBackup = getAllowBackup(config);\n\n  const mainApplication = getMainApplication(androidManifest);\n  if (mainApplication?.$) {\n    mainApplication.$['android:allowBackup'] = String(allowBackup) as StringBoolean;\n  }\n\n  return androidManifest;\n}\n\nexport function getAllowBackupFromManifest(androidManifest: AndroidManifest): boolean | null {\n  const mainApplication = getMainApplication(androidManifest);\n\n  if (mainApplication?.$) {\n    return String(mainApplication.$['android:allowBackup']) === 'true';\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"script"}