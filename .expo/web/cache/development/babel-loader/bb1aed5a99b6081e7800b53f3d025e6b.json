{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useOnPreventRemove;\nexports.shouldPreventRemove = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nvar shouldPreventRemove = function shouldPreventRemove(emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) {\n  var _action$VISITED_ROUTE;\n  var nextRouteKeys = nextRoutes.map(function (route) {\n    return route.key;\n  });\n  var removedRoutes = currentRoutes.filter(function (route) {\n    return !nextRouteKeys.includes(route.key);\n  }).reverse();\n  var visitedRouteKeys = (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();\n  var beforeRemoveAction = Object.assign({}, action, (0, _defineProperty2.default)({}, VISITED_ROUTE_KEYS, visitedRouteKeys));\n  for (var route of removedRoutes) {\n    var _beforeRemoveListener;\n    if (visitedRouteKeys.has(route.key)) {\n      continue;\n    }\n    var isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n    if (isPrevented) {\n      return true;\n    }\n    visitedRouteKeys.add(route.key);\n    var event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: {\n        action: beforeRemoveAction\n      },\n      canPreventDefault: true\n    });\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n  return false;\n};\nexports.shouldPreventRemove = shouldPreventRemove;\nfunction useOnPreventRemove(_ref) {\n  var getState = _ref.getState,\n    emitter = _ref.emitter,\n    beforeRemoveListeners = _ref.beforeRemoveListeners;\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n    addKeyedListener = _React$useContext.addKeyedListener;\n  var route = React.useContext(_NavigationRouteContext.default);\n  var routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(function () {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, function (action) {\n        var state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}","map":{"version":3,"sources":["useOnPreventRemove.tsx"],"names":["VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","currentRoutes","nextRoutes","action","nextRouteKeys","map","route","key","removedRoutes","filter","includes","reverse","visitedRouteKeys","Set","beforeRemoveAction","has","isPrevented","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","useOnPreventRemove","getState","addKeyedListener","React","useContext","NavigationBuilderContext","NavigationRouteContext","routeKey","useEffect","state","routes"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"]},"metadata":{},"sourceType":"script"}