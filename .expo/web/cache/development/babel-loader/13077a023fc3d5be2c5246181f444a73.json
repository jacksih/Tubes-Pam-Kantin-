{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuildGradlePropsConfigPlugin = createBuildGradlePropsConfigPlugin;\nexports.updateAndroidBuildPropertiesFromConfig = updateAndroidBuildPropertiesFromConfig;\nexports.updateAndroidBuildProperty = updateAndroidBuildProperty;\nexports.withJsEngineGradleProps = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction createBuildGradlePropsConfigPlugin(configToPropertyRules, name) {\n  var withUnknown = function withUnknown(config, sourceConfig) {\n    return (0, _androidPlugins().withGradleProperties)(config, function (config) {\n      config.modResults = updateAndroidBuildPropertiesFromConfig(sourceConfig !== null && sourceConfig !== void 0 ? sourceConfig : config, config.modResults, configToPropertyRules);\n      return config;\n    });\n  };\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n  return withUnknown;\n}\nvar withJsEngineGradleProps = createBuildGradlePropsConfigPlugin([{\n  propName: 'expo.jsEngine',\n  propValueGetter: function propValueGetter(config) {\n    var _ref, _config$android$jsEng, _config$android;\n    return (_ref = (_config$android$jsEng = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.jsEngine) !== null && _config$android$jsEng !== void 0 ? _config$android$jsEng : config.jsEngine) !== null && _ref !== void 0 ? _ref : 'jsc';\n  }\n}], 'withJsEngineGradleProps');\nexports.withJsEngineGradleProps = withJsEngineGradleProps;\nfunction updateAndroidBuildPropertiesFromConfig(config, gradleProperties, configToPropertyRules) {\n  for (var configToProperty of configToPropertyRules) {\n    var value = configToProperty.propValueGetter(config);\n    updateAndroidBuildProperty(gradleProperties, configToProperty.propName, value);\n  }\n  return gradleProperties;\n}\nfunction updateAndroidBuildProperty(gradleProperties, name, value, options) {\n  var oldPropIndex = gradleProperties.findIndex(function (prop) {\n    return prop.type === 'property' && prop.key === name;\n  });\n  if (value) {\n    var newProp = {\n      type: 'property',\n      key: name,\n      value: value\n    };\n    if (oldPropIndex >= 0) {\n      gradleProperties[oldPropIndex] = newProp;\n    } else {\n      gradleProperties.push(newProp);\n    }\n  } else if (options !== null && options !== void 0 && options.removePropWhenValueIsNull && oldPropIndex >= 0) {\n    gradleProperties.splice(oldPropIndex, 1);\n  }\n  return gradleProperties;\n}","map":{"version":3,"sources":["../../src/android/BuildProperties.ts"],"names":["createBuildGradlePropsConfigPlugin","configToPropertyRules","name","withUnknown","config","sourceConfig","modResults","updateAndroidBuildPropertiesFromConfig","Object","defineProperty","value","withJsEngineGradleProps","propName","propValueGetter","android","jsEngine","gradleProperties","configToProperty","updateAndroidBuildProperty","options","oldPropIndex","findIndex","prop","type","key","newProp","push","removePropWhenValueIsNull","splice"],"mappings":"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","sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\n\nimport type { ConfigPlugin } from '../Plugin.types';\nimport { withGradleProperties } from '../plugins/android-plugins';\nimport { BuildPropertiesConfig, ConfigToPropertyRuleType } from '../utils/BuildProperties.types';\nimport type { PropertiesItem } from './Properties';\n\n/**\n * Creates a `withGradleProperties` config-plugin based on given config to property mapping rules.\n *\n * The factory supports two modes from generic type inference\n * ```ts\n * // config-plugin without `props`, it will implicitly use the expo config as source config.\n * createBuildGradlePropsConfigPlugin<ExpoConfig>(): ConfigPlugin<void>;\n *\n * // config-plugin with a parameter `props: CustomType`, it will use the `props` as source config.\n * createBuildGradlePropsConfigPlugin<CustomType>(): ConfigPlugin<CustomType>;\n * ```\n *\n * @param configToPropertyRules config to property mapping rules\n * @param name the config plugin name\n */\nexport function createBuildGradlePropsConfigPlugin<SourceConfigType extends BuildPropertiesConfig>(\n  configToPropertyRules: ConfigToPropertyRuleType<SourceConfigType>[],\n  name?: string\n) {\n  const withUnknown: ConfigPlugin<SourceConfigType extends ExpoConfig ? void : SourceConfigType> = (\n    config,\n    sourceConfig\n  ) =>\n    withGradleProperties(config, (config) => {\n      config.modResults = updateAndroidBuildPropertiesFromConfig(\n        (sourceConfig ?? config) as SourceConfigType,\n        config.modResults,\n        configToPropertyRules\n      );\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * A config-plugin to update `android/gradle.properties` from the `jsEngine` in expo config\n */\nexport const withJsEngineGradleProps = createBuildGradlePropsConfigPlugin<ExpoConfig>(\n  [\n    {\n      propName: 'expo.jsEngine',\n      propValueGetter: (config) => config.android?.jsEngine ?? config.jsEngine ?? 'jsc',\n    },\n  ],\n  'withJsEngineGradleProps'\n);\n\nexport function updateAndroidBuildPropertiesFromConfig<\n  SourceConfigType extends BuildPropertiesConfig\n>(\n  config: SourceConfigType,\n  gradleProperties: PropertiesItem[],\n  configToPropertyRules: ConfigToPropertyRuleType<SourceConfigType>[]\n) {\n  for (const configToProperty of configToPropertyRules) {\n    const value = configToProperty.propValueGetter(config);\n    updateAndroidBuildProperty(gradleProperties, configToProperty.propName, value);\n  }\n\n  return gradleProperties;\n}\n\nexport function updateAndroidBuildProperty(\n  gradleProperties: PropertiesItem[],\n  name: string,\n  value: string | null | undefined,\n  options?: { removePropWhenValueIsNull?: boolean }\n) {\n  const oldPropIndex = gradleProperties.findIndex(\n    (prop) => prop.type === 'property' && prop.key === name\n  );\n\n  if (value) {\n    // found the matched value, add or merge new property\n    const newProp: PropertiesItem = {\n      type: 'property',\n      key: name,\n      value,\n    };\n\n    if (oldPropIndex >= 0) {\n      gradleProperties[oldPropIndex] = newProp;\n    } else {\n      gradleProperties.push(newProp);\n    }\n  } else if (options?.removePropWhenValueIsNull && oldPropIndex >= 0) {\n    gradleProperties.splice(oldPropIndex, 1);\n  }\n\n  return gradleProperties;\n}\n"]},"metadata":{},"sourceType":"script"}