{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyPermissions = applyPermissions;\nexports.createPermissionsPlugin = createPermissionsPlugin;\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:config-plugins:ios:permissions');\nfunction applyPermissions(defaults, permissions, infoPlist) {\n  var entries = Object.entries(defaults);\n  if (entries.length === 0) {\n    debug(\"No defaults provided: \" + JSON.stringify(permissions));\n  }\n  for (var _ref of entries) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var permission = _ref2[0];\n    var description = _ref2[1];\n    if (permissions[permission] === false) {\n      debug(\"Deleting \\\"\" + permission + \"\\\"\");\n      delete infoPlist[permission];\n    } else {\n      infoPlist[permission] = permissions[permission] || infoPlist[permission] || description;\n      debug(\"Setting \\\"\" + permission + \"\\\" to \\\"\" + infoPlist[permission] + \"\\\"\");\n    }\n  }\n  return infoPlist;\n}\nfunction createPermissionsPlugin(defaults, name) {\n  var withIosPermissions = function withIosPermissions(config, permissions) {\n    return (0, _iosPlugins().withInfoPlist)(config, function () {\n      var _ref3 = _asyncToGenerator(function* (config) {\n        config.modResults = applyPermissions(defaults, permissions, config.modResults);\n        return config;\n      });\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  };\n  if (name) {\n    Object.defineProperty(withIosPermissions, 'name', {\n      value: name\n    });\n  }\n  return withIosPermissions;\n}","map":{"version":3,"sources":["../../src/ios/Permissions.ts"],"names":["debug","applyPermissions","defaults","permissions","infoPlist","entries","Object","length","JSON","stringify","permission","description","createPermissionsPlugin","name","withIosPermissions","config","modResults","defineProperty","value"],"mappings":";;;;;;;;;AAAA,SAAA,MAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;EAAA,MAAA,GAAA,kBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAGA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;EAAA,WAAA,GAAA,uBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAGA,IAAMA,KAAK,GAAG,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAM,qCAAN,CAAd;AAEO,SAASC,gBAAT,CACLC,QADK,EAELC,WAFK,EAGLC,SAHK,EAIM;EACX,IAAMC,OAAO,GAAGC,MAAM,CAACD,OAAPC,CAAeJ,QAAfI,CAAhB;EACA,IAAID,OAAO,CAACE,MAARF,KAAmB,CAAvB,EAA0B;IACxBL,KAAK,4BAA0BQ,IAAI,CAACC,SAALD,CAAeL,WAAfK,CAA1B,CAALR;EACD;EACD,iBAAwCK,OAAxC,EAAiD;IAAA;IAAA,IAArCK,UAAD;IAAA,IAAaC,WAAxB;IACE,IAAIR,WAAW,CAACO,UAAD,CAAXP,KAA4B,KAAhC,EAAuC;MACrCH,KAAK,iBAAcU,UAAd,QAALV;MACA,OAAOI,SAAS,CAACM,UAAD,CAAhB;IACD,CAHD,MAGO;MACLN,SAAS,CAACM,UAAD,CAATN,GAAwBD,WAAW,CAACO,UAAD,CAAXP,IAA2BC,SAAS,CAACM,UAAD,CAApCP,IAAoDQ,WAA5EP;MACAJ,KAAK,gBAAaU,UAAW,gBAAQN,SAAS,CAACM,UAAD,CAAzC,QAALV;IACD;EACF;EACD,OAAOI,SAAP;AACD;AAOM,SAASQ,uBAAT,CAELV,QAFK,EAEeW,IAFf,EAE8B;EACnC,IAAMC,kBAAoF,GAAG,SAAvFA,kBAAoF,CACxFC,MAD2F,EAE3FZ,WAF2F;IAAA,OAI3F,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,aAAA,EAAcY,MAAd;MAAA,8BAAsB,WAAOA,MAAP,EAAkB;QACtCA,MAAM,CAACC,UAAPD,GAAoBd,gBAAgB,CAACC,QAAD,EAAWC,WAAX,EAAwBY,MAAM,CAACC,UAA/B,CAApCD;QACA,OAAOA,MAAP;MACD,CAHD;MAAA;QAAA;MAAA;IAAA,IAJF;EAAA;EAQA,IAAIF,IAAJ,EAAU;IACRP,MAAM,CAACW,cAAPX,CAAsBQ,kBAAtBR,EAA0C,MAA1CA,EAAkD;MAChDY,KAAK,EAAEL;IADyC,CAAlDP,CAAAA;EAGD;EACD,OAAOQ,kBAAP;AACD","sourcesContent":["import Debug from 'debug';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withInfoPlist } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nconst debug = Debug('expo:config-plugins:ios:permissions');\n\nexport function applyPermissions<Defaults extends Record<string, string> = Record<string, string>>(\n  defaults: Defaults,\n  permissions: Partial<Record<keyof Defaults, string | false>>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const entries = Object.entries(defaults);\n  if (entries.length === 0) {\n    debug(`No defaults provided: ${JSON.stringify(permissions)}`);\n  }\n  for (const [permission, description] of entries) {\n    if (permissions[permission] === false) {\n      debug(`Deleting \"${permission}\"`);\n      delete infoPlist[permission];\n    } else {\n      infoPlist[permission] = permissions[permission] || infoPlist[permission] || description;\n      debug(`Setting \"${permission}\" to \"${infoPlist[permission]}\"`);\n    }\n  }\n  return infoPlist;\n}\n\n/**\n * Helper method for creating mods to apply default permissions.\n *\n * @param action\n */\nexport function createPermissionsPlugin<\n  Defaults extends Record<string, string> = Record<string, string>\n>(defaults: Defaults, name?: string) {\n  const withIosPermissions: ConfigPlugin<Record<keyof Defaults, string | undefined | false>> = (\n    config,\n    permissions\n  ) =>\n    withInfoPlist(config, async (config) => {\n      config.modResults = applyPermissions(defaults, permissions, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withIosPermissions, 'name', {\n      value: name,\n    });\n  }\n  return withIosPermissions;\n}\n"]},"metadata":{},"sourceType":"script"}