{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStatusBarColor = getStatusBarColor;\nexports.getStatusBarStyle = getStatusBarStyle;\nexports.getStatusBarTranslucent = getStatusBarTranslucent;\nexports.setStatusBarColors = setStatusBarColors;\nexports.setStatusBarStyles = setStatusBarStyles;\nexports.withStatusBar = void 0;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Colors() {\n  var data = require(\"./Colors\");\n  _Colors = function _Colors() {\n    return data;\n  };\n  return data;\n}\nfunction _Styles() {\n  var data = require(\"./Styles\");\n  _Styles = function _Styles() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\nvar WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\nvar WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\nvar withStatusBar = function withStatusBar(config) {\n  config = withStatusBarColors(config);\n  config = withStatusBarStyles(config);\n  return config;\n};\nexports.withStatusBar = withStatusBar;\nvar withStatusBarColors = function withStatusBarColors(config) {\n  return (0, _androidPlugins().withAndroidColors)(config, function (config) {\n    config.modResults = setStatusBarColors(config, config.modResults);\n    return config;\n  });\n};\nvar withStatusBarStyles = function withStatusBarStyles(config) {\n  return (0, _androidPlugins().withAndroidStyles)(config, function (config) {\n    config.modResults = setStatusBarStyles(config, config.modResults);\n    return config;\n  });\n};\nfunction setStatusBarColors(config, colors) {\n  return (0, _Colors().assignColorValue)(colors, {\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: getStatusBarColor(config)\n  });\n}\nfunction setStatusBarStyles(config, styles) {\n  var hexString = getStatusBarColor(config);\n  var floatElement = getStatusBarTranslucent(config);\n  styles = (0, _Styles().assignStylesValue)(styles, {\n    parent: (0, _Styles().getAppThemeLightNoActionBarGroup)(),\n    name: WINDOW_LIGHT_STATUS_BAR,\n    targetApi: '23',\n    value: 'true',\n    add: getStatusBarStyle(config) === 'dark-content'\n  });\n  styles = (0, _Styles().assignStylesValue)(styles, {\n    parent: (0, _Styles().getAppThemeLightNoActionBarGroup)(),\n    name: WINDOW_TRANSLUCENT_STATUS,\n    value: 'true',\n    add: floatElement\n  });\n  styles = (0, _Styles().assignStylesValue)(styles, {\n    parent: (0, _Styles().getAppThemeLightNoActionBarGroup)(),\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: \"@color/\" + COLOR_PRIMARY_DARK_KEY,\n    add: !!hexString\n  });\n  return styles;\n}\nfunction getStatusBarColor(config) {\n  var _config$androidStatus;\n  var backgroundColor = (_config$androidStatus = config.androidStatusBar) === null || _config$androidStatus === void 0 ? void 0 : _config$androidStatus.backgroundColor;\n  if (backgroundColor) {\n    (0, _assert().default)(backgroundColor !== 'translucent', \"androidStatusBar.backgroundColor must be a valid hex string, instead got: \\\"\" + backgroundColor + \"\\\"\");\n  }\n  return backgroundColor;\n}\nfunction getStatusBarTranslucent(config) {\n  var _config$androidStatus2, _config$androidStatus3;\n  return (_config$androidStatus2 = (_config$androidStatus3 = config.androidStatusBar) === null || _config$androidStatus3 === void 0 ? void 0 : _config$androidStatus3.translucent) !== null && _config$androidStatus2 !== void 0 ? _config$androidStatus2 : false;\n}\nfunction getStatusBarStyle(config) {\n  var _config$androidStatus4;\n  return ((_config$androidStatus4 = config.androidStatusBar) === null || _config$androidStatus4 === void 0 ? void 0 : _config$androidStatus4.barStyle) || 'light-content';\n}","map":{"version":3,"sources":["../../src/android/StatusBar.ts"],"names":["COLOR_PRIMARY_DARK_KEY","WINDOW_TRANSLUCENT_STATUS","WINDOW_LIGHT_STATUS_BAR","withStatusBar","config","withStatusBarColors","withStatusBarStyles","modResults","setStatusBarColors","setStatusBarStyles","colors","name","value","getStatusBarColor","styles","hexString","floatElement","getStatusBarTranslucent","parent","targetApi","add","getStatusBarStyle","backgroundColor","androidStatusBar","translucent","barStyle"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidColors, withAndroidStyles } from '../plugins/android-plugins';\nimport { assignColorValue } from './Colors';\nimport { ResourceXML } from './Resources';\nimport { assignStylesValue, getAppThemeLightNoActionBarGroup } from './Styles';\n\n// https://developer.android.com/reference/android/R.attr#colorPrimaryDark\nconst COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\n// https://developer.android.com/reference/android/R.attr#windowTranslucentStatus\nconst WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\n// https://developer.android.com/reference/android/R.attr#windowLightStatusBar\nconst WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nexport const withStatusBar: ConfigPlugin = (config) => {\n  config = withStatusBarColors(config);\n  config = withStatusBarStyles(config);\n  return config;\n};\n\nconst withStatusBarColors: ConfigPlugin = (config) => {\n  return withAndroidColors(config, (config) => {\n    config.modResults = setStatusBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withStatusBarStyles: ConfigPlugin = (config) => {\n  return withAndroidStyles(config, (config) => {\n    config.modResults = setStatusBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setStatusBarColors(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  colors: ResourceXML\n): ResourceXML {\n  return assignColorValue(colors, {\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: getStatusBarColor(config),\n  });\n}\n\nexport function setStatusBarStyles(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  styles: ResourceXML\n): ResourceXML {\n  const hexString = getStatusBarColor(config);\n  const floatElement = getStatusBarTranslucent(config);\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_LIGHT_STATUS_BAR,\n    targetApi: '23',\n    value: 'true',\n    // Default is light-content, don't need to do anything to set it\n    add: getStatusBarStyle(config) === 'dark-content',\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_TRANSLUCENT_STATUS,\n    value: 'true',\n    // translucent status bar set in theme\n    add: floatElement,\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: `@color/${COLOR_PRIMARY_DARK_KEY}`,\n    // Remove the color if translucent is used\n    add: !!hexString,\n  });\n\n  return styles;\n}\n\nexport function getStatusBarColor(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  const backgroundColor = config.androidStatusBar?.backgroundColor;\n  if (backgroundColor) {\n    // Drop support for translucent\n    assert(\n      backgroundColor !== 'translucent',\n      `androidStatusBar.backgroundColor must be a valid hex string, instead got: \"${backgroundColor}\"`\n    );\n  }\n  return backgroundColor;\n}\n\n/**\n * Specifies whether the status bar should be \"translucent\". When true, the status bar is drawn with `position: absolute` and a gray underlay, when false `position: relative` (pushes content down).\n *\n * @default false\n * @param config\n * @returns\n */\nexport function getStatusBarTranslucent(config: Pick<ExpoConfig, 'androidStatusBar'>): boolean {\n  return config.androidStatusBar?.translucent ?? false;\n}\n\nexport function getStatusBarStyle(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  return config.androidStatusBar?.barStyle || 'light-content';\n}\n"]},"metadata":{},"sourceType":"script"}