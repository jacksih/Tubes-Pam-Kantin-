{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationCache;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _routers = require(\"@react-navigation/routers\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\nvar _excluded = [\"emit\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useNavigationCache(_ref) {\n  var state = _ref.state,\n    getState = _ref.getState,\n    navigation = _ref.navigation,\n    _setOptions = _ref.setOptions,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n    stackRef = _React$useContext.stackRef;\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n  var actions = Object.assign({}, router.actionCreators, _routers.CommonActions);\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n        rest = (0, _objectWithoutProperties2.default)(navigation, _excluded);\n      var _dispatch = function dispatch(thunk) {\n        var action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n        if (action != null) {\n          navigation.dispatch(Object.assign({\n            source: route.key\n          }, action));\n        }\n      };\n      var withStack = function withStack(callback) {\n        var isStackSet = false;\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return withStack(function () {\n            return _dispatch(actions[name].apply(actions, args));\n          });\n        };\n        return acc;\n      }, {});\n      acc[route.key] = Object.assign({}, rest, helpers, emitter.create(route.key), {\n        dispatch: function dispatch(thunk) {\n          return withStack(function () {\n            return _dispatch(thunk);\n          });\n        },\n        getParent: function getParent(id) {\n          if (id !== undefined && id === rest.getId()) {\n            return acc[route.key];\n          }\n          return rest.getParent(id);\n        },\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return Object.assign({}, o, (0, _defineProperty2.default)({}, route.key, Object.assign({}, o[route.key], options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["useNavigationCache","state","getState","navigation","setOptions","router","emitter","stackRef","React","useContext","NavigationBuilderContext","cache","useMemo","current","actions","actionCreators","CommonActions","routes","reduce","acc","route","previous","key","emit","rest","dispatch","thunk","action","source","withStack","callback","isStackSet","process","env","NODE_ENV","Error","stack","undefined","helpers","keys","name","args","create","getParent","id","getId","options","o","isFocused","index"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap\n  >\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        getParent: (id?: string) => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"script"}