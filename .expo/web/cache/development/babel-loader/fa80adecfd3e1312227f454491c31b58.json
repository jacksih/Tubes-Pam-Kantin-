{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useOnAction;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\nvar _useOnPreventRemove = _interopRequireWildcard(require(\"./useOnPreventRemove\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useOnAction(_ref) {\n  var router = _ref.router,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    key = _ref.key,\n    actionListeners = _ref.actionListeners,\n    beforeRemoveListeners = _ref.beforeRemoveListeners,\n    routerConfigOptions = _ref.routerConfigOptions,\n    emitter = _ref.emitter;\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n    onActionParent = _React$useContext.onAction,\n    onRouteFocusParent = _React$useContext.onRouteFocus,\n    addListenerParent = _React$useContext.addListener,\n    onDispatchAction = _React$useContext.onDispatchAction;\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n    visitedNavigators.add(state.key);\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n      result = result === null && action.target === state.key ? state : result;\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n        if (state !== result) {\n          var isPrevented = (0, _useOnPreventRemove.shouldPreventRemove)(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n          if (isPrevented) {\n            return true;\n          }\n          setState(result);\n        }\n        if (onRouteFocusParent !== undefined) {\n          var shouldFocus = router.shouldActionChangeFocus(action);\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n        return true;\n      }\n    }\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    for (var i = actionListeners.length - 1; i >= 0; i--) {\n      var listener = actionListeners[i];\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  (0, _useOnPreventRemove.default)({\n    getState: getState,\n    emitter: emitter,\n    beforeRemoveListeners: beforeRemoveListeners\n  });\n  React.useEffect(function () {\n    return addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction);\n  }, [addListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"sources":["useOnAction.tsx"],"names":["useOnAction","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","onAction","onActionParent","onRouteFocus","onRouteFocusParent","addListener","addListenerParent","onDispatchAction","React","useContext","NavigationBuilderContext","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","isPrevented","shouldPreventRemove","routes","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener","useOnPreventRemove"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef =\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(\n    () => addListenerParent?.('action', onAction),\n    [addListenerParent, onAction]\n  );\n\n  return onAction;\n}\n"]},"metadata":{},"sourceType":"script"}