{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assignColorValue = assignColorValue;\nexports.getColorsAsObject = getColorsAsObject;\nexports.getObjectAsColorsXml = getObjectAsColorsXml;\nexports.getProjectColorsXMLPathAsync = getProjectColorsXMLPathAsync;\nexports.removeColorItem = removeColorItem;\nexports.setColorItem = setColorItem;\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _Resources() {\n  var data = require(\"./Resources\");\n  _Resources = function _Resources() {\n    return data;\n  };\n  return data;\n}\nfunction getProjectColorsXMLPathAsync(projectRoot) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    kind = _ref.kind;\n  return (0, _Paths().getResourceXMLPathAsync)(projectRoot, {\n    kind: kind,\n    name: 'colors'\n  });\n}\nfunction setColorItem(itemToAdd, colorFileContentsJSON) {\n  var _colorFileContentsJSO;\n  if ((_colorFileContentsJSO = colorFileContentsJSON.resources) !== null && _colorFileContentsJSO !== void 0 && _colorFileContentsJSO.color) {\n    var colorNameExists = colorFileContentsJSON.resources.color.filter(function (e) {\n      return e.$.name === itemToAdd.$.name;\n    })[0];\n    if (colorNameExists) {\n      colorNameExists._ = itemToAdd._;\n    } else {\n      colorFileContentsJSON.resources.color.push(itemToAdd);\n    }\n  } else {\n    if (!colorFileContentsJSON.resources || typeof colorFileContentsJSON.resources === 'string') {\n      colorFileContentsJSON.resources = {};\n    }\n    colorFileContentsJSON.resources.color = [itemToAdd];\n  }\n  return colorFileContentsJSON;\n}\nfunction removeColorItem(named, contents) {\n  var _contents$resources;\n  if ((_contents$resources = contents.resources) !== null && _contents$resources !== void 0 && _contents$resources.color) {\n    var index = contents.resources.color.findIndex(function (e) {\n      return e.$.name === named;\n    });\n    if (index > -1) {\n      contents.resources.color.splice(index, 1);\n    }\n  }\n  return contents;\n}\nfunction assignColorValue(xml, _ref2) {\n  var value = _ref2.value,\n    name = _ref2.name;\n  if (value) {\n    return setColorItem((0, _Resources().buildResourceItem)({\n      name: name,\n      value: value\n    }), xml);\n  }\n  return removeColorItem(name, xml);\n}\nfunction getColorsAsObject(xml) {\n  var _xml$resources;\n  if (!(xml !== null && xml !== void 0 && (_xml$resources = xml.resources) !== null && _xml$resources !== void 0 && _xml$resources.color)) {\n    return null;\n  }\n  return (0, _Resources().getResourceItemsAsObject)(xml.resources.color);\n}\nfunction getObjectAsColorsXml(obj) {\n  return {\n    resources: {\n      color: (0, _Resources().getObjectAsResourceItems)(obj)\n    }\n  };\n}","map":{"version":3,"sources":["../../src/android/Colors.ts"],"names":["getProjectColorsXMLPathAsync","projectRoot","kind","name","setColorItem","itemToAdd","colorFileContentsJSON","resources","color","colorNameExists","filter","e","$","_","push","removeColorItem","named","contents","index","findIndex","splice","assignColorValue","xml","value","getColorsAsObject","getObjectAsColorsXml","obj"],"mappings":"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","sourcesContent":["import { getResourceXMLPathAsync } from './Paths';\nimport {\n  buildResourceItem,\n  getObjectAsResourceItems,\n  getResourceItemsAsObject,\n  ResourceItemXML,\n  ResourceKind,\n  ResourceXML,\n} from './Resources';\n\nexport function getProjectColorsXMLPathAsync(\n  projectRoot: string,\n  { kind }: { kind?: ResourceKind } = {}\n) {\n  return getResourceXMLPathAsync(projectRoot, { kind, name: 'colors' });\n}\n\nexport function setColorItem(itemToAdd: ResourceItemXML, colorFileContentsJSON: ResourceXML) {\n  if (colorFileContentsJSON.resources?.color) {\n    const colorNameExists = colorFileContentsJSON.resources.color.filter(\n      (e: ResourceItemXML) => e.$.name === itemToAdd.$.name\n    )[0];\n    if (colorNameExists) {\n      colorNameExists._ = itemToAdd._;\n    } else {\n      colorFileContentsJSON.resources.color.push(itemToAdd);\n    }\n  } else {\n    if (!colorFileContentsJSON.resources || typeof colorFileContentsJSON.resources === 'string') {\n      //file was empty and JSON is `{resources : ''}`\n      colorFileContentsJSON.resources = {};\n    }\n    colorFileContentsJSON.resources.color = [itemToAdd];\n  }\n  return colorFileContentsJSON;\n}\n\nexport function removeColorItem(named: string, contents: ResourceXML) {\n  if (contents.resources?.color) {\n    const index = contents.resources.color.findIndex((e: ResourceItemXML) => e.$.name === named);\n    if (index > -1) {\n      // replace the previous value\n      contents.resources.color.splice(index, 1);\n    }\n  }\n  return contents;\n}\n\n/**\n * Set or remove value in XML based on nullish factor of the `value` property.\n */\nexport function assignColorValue(\n  xml: ResourceXML,\n  {\n    value,\n    name,\n  }: {\n    value?: string | null;\n    name: string;\n  }\n) {\n  if (value) {\n    return setColorItem(\n      buildResourceItem({\n        name,\n        value,\n      }),\n      xml\n    );\n  }\n\n  return removeColorItem(name, xml);\n}\n\n/**\n * Helper to convert a basic XML object into a simple k/v pair.\n * `colors.xml` is a very basic XML file so this is pretty safe to do.\n * Added for testing purposes.\n *\n * @param xml\n * @returns\n */\nexport function getColorsAsObject(xml: ResourceXML): Record<string, string> | null {\n  if (!xml?.resources?.color) {\n    return null;\n  }\n\n  return getResourceItemsAsObject(xml.resources.color);\n}\n\n/**\n * Helper to convert a basic k/v object to a colors XML object.\n *\n * @param xml\n * @returns\n */\nexport function getObjectAsColorsXml(obj: Record<string, string>): ResourceXML {\n  return {\n    resources: {\n      color: getObjectAsResourceItems(obj),\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}