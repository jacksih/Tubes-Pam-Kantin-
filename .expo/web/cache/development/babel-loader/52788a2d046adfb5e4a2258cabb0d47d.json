{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWatchFolders = getWatchFolders;\nexports.globAllPackageJsonPaths = globAllPackageJsonPaths;\nexports.resolveAllWorkspacePackageJsonPaths = resolveAllWorkspacePackageJsonPaths;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _glob() {\n  var data = require(\"glob\");\n  _glob = function _glob() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _getModulesPaths() {\n  var data = require(\"./getModulesPaths\");\n  _getModulesPaths = function _getModulesPaths() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction globAllPackageJsonPaths(workspaceProjectRoot, linkedPackages) {\n  return linkedPackages.map(function (glob) {\n    return (0, _glob().sync)(_path().default.join(glob, 'package.json').replace(/\\\\/g, '/'), {\n      cwd: workspaceProjectRoot,\n      absolute: true,\n      ignore: ['**/@(Carthage|Pods|node_modules)/**']\n    }).map(function (pkgPath) {\n      try {\n        _jsonFile().default.read(pkgPath);\n        return pkgPath;\n      } catch (_unused) {}\n      return null;\n    });\n  }).flat().filter(Boolean).map(function (p) {\n    return _path().default.join(p);\n  });\n}\nfunction getWorkspacePackagesArray(_ref) {\n  var workspaces = _ref.workspaces;\n  if (Array.isArray(workspaces)) {\n    return workspaces;\n  }\n  (0, _assert().default)(workspaces === null || workspaces === void 0 ? void 0 : workspaces.packages, 'Could not find a `workspaces` object in the root package.json');\n  return workspaces.packages;\n}\nfunction resolveAllWorkspacePackageJsonPaths(workspaceProjectRoot) {\n  try {\n    var rootPackageJsonFilePath = _path().default.join(workspaceProjectRoot, 'package.json');\n    var rootPackageJson = _jsonFile().default.read(rootPackageJsonFilePath);\n    var packages = getWorkspacePackagesArray(rootPackageJson);\n    return globAllPackageJsonPaths(workspaceProjectRoot, packages);\n  } catch (_unused2) {\n    return [];\n  }\n}\nfunction getWatchFolders(projectRoot) {\n  var workspaceRoot = (0, _getModulesPaths().getWorkspaceRoot)(_path().default.resolve(projectRoot));\n  if (!workspaceRoot) {\n    return [];\n  }\n  var packages = resolveAllWorkspacePackageJsonPaths(workspaceRoot);\n  if (!packages.length) {\n    return [];\n  }\n  return uniqueItems([_path().default.join(workspaceRoot, 'node_modules')].concat(_toConsumableArray(packages.map(function (pkg) {\n    return _path().default.dirname(pkg);\n  }))));\n}\nfunction uniqueItems(items) {\n  return _toConsumableArray(new Set(items));\n}","map":{"version":3,"sources":["../src/getWatchFolders.ts"],"names":["globAllPackageJsonPaths","workspaceProjectRoot","linkedPackages","map","glob","path","join","replace","cwd","absolute","ignore","pkgPath","JsonFile","read","flat","filter","Boolean","p","getWorkspacePackagesArray","workspaces","Array","isArray","packages","resolveAllWorkspacePackageJsonPaths","rootPackageJsonFilePath","rootPackageJson","getWatchFolders","projectRoot","workspaceRoot","resolve","length","uniqueItems","pkg","dirname","items","Set"],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport assert from 'assert';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport { getWorkspaceRoot } from './getModulesPaths';\n\n/**\n * @param workspaceProjectRoot Root file path for the yarn workspace\n * @param linkedPackages List of folders that contain linked node modules, ex: `['packages/*', 'apps/*']`\n * @returns List of valid package.json file paths, ex: `['/Users/me/app/apps/my-app/package.json', '/Users/me/app/packages/my-package/package.json']`\n */\nexport function globAllPackageJsonPaths(\n  workspaceProjectRoot: string,\n  linkedPackages: string[]\n): string[] {\n  return linkedPackages\n    .map((glob) => {\n      return globSync(path.join(glob, 'package.json').replace(/\\\\/g, '/'), {\n        cwd: workspaceProjectRoot,\n        absolute: true,\n        ignore: ['**/@(Carthage|Pods|node_modules)/**'],\n      }).map((pkgPath) => {\n        try {\n          JsonFile.read(pkgPath);\n          return pkgPath;\n        } catch {\n          // Skip adding path if the package.json is invalid or cannot be read.\n        }\n        return null;\n      });\n    })\n    .flat()\n    .filter(Boolean)\n    .map((p) => path.join(p as string));\n}\n\nfunction getWorkspacePackagesArray({ workspaces }: any): string[] {\n  if (Array.isArray(workspaces)) {\n    return workspaces;\n  }\n\n  assert(workspaces?.packages, 'Could not find a `workspaces` object in the root package.json');\n\n  return workspaces.packages;\n}\n\n/**\n * @param workspaceProjectRoot root file path for a yarn workspace.\n * @returns list of package.json file paths that are linked to the yarn workspace.\n */\nexport function resolveAllWorkspacePackageJsonPaths(workspaceProjectRoot: string) {\n  try {\n    const rootPackageJsonFilePath = path.join(workspaceProjectRoot, 'package.json');\n    // Could throw if package.json is invalid.\n    const rootPackageJson = JsonFile.read(rootPackageJsonFilePath);\n\n    // Extract the \"packages\" array or use \"workspaces\" as packages array (yarn workspaces spec).\n    const packages = getWorkspacePackagesArray(rootPackageJson);\n\n    // Glob all package.json files and return valid paths.\n    return globAllPackageJsonPaths(workspaceProjectRoot, packages);\n  } catch {\n    return [];\n  }\n}\n\n/**\n * @param projectRoot file path to app's project root\n * @returns list of node module paths to watch in Metro bundler, ex: `['/Users/me/app/node_modules/', '/Users/me/app/apps/my-app/', '/Users/me/app/packages/my-package/']`\n */\nexport function getWatchFolders(projectRoot: string): string[] {\n  const workspaceRoot = getWorkspaceRoot(path.resolve(projectRoot));\n  // Rely on default behavior in standard projects.\n  if (!workspaceRoot) {\n    return [];\n  }\n\n  const packages = resolveAllWorkspacePackageJsonPaths(workspaceRoot);\n  if (!packages.length) {\n    return [];\n  }\n\n  return uniqueItems([\n    path.join(workspaceRoot, 'node_modules'),\n    ...packages.map((pkg) => path.dirname(pkg)),\n  ]);\n}\n\nfunction uniqueItems(items: string[]): string[] {\n  return [...new Set(items)];\n}\n"]},"metadata":{},"sourceType":"script"}