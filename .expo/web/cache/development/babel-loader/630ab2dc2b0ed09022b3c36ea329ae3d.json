{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getStateFromPath;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _escapeStringRegexp = _interopRequireDefault(require(\"escape-string-regexp\"));\nvar queryString = _interopRequireWildcard(require(\"query-string\"));\nvar _findFocusedRoute = _interopRequireDefault(require(\"./findFocusedRoute\"));\nvar _validatePathConfig = _interopRequireDefault(require(\"./validatePathConfig\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction getStateFromPath(path, options) {\n  var _ref;\n  if (options) {\n    (0, _validatePathConfig.default)(options);\n  }\n  var initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  var screens = options === null || options === void 0 ? void 0 : options.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : remaining + \"/\";\n  if (screens === undefined) {\n    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n      var name = decodeURIComponent(segment);\n      return {\n        name: name\n      };\n    });\n    if (_routes.length) {\n      return createNestedStateObject(path, _routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      if (aParts[i] == null) {\n        return 1;\n      }\n      if (bParts[i] == null) {\n        return -1;\n      }\n      var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      if (aWildCard) {\n        return 1;\n      }\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\" + config.pattern + \"' resolves to both '\" + a.join(' > ') + \"' and '\" + b.join(' > ') + \"'. Patterns must be unique and cannot resolve to more than one screen.\");\n      }\n    }\n    return Object.assign(acc, (0, _defineProperty2.default)({}, config.pattern, config));\n  }, {});\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(function (name) {\n        return {\n          name: name\n        };\n      }), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n      return Object.assign({}, c, {\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    })),\n    routes = _matchAgainstConfigs.routes,\n    remainingPath = _matchAgainstConfigs.remainingPath;\n  if (routes !== undefined) {\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var _loop = function _loop(config) {\n    if (!config.regex) {\n      return \"continue\";\n    }\n    var match = remainingPath.match(config.regex);\n    if (match) {\n      var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      }).reduce(function (acc, p, i) {\n        return Object.assign(acc, (0, _defineProperty2.default)({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n      }, {});\n      routes = config.routeNames.map(function (name) {\n        var _config$path;\n        var config = configs.find(function (c) {\n          return c.screen === name;\n        });\n        var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p) {\n          var value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name: name,\n            params: params\n          };\n        }\n        return {\n          name: name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n  for (var config of configs) {\n    var _config$pattern;\n    var _ret = _loop(config);\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, _pattern2, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n        var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, (0, _toConsumableArray2.default)(parentScreens), (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\" + pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\" + (it.endsWith('?') ? '?' : '') + \")\";\n    }\n    return (it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)) + \"\\\\/\";\n  }).join('') + \")\") : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: (0, _toConsumableArray2.default)(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, Object.assign({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [Object.assign({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = (0, _findFocusedRoute.default)(state);\n  route.path = path;\n  var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = Object.assign({}, route.params, params);\n  }\n  return state;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"sources":["getStateFromPath.tsx"],"names":["getStateFromPath","path","options","validatePathConfig","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","joinPaths","paths","p","matchedParams","params","value","parse","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","escape","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","findFocusedRoute","parseQueryParams","parseConfig","query","queryString","hasOwnProperty","call"],"mappings":"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","sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"script"}