{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGoogleServicesFile = getGoogleServicesFile;\nexports.getGoogleSignInReservedClientId = getGoogleSignInReservedClientId;\nexports.setGoogleConfig = setGoogleConfig;\nexports.setGoogleServicesFile = setGoogleServicesFile;\nexports.setGoogleSignInReservedClientId = setGoogleSignInReservedClientId;\nexports.withGoogleServicesFile = exports.withGoogle = void 0;\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n  _plist = function _plist() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _Scheme() {\n  var data = require(\"./Scheme\");\n  _Scheme = function _Scheme() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withGoogle = function withGoogle(config) {\n  return (0, _iosPlugins().withInfoPlist)(config, function (config) {\n    config.modResults = setGoogleConfig(config, config.modResults, config.modRequest);\n    return config;\n  });\n};\nexports.withGoogle = withGoogle;\nvar withGoogleServicesFile = function withGoogleServicesFile(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults\n    });\n    return config;\n  });\n};\nexports.withGoogleServicesFile = withGoogleServicesFile;\nfunction readGoogleServicesInfoPlist(relativePath, _ref) {\n  var projectRoot = _ref.projectRoot;\n  var googleServiceFilePath = _path().default.resolve(projectRoot, relativePath);\n  var contents = _fs().default.readFileSync(googleServiceFilePath, 'utf8');\n  (0, _assert().default)(contents, 'GoogleService-Info.plist is empty');\n  return _plist().default.parse(contents);\n}\nfunction getGoogleSignInReservedClientId(config, modRequest) {\n  var _config$ios$config$go, _config$ios, _config$ios$config, _config$ios$config$go2, _infoPlist$REVERSED_C;\n  var reservedClientId = (_config$ios$config$go = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : (_config$ios$config$go2 = _config$ios$config.googleSignIn) === null || _config$ios$config$go2 === void 0 ? void 0 : _config$ios$config$go2.reservedClientId) !== null && _config$ios$config$go !== void 0 ? _config$ios$config$go : null;\n  if (reservedClientId) {\n    return reservedClientId;\n  }\n  var googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return null;\n  }\n  var infoPlist = readGoogleServicesInfoPlist(googleServicesFileRelativePath, modRequest);\n  return (_infoPlist$REVERSED_C = infoPlist.REVERSED_CLIENT_ID) !== null && _infoPlist$REVERSED_C !== void 0 ? _infoPlist$REVERSED_C : null;\n}\nfunction getGoogleServicesFile(config) {\n  var _config$ios$googleSer, _config$ios2;\n  return (_config$ios$googleSer = (_config$ios2 = config.ios) === null || _config$ios2 === void 0 ? void 0 : _config$ios2.googleServicesFile) !== null && _config$ios$googleSer !== void 0 ? _config$ios$googleSer : null;\n}\nfunction setGoogleSignInReservedClientId(config, infoPlist, modRequest) {\n  var reservedClientId = getGoogleSignInReservedClientId(config, modRequest);\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n  return (0, _Scheme().appendScheme)(reservedClientId, infoPlist);\n}\nfunction setGoogleConfig(config, infoPlist, modRequest) {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist, modRequest);\n  return infoPlist;\n}\nfunction setGoogleServicesFile(config, _ref2) {\n  var projectRoot = _ref2.projectRoot,\n    project = _ref2.project;\n  var googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n  var googleServiceFilePath = _path().default.resolve(projectRoot, googleServicesFileRelativePath);\n  _fs().default.copyFileSync(googleServiceFilePath, _path().default.join((0, _Paths().getSourceRoot)(projectRoot), 'GoogleService-Info.plist'));\n  var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n  var plistFilePath = projectName + \"/GoogleService-Info.plist\";\n  if (!project.hasFile(plistFilePath)) {\n    project = (0, _Xcodeproj().addResourceFileToGroup)({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project: project,\n      isBuildFile: true,\n      verbose: true\n    });\n  }\n  return project;\n}","map":{"version":3,"sources":["../../src/ios/Google.ts"],"names":["withGoogle","config","modResults","setGoogleConfig","modRequest","withGoogleServicesFile","setGoogleServicesFile","projectRoot","project","readGoogleServicesInfoPlist","relativePath","googleServiceFilePath","path","resolve","contents","fs","readFileSync","plist","parse","getGoogleSignInReservedClientId","reservedClientId","ios","googleSignIn","googleServicesFileRelativePath","getGoogleServicesFile","infoPlist","REVERSED_CLIENT_ID","googleServicesFile","setGoogleSignInReservedClientId","copyFileSync","join","projectName","plistFilePath","hasFile","filepath","groupName","isBuildFile","verbose"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin, ModProps } from '../Plugin.types';\nimport { withInfoPlist, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { getSourceRoot } from './Paths';\nimport { appendScheme } from './Scheme';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nexport const withGoogle: ConfigPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults = setGoogleConfig(config, config.modResults, config.modRequest);\n    return config;\n  });\n};\n\nexport const withGoogleServicesFile: ConfigPlugin = (config) => {\n  return withXcodeProject(config, (config) => {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nfunction readGoogleServicesInfoPlist(\n  relativePath: string,\n  { projectRoot }: { projectRoot: string }\n) {\n  const googleServiceFilePath = path.resolve(projectRoot, relativePath);\n  const contents = fs.readFileSync(googleServiceFilePath, 'utf8');\n  assert(contents, 'GoogleService-Info.plist is empty');\n  return plist.parse(contents);\n}\n\nexport function getGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): string | null {\n  const reservedClientId = config.ios?.config?.googleSignIn?.reservedClientId ?? null;\n  if (reservedClientId) {\n    return reservedClientId;\n  }\n\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return null;\n  }\n\n  const infoPlist = readGoogleServicesInfoPlist(googleServicesFileRelativePath, modRequest);\n\n  return infoPlist.REVERSED_CLIENT_ID ?? null;\n}\n\nexport function getGoogleServicesFile(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.googleServicesFile ?? null;\n}\n\nexport function setGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): InfoPlist {\n  const reservedClientId = getGoogleSignInReservedClientId(config, modRequest);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return appendScheme(reservedClientId, infoPlist);\n}\n\nexport function setGoogleConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: ModProps<InfoPlist>\n): InfoPlist {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist, modRequest);\n  return infoPlist;\n}\n\nexport function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'ios'>,\n  { projectRoot, project }: { project: XcodeProject; projectRoot: string }\n): XcodeProject {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  const googleServiceFilePath = path.resolve(projectRoot, googleServicesFileRelativePath);\n  fs.copyFileSync(\n    googleServiceFilePath,\n    path.join(getSourceRoot(projectRoot), 'GoogleService-Info.plist')\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = addResourceFileToGroup({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project,\n      isBuildFile: true,\n      verbose: true,\n    });\n  }\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}