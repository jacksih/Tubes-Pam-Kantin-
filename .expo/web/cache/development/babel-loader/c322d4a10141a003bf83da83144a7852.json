{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"CFBundleDisplayName\"],\n  _excluded2 = [\"CFBundleName\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getName = getName;\nexports.setDisplayName = setDisplayName;\nexports.setName = setName;\nexports.setProductName = setProductName;\nexports.withProductName = exports.withName = exports.withDisplayName = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Target() {\n  var data = require(\"./Target\");\n  _Target = function _Target() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nvar withDisplayName = (0, _iosPlugins().createInfoPlistPluginWithPropertyGuard)(setDisplayName, {\n  infoPlistProperty: 'CFBundleDisplayName',\n  expoConfigProperty: 'name'\n}, 'withDisplayName');\nexports.withDisplayName = withDisplayName;\nvar withName = (0, _iosPlugins().createInfoPlistPluginWithPropertyGuard)(setName, {\n  infoPlistProperty: 'CFBundleName',\n  expoConfigProperty: 'name'\n}, 'withName');\nexports.withName = withName;\nvar withProductName = function withProductName(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    config.modResults = setProductName(config, config.modResults);\n    return config;\n  });\n};\nexports.withProductName = withProductName;\nfunction getName(config) {\n  return typeof config.name === 'string' ? config.name : null;\n}\nfunction setDisplayName(configOrName, _ref) {\n  var CFBundleDisplayName = _ref.CFBundleDisplayName,\n    infoPlist = _objectWithoutProperties(_ref, _excluded);\n  var name = null;\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n  if (!name) {\n    return infoPlist;\n  }\n  return Object.assign({}, infoPlist, {\n    CFBundleDisplayName: name\n  });\n}\nfunction setName(config, _ref2) {\n  var CFBundleName = _ref2.CFBundleName,\n    infoPlist = _objectWithoutProperties(_ref2, _excluded2);\n  var name = getName(config);\n  if (!name) {\n    return infoPlist;\n  }\n  return Object.assign({}, infoPlist, {\n    CFBundleName: name\n  });\n}\nfunction setProductName(config, project) {\n  var _getName;\n  var name = (0, _Xcodeproj().sanitizedName)((_getName = getName(config)) !== null && _getName !== void 0 ? _getName : '');\n  if (!name) {\n    return project;\n  }\n  var quotedName = ensureQuotes(name);\n  var _ref3 = (0, _Target().findFirstNativeTarget)(project),\n    _ref4 = _slicedToArray(_ref3, 2),\n    nativeTarget = _ref4[1];\n  (0, _Xcodeproj().getBuildConfigurationsForListId)(project, nativeTarget.buildConfigurationList).forEach(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      item = _ref6[1];\n    item.buildSettings.PRODUCT_NAME = quotedName;\n  });\n  return project;\n}\nvar ensureQuotes = function ensureQuotes(value) {\n  if (!value.match(/^['\"]/)) {\n    return \"\\\"\" + value + \"\\\"\";\n  }\n  return value;\n};","map":{"version":3,"sources":["../../src/ios/Name.ts"],"names":["withDisplayName","setDisplayName","infoPlistProperty","expoConfigProperty","withName","setName","withProductName","config","modResults","setProductName","getName","name","configOrName","CFBundleDisplayName","infoPlist","CFBundleName","project","quotedName","ensureQuotes","nativeTarget","buildConfigurationList","forEach","item","buildSettings","PRODUCT_NAME","value","match"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createInfoPlistPluginWithPropertyGuard, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { findFirstNativeTarget } from './Target';\nimport {\n  ConfigurationSectionEntry,\n  getBuildConfigurationsForListId,\n  sanitizedName,\n} from './utils/Xcodeproj';\n\nexport const withDisplayName = createInfoPlistPluginWithPropertyGuard(\n  setDisplayName,\n  {\n    infoPlistProperty: 'CFBundleDisplayName',\n    expoConfigProperty: 'name',\n  },\n  'withDisplayName'\n);\n\nexport const withName = createInfoPlistPluginWithPropertyGuard(\n  setName,\n  {\n    infoPlistProperty: 'CFBundleName',\n    expoConfigProperty: 'name',\n  },\n  'withName'\n);\n\n/** Set the PRODUCT_NAME variable in the xcproj file based on the app.json name property. */\nexport const withProductName: ConfigPlugin = (config) => {\n  return withXcodeProject(config, (config) => {\n    config.modResults = setProductName(config, config.modResults);\n    return config;\n  });\n};\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\n/**\n * CFBundleDisplayName is used for most things: the name on the home screen, in\n * notifications, and others.\n */\nexport function setDisplayName(\n  configOrName: Pick<ExpoConfig, 'name'> | string,\n  { CFBundleDisplayName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  let name: string | null = null;\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleDisplayName: name,\n  };\n}\n\n/**\n * CFBundleName is recommended to be 16 chars or less and is used in lists, eg:\n * sometimes on the App Store\n */\nexport function setName(\n  config: Pick<ExpoConfig, 'name'>,\n  { CFBundleName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const name = getName(config);\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleName: name,\n  };\n}\n\nexport function setProductName(\n  config: Pick<ExpoConfig, 'name'>,\n  project: XcodeProject\n): XcodeProject {\n  const name = sanitizedName(getName(config) ?? '');\n\n  if (!name) {\n    return project;\n  }\n  const quotedName = ensureQuotes(name);\n\n  const [, nativeTarget] = findFirstNativeTarget(project);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).forEach(\n    ([, item]: ConfigurationSectionEntry) => {\n      item.buildSettings.PRODUCT_NAME = quotedName;\n    }\n  );\n\n  return project;\n}\n\nconst ensureQuotes = (value: string) => {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n"]},"metadata":{},"sourceType":"script"}