{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatDeviceFamilies = formatDeviceFamilies;\nexports.getDeviceFamilies = getDeviceFamilies;\nexports.getIsTabletOnly = getIsTabletOnly;\nexports.getSupportsTablet = getSupportsTablet;\nexports.setDeviceFamily = setDeviceFamily;\nexports.withDeviceFamily = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nvar withDeviceFamily = function withDeviceFamily(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setDeviceFamily(config, {\n        project: config.modResults\n      });\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withDeviceFamily = withDeviceFamily;\nfunction getSupportsTablet(config) {\n  var _config$ios;\n  return !!((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.supportsTablet);\n}\nfunction getIsTabletOnly(config) {\n  var _config$ios2;\n  return !!(config !== null && config !== void 0 && (_config$ios2 = config.ios) !== null && _config$ios2 !== void 0 && _config$ios2.isTabletOnly);\n}\nfunction getDeviceFamilies(config) {\n  var _config$ios3;\n  var supportsTablet = getSupportsTablet(config);\n  var isTabletOnly = getIsTabletOnly(config);\n  if (isTabletOnly && ((_config$ios3 = config.ios) === null || _config$ios3 === void 0 ? void 0 : _config$ios3.supportsTablet) === false) {\n    (0, _warnings().addWarningIOS)('ios.supportsTablet', \"Found contradictory values: `{ ios: { isTabletOnly: true, supportsTablet: false } }`. Using `{ isTabletOnly: true }`.\");\n  }\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    return [1];\n  }\n}\nfunction formatDeviceFamilies(deviceFamilies) {\n  return \"\\\"\" + deviceFamilies.join(',') + \"\\\"\";\n}\nfunction setDeviceFamily(config, _ref2) {\n  var project = _ref2.project;\n  var deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n  var configurations = project.pbxXCBuildConfigurationSection();\n  for (var _ref3 of Object.values(configurations || {})) {\n    var buildSettings = _ref3.buildSettings;\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n  return project;\n}","map":{"version":3,"sources":["../../src/ios/DeviceFamily.ts"],"names":["withDeviceFamily","config","modResults","setDeviceFamily","project","getSupportsTablet","ios","supportsTablet","getIsTabletOnly","isTabletOnly","getDeviceFamilies","formatDeviceFamilies","deviceFamilies","join","configurations","pbxXCBuildConfigurationSection","buildSettings","Object","values","PRODUCT_NAME","TARGETED_DEVICE_FAMILY"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\n\nexport const withDeviceFamily: ConfigPlugin = (config) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setDeviceFamily(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getSupportsTablet(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config.ios?.supportsTablet;\n}\n\nexport function getIsTabletOnly(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config?.ios?.isTabletOnly;\n}\n\nexport function getDeviceFamilies(config: Pick<ExpoConfig, 'ios'>): number[] {\n  const supportsTablet = getSupportsTablet(config);\n  const isTabletOnly = getIsTabletOnly(config);\n\n  if (isTabletOnly && config.ios?.supportsTablet === false) {\n    addWarningIOS(\n      'ios.supportsTablet',\n      `Found contradictory values: \\`{ ios: { isTabletOnly: true, supportsTablet: false } }\\`. Using \\`{ isTabletOnly: true }\\`.`\n    );\n  }\n\n  // 1 is iPhone, 2 is iPad\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    // is iPhone only\n    return [1];\n  }\n}\n\n/**\n * Wrapping the families in double quotes is the only way to set a value with a comma in it.\n *\n * @param deviceFamilies\n */\nexport function formatDeviceFamilies(deviceFamilies: number[]): string {\n  return `\"${deviceFamilies.join(',')}\"`;\n}\n\n/**\n * Add to pbxproj under TARGETED_DEVICE_FAMILY\n */\nexport function setDeviceFamily(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}