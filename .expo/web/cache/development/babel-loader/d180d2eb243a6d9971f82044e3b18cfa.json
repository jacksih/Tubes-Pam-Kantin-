{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.directoryExistsAsync = directoryExistsAsync;\nexports.fileExists = fileExists;\nexports.fileExistsAsync = fileExistsAsync;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction statAsync(_x) {\n  return _statAsync.apply(this, arguments);\n}\nfunction _statAsync() {\n  _statAsync = _asyncToGenerator(function* (file) {\n    try {\n      return yield _fs().default.promises.stat(file);\n    } catch (_unused2) {\n      return null;\n    }\n  });\n  return _statAsync.apply(this, arguments);\n}\nfunction fileExistsAsync(_x2) {\n  return _fileExistsAsync.apply(this, arguments);\n}\nfunction _fileExistsAsync() {\n  _fileExistsAsync = _asyncToGenerator(function* (file) {\n    var _await$statAsync$isFi, _await$statAsync;\n    return (_await$statAsync$isFi = (_await$statAsync = yield statAsync(file)) === null || _await$statAsync === void 0 ? void 0 : _await$statAsync.isFile()) !== null && _await$statAsync$isFi !== void 0 ? _await$statAsync$isFi : false;\n  });\n  return _fileExistsAsync.apply(this, arguments);\n}\nfunction directoryExistsAsync(_x3) {\n  return _directoryExistsAsync.apply(this, arguments);\n}\nfunction _directoryExistsAsync() {\n  _directoryExistsAsync = _asyncToGenerator(function* (file) {\n    var _await$statAsync$isDi, _await$statAsync2;\n    return (_await$statAsync$isDi = (_await$statAsync2 = yield statAsync(file)) === null || _await$statAsync2 === void 0 ? void 0 : _await$statAsync2.isDirectory()) !== null && _await$statAsync$isDi !== void 0 ? _await$statAsync$isDi : false;\n  });\n  return _directoryExistsAsync.apply(this, arguments);\n}\nfunction fileExists(file) {\n  try {\n    return _fs().default.statSync(file).isFile();\n  } catch (_unused) {\n    return false;\n  }\n}","map":{"version":3,"sources":["../../src/utils/modules.ts"],"names":["statAsync","file","fs","promises","stat","fileExistsAsync","isFile","directoryExistsAsync","isDirectory","fileExists","statSync"],"mappings":";;;;;;;;;AAAA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;SAOeA,SAAf;EAAA;AAAA;AAAA;EAAA,+BAAA,WAAyBC,IAAzB,EAAiE;IAC/D,IAAI;MACF,aAAaC,GAAAA,EAAAA,CAAAA,OAAAA,CAAGC,QAAHD,CAAYE,IAAZF,CAAiBD,IAAjBC,CAAb;IACD,CAFD,CAEE,iBAAM;MACN,OAAO,IAAP;IACD;EACF,CAAA;EAAA;AAAA;AAAA,SAEqBG,eAAf;EAAA;AAAA;AAAA;EAAA,qCAAA,WAA+BJ,IAA/B,EAA+D;IAAA,IAAA,qBAAA,EAAA,gBAAA;IACpE,OAAA,CAAA,qBAAA,GAAA,CAAA,gBAAA,SAAcD,SAAS,CAACC,IAAD,CAAvB,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,gBAAA,CAAyBK,MAAzB,EAAP,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAA4C,KAA5C;EACD,CAAA;EAAA;AAAA;AAAA,SAEqBC,oBAAf;EAAA;AAAA;AAAA;EAAA,0CAAA,WAAoCN,IAApC,EAAoE;IAAA,IAAA,qBAAA,EAAA,iBAAA;IACzE,OAAA,CAAA,qBAAA,GAAA,CAAA,iBAAA,SAAcD,SAAS,CAACC,IAAD,CAAvB,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAO,iBAAA,CAAyBO,WAAzB,EAAP,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAiD,KAAjD;EACD,CAAA;EAAA;AAAA;AAEM,SAASC,UAAT,CAAoBR,IAApB,EAA2C;EAChD,IAAI;IACF,OAAOC,GAAAA,EAAAA,CAAAA,OAAAA,CAAGQ,QAAHR,CAAYD,IAAZC,CAAAA,CAAkBI,MAAlBJ,EAAP;EACD,CAFD,CAEE,gBAAM;IACN,OAAO,KAAP;EACD;AACF","sourcesContent":["import fs from 'fs';\n\n/**\n * A non-failing version of async FS stat.\n *\n * @param file\n */\nasync function statAsync(file: string): Promise<fs.Stats | null> {\n  try {\n    return await fs.promises.stat(file);\n  } catch {\n    return null;\n  }\n}\n\nexport async function fileExistsAsync(file: string): Promise<boolean> {\n  return (await statAsync(file))?.isFile() ?? false;\n}\n\nexport async function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await statAsync(file))?.isDirectory() ?? false;\n}\n\nexport function fileExists(file: string): boolean {\n  try {\n    return fs.statSync(file).isFile();\n  } catch {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}