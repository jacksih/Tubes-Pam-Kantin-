{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVersionCode = getVersionCode;\nexports.getVersionName = getVersionName;\nexports.setMinBuildScriptExtVersion = setMinBuildScriptExtVersion;\nexports.setVersionCode = setVersionCode;\nexports.setVersionName = setVersionName;\nexports.withVersion = exports.withBuildScriptExtMinimumVersion = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nvar withVersion = function withVersion(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setVersionCode(config, config.modResults.contents);\n      config.modResults.contents = setVersionName(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.versionCode', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n    return config;\n  });\n};\nexports.withVersion = withVersion;\nvar withBuildScriptExtMinimumVersion = function withBuildScriptExtMinimumVersion(config, props) {\n  return (0, _androidPlugins().withProjectBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setMinBuildScriptExtVersion(config.modResults.contents, props);\n    } else {\n      (0, _warnings().addWarningAndroid)('withBuildScriptExtVersion', \"Cannot automatically configure project build.gradle if it's not groovy\");\n    }\n    return config;\n  });\n};\nexports.withBuildScriptExtMinimumVersion = withBuildScriptExtMinimumVersion;\nfunction setMinBuildScriptExtVersion(buildGradle, _ref) {\n  var name = _ref.name,\n    minVersion = _ref.minVersion;\n  var _buildGradle$match;\n  var regex = new RegExp(\"(\" + name + \"\\\\s?=\\\\s?)(\\\\d+(?:\\\\.\\\\d+)?)\");\n  var currentVersion = (_buildGradle$match = buildGradle.match(regex)) === null || _buildGradle$match === void 0 ? void 0 : _buildGradle$match[2];\n  if (!currentVersion) {\n    (0, _warnings().addWarningAndroid)('withBuildScriptExtVersion', \"Cannot set minimum buildscript.ext.\" + name + \" version because the property \\\"\" + name + \"\\\" cannot be found or does not have a numeric value.\");\n    return buildGradle;\n  }\n  var currentVersionNum = Number(currentVersion);\n  return buildGradle.replace(regex, \"$1\" + Math.max(minVersion, currentVersionNum));\n}\nfunction getVersionName(config) {\n  var _config$version;\n  return (_config$version = config.version) !== null && _config$version !== void 0 ? _config$version : null;\n}\nfunction setVersionName(config, buildGradle) {\n  var versionName = getVersionName(config);\n  if (versionName === null) {\n    return buildGradle;\n  }\n  var pattern = new RegExp(\"versionName \\\".*\\\"\");\n  return buildGradle.replace(pattern, \"versionName \\\"\" + versionName + \"\\\"\");\n}\nfunction getVersionCode(config) {\n  var _config$android$versi, _config$android;\n  return (_config$android$versi = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.versionCode) !== null && _config$android$versi !== void 0 ? _config$android$versi : 1;\n}\nfunction setVersionCode(config, buildGradle) {\n  var versionCode = getVersionCode(config);\n  if (versionCode === null) {\n    return buildGradle;\n  }\n  var pattern = new RegExp(\"versionCode.*\");\n  return buildGradle.replace(pattern, \"versionCode \" + versionCode);\n}","map":{"version":3,"sources":["../../src/android/Version.ts"],"names":["withVersion","config","modResults","language","contents","setVersionCode","setVersionName","withBuildScriptExtMinimumVersion","props","setMinBuildScriptExtVersion","buildGradle","name","minVersion","regex","RegExp","currentVersion","match","currentVersionNum","Number","replace","Math","max","getVersionName","version","versionName","pattern","getVersionCode","android","versionCode"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\n\nexport const withVersion: ConfigPlugin = (config) => {\n  return withAppBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setVersionCode(config, config.modResults.contents);\n      config.modResults.contents = setVersionName(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.versionCode',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/** Sets a numeric version for a value in the project.gradle buildscript.ext object to be at least the provided props.minVersion, if the existing value is greater then no change will be made. */\nexport const withBuildScriptExtMinimumVersion: ConfigPlugin<{\n  name: string;\n  minVersion: number;\n}> = (config, props) => {\n  return withProjectBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setMinBuildScriptExtVersion(config.modResults.contents, props);\n    } else {\n      addWarningAndroid(\n        'withBuildScriptExtVersion',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function setMinBuildScriptExtVersion(\n  buildGradle: string,\n  { name, minVersion }: { name: string; minVersion: number }\n) {\n  const regex = new RegExp(`(${name}\\\\s?=\\\\s?)(\\\\d+(?:\\\\.\\\\d+)?)`);\n  const currentVersion = buildGradle.match(regex)?.[2];\n  if (!currentVersion) {\n    addWarningAndroid(\n      'withBuildScriptExtVersion',\n      `Cannot set minimum buildscript.ext.${name} version because the property \"${name}\" cannot be found or does not have a numeric value.`\n    );\n    // TODO: Maybe just add the property...\n    return buildGradle;\n  }\n\n  const currentVersionNum = Number(currentVersion);\n  return buildGradle.replace(regex, `$1${Math.max(minVersion, currentVersionNum)}`);\n}\n\nexport function getVersionName(config: Pick<ExpoConfig, 'version'>) {\n  return config.version ?? null;\n}\n\nexport function setVersionName(config: Pick<ExpoConfig, 'version'>, buildGradle: string) {\n  const versionName = getVersionName(config);\n  if (versionName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionName \".*\"`);\n  return buildGradle.replace(pattern, `versionName \"${versionName}\"`);\n}\n\nexport function getVersionCode(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.versionCode ?? 1;\n}\n\nexport function setVersionCode(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const versionCode = getVersionCode(config);\n  if (versionCode === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionCode.*`);\n  return buildGradle.replace(pattern, `versionCode ${versionCode}`);\n}\n"]},"metadata":{},"sourceType":"script"}