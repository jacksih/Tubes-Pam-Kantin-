{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDynamicConfig = getDynamicConfig;\nexports.getStaticConfig = getStaticConfig;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = require(\"fs\");\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _Errors() {\n  var data = require(\"./Errors\");\n  _Errors = function _Errors() {\n    return data;\n  };\n  return data;\n}\nfunction _evalConfig() {\n  var data = require(\"./evalConfig\");\n  _evalConfig = function _evalConfig() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction readConfigFile(configFile, context) {\n  if (!(0, _fs().existsSync)(configFile)) {\n    return null;\n  }\n  try {\n    return (0, _evalConfig().evalConfig)(configFile, context);\n  } catch (error) {\n    error.isConfigError = true;\n    error.message = \"Error reading Expo config at \" + configFile + \":\\n\\n\" + error.message;\n    throw error;\n  }\n}\nfunction getDynamicConfig(configPath, request) {\n  var config = readConfigFile(configPath, request);\n  if (config) {\n    return config;\n  }\n  throw new (_Errors().ConfigError)(\"Failed to read config at: \" + configPath, 'INVALID_CONFIG');\n}\nfunction getStaticConfig(configPath) {\n  var config = _jsonFile().default.read(configPath, {\n    json5: true\n  });\n  if (config) {\n    return config;\n  }\n  throw new (_Errors().ConfigError)(\"Failed to read config at: \" + configPath, 'INVALID_CONFIG');\n}","map":{"version":3,"sources":["../src/getConfig.ts"],"names":["readConfigFile","configFile","context","error","isConfigError","message","getDynamicConfig","configPath","request","config","ConfigError","getStaticConfig","read","json5"],"mappings":";;;;;;;AAAA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAGA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,UAAA,CAAA;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,cAAA,CAAA;EAAA,WAAA,GAAA,uBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAIA,SAASA,cAAT,CAAwBC,UAAxB,EAA4CC,OAA5C,EAAiG;EAE/F,IAAI,CAAC,CAAA,CAAA,EAAA,GAAA,EAAA,CAAA,UAAA,EAAWD,UAAX,CAAL,EAA6B;IAC3B,OAAO,IAAP;EACD;EACD,IAAI;IACF,OAAO,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,UAAA,EAAWA,UAAX,EAAuBC,OAAvB,CAAP;EACD,CAFD,CAEE,OAAOC,KAAP,EAAmB;IAEnBA,KAAK,CAACC,aAAND,GAAsB,IAAtBA;IACAA,KAAK,CAACE,OAANF,qCAAgDF,UAAW,aAAOE,KAAK,CAACE,OAAxEF;IACA,MAAMA,KAAN;EACD;AACF;AAEM,SAASG,gBAAT,CAA0BC,UAA1B,EAA8CC,OAA9C,EAA4F;EACjG,IAAMC,MAAM,GAAGT,cAAc,CAACO,UAAD,EAAaC,OAAb,CAA7B;EACA,IAAIC,MAAJ,EAAY;IAEV,OAAOA,MAAP;EAJ+F;EAQjG,MAAM,KAAIC,OAAAA,EAAAA,CAAAA,WAAJ,iCAA6CH,UAA7C,EAA2D,gBAA3D,CAAN;AACD;AAEM,SAASI,eAAT,CAAyBJ,UAAzB,EAAyE;EAC9E,IAAME,MAAM,GAAG,SAAA,EAAA,CAAA,OAAA,CAASG,IAAT,CAAcL,UAAd,EAA0B;IAAEM,KAAK,EAAE;EAAT,CAA1B,CAAf;EACA,IAAIJ,MAAJ,EAAY;IACV,OAAOA,MAAP;EACD;EACD,MAAM,KAAIC,OAAAA,EAAAA,CAAAA,WAAJ,iCAA6CH,UAA7C,EAA2D,gBAA3D,CAAN;AACD","sourcesContent":["import JsonFile from '@expo/json-file';\nimport { existsSync } from 'fs';\n\nimport { AppJSONConfig, ConfigContext, ExpoConfig } from './Config.types';\nimport { ConfigError } from './Errors';\nimport { DynamicConfigResults, evalConfig } from './evalConfig';\n\n// We cannot use async config resolution right now because Next.js doesn't support async configs.\n// If they don't add support for async Webpack configs then we may need to pull support for Next.js.\nfunction readConfigFile(configFile: string, context: ConfigContext): null | DynamicConfigResults {\n  // If the file doesn't exist then we should skip it and continue searching.\n  if (!existsSync(configFile)) {\n    return null;\n  }\n  try {\n    return evalConfig(configFile, context);\n  } catch (error: any) {\n    // @ts-ignore\n    error.isConfigError = true;\n    error.message = `Error reading Expo config at ${configFile}:\\n\\n${error.message}`;\n    throw error;\n  }\n}\n\nexport function getDynamicConfig(configPath: string, request: ConfigContext): DynamicConfigResults {\n  const config = readConfigFile(configPath, request);\n  if (config) {\n    // The config must be serialized and evaluated ahead of time so the spawned process can send it over.\n    return config;\n  }\n  // TODO: It seems this is only thrown if the file cannot be found (which may never happen).\n  // If so we should throw a more helpful error.\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n\nexport function getStaticConfig(configPath: string): AppJSONConfig | ExpoConfig {\n  const config = JsonFile.read(configPath, { json5: true });\n  if (config) {\n    return config as any;\n  }\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n"]},"metadata":{},"sourceType":"script"}