{"ast":null,"code":"\"use strict\";\n\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _getCacheKey() {\n  var data = require(\"./getCacheKey\");\n  _getCacheKey = function _getCacheKey() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar transformer = null;\nfunction resolveTransformer(projectRoot) {\n  if (transformer) {\n    return transformer;\n  }\n  var resolvedPath = _resolveFrom().default.silent(projectRoot, 'metro-react-native-babel-transformer');\n  if (!resolvedPath) {\n    throw new Error('Missing package \"metro-react-native-babel-transformer\" in the project. ' + 'This usually means `react-native` is not installed. ' + 'Please verify that dependencies in package.json include \"react-native\" ' + 'and run `yarn` or `npm install`.');\n  }\n  transformer = require(resolvedPath);\n  return transformer;\n}\nfunction transform(props) {\n  props.options.extendsBabelConfigPath = _resolveFrom().default.silent(props.options.projectRoot, 'babel-preset-expo');\n  return resolveTransformer(props.options.projectRoot).transform(props);\n}\nmodule.exports = {\n  getCacheKey: _getCacheKey().getCacheKey,\n  transform: transform\n};","map":{"version":3,"sources":["../../src/transformer/metro-expo-babel-transformer.ts"],"names":["transformer","resolveTransformer","projectRoot","resolvedPath","resolveFrom","silent","Error","require","transform","props","options","extendsBabelConfigPath","module","exports","getCacheKey"],"mappings":";;AAEA,SAAA,YAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;EAAA,YAAA,GAAA,wBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAEA,SAAA,YAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,eAAA,CAAA;EAAA,YAAA,GAAA,wBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAEA,IAAIA,WAAgB,GAAG,IAAvB;AAEA,SAASC,kBAAT,CAA4BC,WAA5B,EAAiD;EAC/C,IAAIF,WAAJ,EAAiB;IACf,OAAOA,WAAP;EACD;EACD,IAAMG,YAAY,GAAGC,YAAAA,EAAAA,CAAAA,OAAAA,CAAYC,MAAZD,CAAmBF,WAAnBE,EAAgC,sCAAhCA,CAArB;EACA,IAAI,CAACD,YAAL,EAAmB;IACjB,MAAM,IAAIG,KAAJ,CACJ,yEAAA,GACE,sDADF,GAEE,yEAFF,GAGE,kCAJE,CAAN;EAMD;EACDN,WAAW,GAAGO,OAAO,CAACJ,YAAD,CAArBH;EACA,OAAOA,WAAP;AACD;AAeD,SAASQ,SAAT,CAAmBC,KAAnB,EAKG;EAEDA,KAAK,CAACC,OAAND,CAAcE,sBAAdF,GAAuCL,YAAAA,EAAAA,CAAAA,OAAAA,CAAYC,MAAZD,CACrCK,KAAK,CAACC,OAAND,CAAcP,WADuBE,EAErC,mBAFqCA,CAAvCK;EAIA,OAAOR,kBAAkB,CAACQ,KAAK,CAACC,OAAND,CAAcP,WAAf,CAAlBD,CAA8CO,SAA9CP,CAAwDQ,KAAxDR,CAAP;AACD;AAEDW,MAAM,CAACC,OAAPD,GAAiB;EACfE,WAAW,EAAXA,YAAAA,EAAAA,CAAAA,WADe;EAEfN,SAAAA,EAAAA;AAFe,CAAjBI","sourcesContent":["// Copyright 2021-present 650 Industries (Expo). All rights reserved.\n\nimport resolveFrom from 'resolve-from';\n\nimport { getCacheKey } from './getCacheKey';\n\nlet transformer: any = null;\n\nfunction resolveTransformer(projectRoot: string) {\n  if (transformer) {\n    return transformer;\n  }\n  const resolvedPath = resolveFrom.silent(projectRoot, 'metro-react-native-babel-transformer');\n  if (!resolvedPath) {\n    throw new Error(\n      'Missing package \"metro-react-native-babel-transformer\" in the project. ' +\n        'This usually means `react-native` is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n  transformer = require(resolvedPath);\n  return transformer;\n}\n\n/**\n * Extends the default `metro-react-native-babel-transformer`\n * and uses babel-preset-expo as the default instead of metro-react-native-babel-preset.\n * This enables users to safely transpile an Expo project without\n * needing to explicitly define a `babel.config.js`\n *\n * @param filename string\n * @param options BabelTransformerOptions\n * @param plugins $PropertyType<BabelCoreOptions, 'plugins'>\n * @param src string\n *\n * @returns\n */\nfunction transform(props: {\n  filename: string;\n  options: Record<string, any> & { projectRoot: string };\n  plugins?: unknown;\n  src: string;\n}) {\n  // Use babel-preset-expo by default if available...\n  props.options.extendsBabelConfigPath = resolveFrom.silent(\n    props.options.projectRoot,\n    'babel-preset-expo'\n  );\n  return resolveTransformer(props.options.projectRoot).transform(props);\n}\n\nmodule.exports = {\n  getCacheKey,\n  transform,\n};\n"]},"metadata":{},"sourceType":"script"}