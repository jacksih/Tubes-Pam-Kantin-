{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildResourceGroup = buildResourceGroup;\nexports.buildResourceItem = buildResourceItem;\nexports.ensureDefaultResourceXML = ensureDefaultResourceXML;\nexports.findResourceGroup = findResourceGroup;\nexports.getObjectAsResourceGroup = getObjectAsResourceGroup;\nexports.getObjectAsResourceItems = getObjectAsResourceItems;\nexports.getResourceItemsAsObject = getResourceItemsAsObject;\nexports.readResourcesXMLAsync = readResourcesXMLAsync;\nfunction _XML() {\n  var data = require(\"../utils/XML\");\n  _XML = function _XML() {\n    return data;\n  };\n  return data;\n}\nvar fallbackResourceString = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><resources></resources>\";\nfunction readResourcesXMLAsync(_x) {\n  return _readResourcesXMLAsync.apply(this, arguments);\n}\nfunction _readResourcesXMLAsync() {\n  _readResourcesXMLAsync = _asyncToGenerator(function* (_ref) {\n    var path = _ref.path,\n      _ref$fallback = _ref.fallback,\n      fallback = _ref$fallback === void 0 ? fallbackResourceString : _ref$fallback;\n    var xml = yield (0, _XML().readXMLAsync)({\n      path: path,\n      fallback: fallback\n    });\n    if (!xml.resources) {\n      xml.resources = {};\n    }\n    return xml;\n  });\n  return _readResourcesXMLAsync.apply(this, arguments);\n}\nfunction ensureDefaultResourceXML(xml) {\n  if (!xml) {\n    xml = {\n      resources: {}\n    };\n  }\n  if (!xml.resources) {\n    xml.resources = {};\n  }\n  return xml;\n}\nfunction buildResourceItem(_ref2) {\n  var name = _ref2.name,\n    value = _ref2.value,\n    targetApi = _ref2.targetApi,\n    translatable = _ref2.translatable;\n  var item = {\n    $: {\n      name: name\n    },\n    _: value\n  };\n  if (targetApi) {\n    item.$['tools:targetApi'] = targetApi;\n  }\n  if (translatable !== undefined) {\n    item.$['translatable'] = String(translatable);\n  }\n  return item;\n}\nfunction buildResourceGroup(parent) {\n  var _parent$items;\n  return {\n    $: {\n      name: parent.name,\n      parent: parent.parent\n    },\n    item: (_parent$items = parent.items) !== null && _parent$items !== void 0 ? _parent$items : []\n  };\n}\nfunction findResourceGroup(xml, group) {\n  var _xml$filter, _xml$filter$call;\n  var app = xml === null || xml === void 0 ? void 0 : (_xml$filter = xml.filter) === null || _xml$filter === void 0 ? void 0 : (_xml$filter$call = _xml$filter.call(xml, function (_ref3) {\n    var head = _ref3.$;\n    var matches = head.name === group.name;\n    if (group.parent != null && matches) {\n      matches = head.parent === group.parent;\n    }\n    return matches;\n  })) === null || _xml$filter$call === void 0 ? void 0 : _xml$filter$call[0];\n  return app !== null && app !== void 0 ? app : null;\n}\nfunction getResourceItemsAsObject(xml) {\n  return xml.reduce(function (prev, curr) {\n    return Object.assign({}, prev, _defineProperty({}, curr.$.name, curr._));\n  }, {});\n}\nfunction getObjectAsResourceItems(obj) {\n  return Object.entries(obj).map(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      name = _ref5[0],\n      value = _ref5[1];\n    return {\n      $: {\n        name: name\n      },\n      _: value\n    };\n  });\n}\nfunction getObjectAsResourceGroup(group) {\n  return {\n    $: {\n      name: group.name,\n      parent: group.parent\n    },\n    item: getObjectAsResourceItems(group.item)\n  };\n}","map":{"version":3,"sources":["../../src/android/Resources.ts"],"names":["fallbackResourceString","readResourcesXMLAsync","path","fallback","xml","resources","ensureDefaultResourceXML","buildResourceItem","name","value","targetApi","translatable","item","$","_","undefined","String","buildResourceGroup","parent","items","findResourceGroup","group","app","filter","head","matches","getResourceItemsAsObject","reduce","prev","curr","getObjectAsResourceItems","obj","entries","map","getObjectAsResourceGroup"],"mappings":"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","sourcesContent":["import { readXMLAsync, XMLObject } from '../utils/XML';\n\nexport type ResourceGroupXML = {\n  $: {\n    name: string;\n    parent: string;\n  };\n  item: ResourceItemXML[];\n};\n\nexport type ResourceXML = {\n  resources: {\n    $?: {\n      'xmlns:tools'?: string;\n    };\n    color?: ResourceItemXML[];\n    string?: ResourceItemXML[];\n    style?: ResourceGroupXML[];\n    // Add more if needed...\n  };\n};\n\nexport type ResourceItemXML = {\n  _: string;\n  $: {\n    name: string;\n    'tools:targetApi'?: string;\n    translatable?: string;\n  };\n};\n/**\n * Name of the resource folder.\n */\nexport type ResourceKind =\n  | 'values'\n  | 'values-night'\n  | 'values-v23'\n  | 'values-night-v23'\n  | 'drawable';\n\nconst fallbackResourceString = `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources></resources>`;\n\n/**\n * Read an XML file while providing a default fallback for resource files.\n *\n * @param options path to the XML file, returns a fallback XML if the path doesn't exist.\n */\nexport async function readResourcesXMLAsync({\n  path,\n  fallback = fallbackResourceString,\n}: {\n  path: string;\n  fallback?: string | null;\n}): Promise<ResourceXML> {\n  const xml = await readXMLAsync({ path, fallback });\n  // Ensure the type is expected.\n  if (!xml.resources) {\n    xml.resources = {};\n  }\n  return xml as ResourceXML;\n}\n\n/**\n * Ensure the provided xml has a `resources` object (the expected shape).\n *\n * @param xml\n */\nexport function ensureDefaultResourceXML(xml: XMLObject): ResourceXML {\n  if (!xml) {\n    xml = { resources: {} };\n  }\n  if (!xml.resources) {\n    xml.resources = {};\n  }\n\n  return xml as ResourceXML;\n}\n\n/**\n * Build a `ResourceItemXML` given its `name` and `value`. This makes things a bit more readable.\n *\n * - JSON: `{ $: { name }, _: value }`\n * - XML: `<item name=\"NAME\">VALUE</item>`\n *\n * @param props name and value strings.\n */\nexport function buildResourceItem({\n  name,\n  value,\n  targetApi,\n  translatable,\n}: {\n  name: string;\n  value: string;\n  targetApi?: string;\n  translatable?: boolean;\n}): ResourceItemXML {\n  const item: ResourceItemXML = { $: { name }, _: value };\n  if (targetApi) {\n    item.$['tools:targetApi'] = targetApi;\n  }\n  if (translatable !== undefined) {\n    item.$['translatable'] = String(translatable);\n  }\n  return item;\n}\n\nexport function buildResourceGroup(parent: {\n  name: string;\n  parent: string;\n  items?: ResourceItemXML[];\n}): ResourceGroupXML {\n  return {\n    $: { name: parent.name, parent: parent.parent },\n    item: parent.items ?? [],\n  };\n}\n\nexport function findResourceGroup(\n  xml: ResourceGroupXML[] | undefined,\n  group: { name: string; parent?: string }\n): ResourceGroupXML | null {\n  const app = xml?.filter?.(({ $: head }) => {\n    let matches = head.name === group.name;\n    if (group.parent != null && matches) {\n      matches = head.parent === group.parent;\n    }\n    return matches;\n  })?.[0];\n  return app ?? null;\n}\n\n/**\n * Helper to convert a basic XML object into a simple k/v pair.\n *\n * @param xml\n * @returns\n */\nexport function getResourceItemsAsObject(xml: ResourceItemXML[]): Record<string, string> | null {\n  return xml.reduce(\n    (prev, curr) => ({\n      ...prev,\n      [curr.$.name]: curr._,\n    }),\n    {}\n  );\n}\n\n/**\n * Helper to convert a basic k/v object to a ResourceItemXML array.\n *\n * @param xml\n * @returns\n */\nexport function getObjectAsResourceItems(obj: Record<string, string>): ResourceItemXML[] {\n  return Object.entries(obj).map(([name, value]) => ({\n    $: { name },\n    _: value,\n  }));\n}\n\nexport function getObjectAsResourceGroup(group: {\n  name: string;\n  parent: string;\n  item: Record<string, string>;\n}): ResourceGroupXML {\n  return {\n    $: {\n      name: group.name,\n      parent: group.parent,\n    },\n    item: getObjectAsResourceItems(group.item),\n  };\n}\n"]},"metadata":{},"sourceType":"script"}