{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAppVersion = getAppVersion;\nexports.getExpoUpdatesPackageVersion = getExpoUpdatesPackageVersion;\nexports.getNativeVersion = getNativeVersion;\nexports.getRuntimeVersion = getRuntimeVersion;\nexports.getRuntimeVersionNullable = getRuntimeVersionNullable;\nexports.getSDKVersion = getSDKVersion;\nexports.getUpdateUrl = getUpdateUrl;\nexports.getUpdatesCheckOnLaunch = getUpdatesCheckOnLaunch;\nexports.getUpdatesCodeSigningCertificate = getUpdatesCodeSigningCertificate;\nexports.getUpdatesCodeSigningMetadata = getUpdatesCodeSigningMetadata;\nexports.getUpdatesCodeSigningMetadataStringified = getUpdatesCodeSigningMetadataStringified;\nexports.getUpdatesEnabled = getUpdatesEnabled;\nexports.getUpdatesTimeout = getUpdatesTimeout;\nexports.withRuntimeVersion = void 0;\nfunction _sdkRuntimeVersions() {\n  var data = require(\"@expo/sdk-runtime-versions\");\n  _sdkRuntimeVersions = function _sdkRuntimeVersions() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _() {\n  var data = require(\"..\");\n  _ = function _() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getExpoUpdatesPackageVersion(projectRoot) {\n  var expoUpdatesPackageJsonPath = _resolveFrom().default.silent(projectRoot, 'expo-updates/package.json');\n  if (!expoUpdatesPackageJsonPath || !_fs().default.existsSync(expoUpdatesPackageJsonPath)) {\n    return null;\n  }\n  var packageJson = JSON.parse(_fs().default.readFileSync(expoUpdatesPackageJsonPath, 'utf8'));\n  return packageJson.version;\n}\nfunction getUpdateUrl(config, username) {\n  var _config$updates;\n  if ((_config$updates = config.updates) !== null && _config$updates !== void 0 && _config$updates.url) {\n    var _config$updates2;\n    return (_config$updates2 = config.updates) === null || _config$updates2 === void 0 ? void 0 : _config$updates2.url;\n  }\n  var user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return \"https://exp.host/@\" + user + \"/\" + config.slug;\n}\nfunction getAppVersion(config) {\n  var _config$version;\n  return (_config$version = config.version) !== null && _config$version !== void 0 ? _config$version : '1.0.0';\n}\nfunction getNativeVersion(config, platform) {\n  var version = _().IOSConfig.Version.getVersion(config);\n  switch (platform) {\n    case 'ios':\n      {\n        var buildNumber = _().IOSConfig.Version.getBuildNumber(config);\n        return version + \"(\" + buildNumber + \")\";\n      }\n    case 'android':\n      {\n        var versionCode = _().AndroidConfig.Version.getVersionCode(config);\n        return version + \"(\" + versionCode + \")\";\n      }\n    default:\n      {\n        throw new Error(\"\\\"\" + platform + \"\\\" is not a supported platform. Choose either \\\"ios\\\" or \\\"android\\\".\");\n      }\n  }\n}\nvar withRuntimeVersion = function withRuntimeVersion(config) {\n  var _config$ios, _config$android;\n  if ((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.runtimeVersion || config.runtimeVersion) {\n    var runtimeVersion = getRuntimeVersion(config, 'ios');\n    if (runtimeVersion) {\n      config.ios = Object.assign({}, config.ios, {\n        runtimeVersion: runtimeVersion\n      });\n    }\n  }\n  if ((_config$android = config.android) !== null && _config$android !== void 0 && _config$android.runtimeVersion || config.runtimeVersion) {\n    var _runtimeVersion = getRuntimeVersion(config, 'android');\n    if (_runtimeVersion) {\n      config.android = Object.assign({}, config.android, {\n        runtimeVersion: _runtimeVersion\n      });\n    }\n  }\n  delete config.runtimeVersion;\n  return config;\n};\nexports.withRuntimeVersion = withRuntimeVersion;\nfunction getRuntimeVersionNullable() {\n  for (var _len = arguments.length, _ref = new Array(_len), _key = 0; _key < _len; _key++) {\n    _ref[_key] = arguments[_key];\n  }\n  var config = _ref[0],\n    platform = _ref[1];\n  try {\n    return getRuntimeVersion(config, platform);\n  } catch (e) {\n    if ((0, _getenv().boolish)('EXPO_DEBUG', false)) {\n      console.log(e);\n    }\n    return null;\n  }\n}\nfunction getRuntimeVersion(config, platform) {\n  var _config$platform$runt, _config$platform;\n  var runtimeVersion = (_config$platform$runt = (_config$platform = config[platform]) === null || _config$platform === void 0 ? void 0 : _config$platform.runtimeVersion) !== null && _config$platform$runt !== void 0 ? _config$platform$runt : config.runtimeVersion;\n  if (!runtimeVersion) {\n    return null;\n  }\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'appVersion') {\n    return getAppVersion(config);\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n    return (0, _sdkRuntimeVersions().getRuntimeVersionForSDKVersion)(config.sdkVersion);\n  }\n  throw new Error(\"\\\"\" + (typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion) + \"\\\" is not a valid runtime version. getRuntimeVersion only supports a string, \\\"sdkVersion\\\", \\\"appVersion\\\", or \\\"nativeVersion\\\" policy.\");\n}\nfunction getSDKVersion(config) {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\nfunction getUpdatesEnabled(config) {\n  var _config$updates3;\n  return ((_config$updates3 = config.updates) === null || _config$updates3 === void 0 ? void 0 : _config$updates3.enabled) !== false;\n}\nfunction getUpdatesTimeout(config) {\n  var _config$updates$fallb, _config$updates4;\n  return (_config$updates$fallb = (_config$updates4 = config.updates) === null || _config$updates4 === void 0 ? void 0 : _config$updates4.fallbackToCacheTimeout) !== null && _config$updates$fallb !== void 0 ? _config$updates$fallb : 0;\n}\nfunction getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion) {\n  var _config$updates5, _config$updates6;\n  if (((_config$updates5 = config.updates) === null || _config$updates5 === void 0 ? void 0 : _config$updates5.checkAutomatically) === 'ON_ERROR_RECOVERY') {\n    if (expoUpdatesPackageVersion && _semver().default.gte(expoUpdatesPackageVersion, '0.11.0')) {\n      return 'ERROR_RECOVERY_ONLY';\n    }\n    return 'NEVER';\n  } else if (((_config$updates6 = config.updates) === null || _config$updates6 === void 0 ? void 0 : _config$updates6.checkAutomatically) === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\nfunction getUpdatesCodeSigningCertificate(projectRoot, config) {\n  var _config$updates7;\n  var codeSigningCertificatePath = (_config$updates7 = config.updates) === null || _config$updates7 === void 0 ? void 0 : _config$updates7.codeSigningCertificate;\n  if (!codeSigningCertificatePath) {\n    return undefined;\n  }\n  var finalPath = _path().default.join(projectRoot, codeSigningCertificatePath);\n  if (!_fs().default.existsSync(finalPath)) {\n    throw new Error(\"File not found at `updates.codeSigningCertificate` path: \" + finalPath);\n  }\n  return _fs().default.readFileSync(finalPath, 'utf8');\n}\nfunction getUpdatesCodeSigningMetadata(config) {\n  var _config$updates8;\n  return (_config$updates8 = config.updates) === null || _config$updates8 === void 0 ? void 0 : _config$updates8.codeSigningMetadata;\n}\nfunction getUpdatesCodeSigningMetadataStringified(config) {\n  var metadata = getUpdatesCodeSigningMetadata(config);\n  if (!metadata) {\n    return undefined;\n  }\n  return JSON.stringify(metadata);\n}","map":{"version":3,"sources":["../../src/utils/Updates.ts"],"names":["getExpoUpdatesPackageVersion","projectRoot","expoUpdatesPackageJsonPath","resolveFrom","silent","fs","existsSync","packageJson","JSON","parse","readFileSync","version","getUpdateUrl","config","username","updates","url","user","owner","slug","getAppVersion","getNativeVersion","platform","IOSConfig","Version","getVersion","buildNumber","getBuildNumber","versionCode","AndroidConfig","getVersionCode","Error","withRuntimeVersion","ios","runtimeVersion","getRuntimeVersion","android","getRuntimeVersionNullable","e","console","log","policy","sdkVersion","stringify","getSDKVersion","getUpdatesEnabled","enabled","getUpdatesTimeout","fallbackToCacheTimeout","getUpdatesCheckOnLaunch","expoUpdatesPackageVersion","checkAutomatically","semver","gte","getUpdatesCodeSigningCertificate","codeSigningCertificatePath","codeSigningCertificate","undefined","finalPath","path","join","getUpdatesCodeSigningMetadata","codeSigningMetadata","getUpdatesCodeSigningMetadataStringified","metadata"],"mappings":"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","sourcesContent":["import { Android, ExpoConfig, IOS } from '@expo/config-types';\nimport { getRuntimeVersionForSDKVersion } from '@expo/sdk-runtime-versions';\nimport fs from 'fs';\nimport { boolish } from 'getenv';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { AndroidConfig, IOSConfig } from '..';\n\nexport type ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport function getExpoUpdatesPackageVersion(projectRoot: string): string | null {\n  const expoUpdatesPackageJsonPath = resolveFrom.silent(projectRoot, 'expo-updates/package.json');\n  if (!expoUpdatesPackageJsonPath || !fs.existsSync(expoUpdatesPackageJsonPath)) {\n    return null;\n  }\n  const packageJson = JSON.parse(fs.readFileSync(expoUpdatesPackageJsonPath, 'utf8'));\n  return packageJson.version;\n}\n\nexport function getUpdateUrl(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug' | 'updates'>,\n  username: string | null\n): string | null {\n  if (config.updates?.url) {\n    return config.updates?.url;\n  }\n\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getAppVersion(config: Pick<ExpoConfig, 'version'>): string {\n  return config.version ?? '1.0.0';\n}\n\nexport function getNativeVersion(\n  config: Pick<ExpoConfig, 'version'> & {\n    android?: Pick<Android, 'versionCode'>;\n    ios?: Pick<IOS, 'buildNumber'>;\n  },\n  platform: 'android' | 'ios'\n): string {\n  const version = IOSConfig.Version.getVersion(config);\n  switch (platform) {\n    case 'ios': {\n      const buildNumber = IOSConfig.Version.getBuildNumber(config);\n      return `${version}(${buildNumber})`;\n    }\n    case 'android': {\n      const versionCode = AndroidConfig.Version.getVersionCode(config);\n      return `${version}(${versionCode})`;\n    }\n    default: {\n      throw new Error(\n        `\"${platform}\" is not a supported platform. Choose either \"ios\" or \"android\".`\n      );\n    }\n  }\n}\n\n/**\n * Compute runtime version policies.\n * @return an expoConfig with only string valued platform specific runtime versions.\n */\nexport const withRuntimeVersion: (config: ExpoConfig) => ExpoConfig = (config) => {\n  if (config.ios?.runtimeVersion || config.runtimeVersion) {\n    const runtimeVersion = getRuntimeVersion(config, 'ios');\n    if (runtimeVersion) {\n      config.ios = {\n        ...config.ios,\n        runtimeVersion,\n      };\n    }\n  }\n  if (config.android?.runtimeVersion || config.runtimeVersion) {\n    const runtimeVersion = getRuntimeVersion(config, 'android');\n    if (runtimeVersion) {\n      config.android = {\n        ...config.android,\n        runtimeVersion,\n      };\n    }\n  }\n  delete config.runtimeVersion;\n  return config;\n};\n\nexport function getRuntimeVersionNullable(\n  ...[config, platform]: Parameters<typeof getRuntimeVersion>\n): string | null {\n  try {\n    return getRuntimeVersion(config, platform);\n  } catch (e) {\n    if (boolish('EXPO_DEBUG', false)) {\n      console.log(e);\n    }\n    return null;\n  }\n}\n\nexport function getRuntimeVersion(\n  config: Pick<ExpoConfig, 'version' | 'runtimeVersion' | 'sdkVersion'> & {\n    android?: Pick<Android, 'versionCode' | 'runtimeVersion'>;\n    ios?: Pick<IOS, 'buildNumber' | 'runtimeVersion'>;\n  },\n  platform: 'android' | 'ios'\n): string | null {\n  const runtimeVersion = config[platform]?.runtimeVersion ?? config.runtimeVersion;\n  if (!runtimeVersion) {\n    return null;\n  }\n\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'appVersion') {\n    return getAppVersion(config);\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n    return getRuntimeVersionForSDKVersion(config.sdkVersion);\n  }\n\n  throw new Error(\n    `\"${\n      typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion\n    }\" is not a valid runtime version. getRuntimeVersion only supports a string, \"sdkVersion\", \"appVersion\", or \"nativeVersion\" policy.`\n  );\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>): number {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>,\n  expoUpdatesPackageVersion?: string | null\n): 'NEVER' | 'ERROR_RECOVERY_ONLY' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    // native 'ERROR_RECOVERY_ONLY' option was only introduced in 0.11.x\n    if (expoUpdatesPackageVersion && semver.gte(expoUpdatesPackageVersion, '0.11.0')) {\n      return 'ERROR_RECOVERY_ONLY';\n    }\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport function getUpdatesCodeSigningCertificate(\n  projectRoot: string,\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const codeSigningCertificatePath = config.updates?.codeSigningCertificate;\n  if (!codeSigningCertificatePath) {\n    return undefined;\n  }\n\n  const finalPath = path.join(projectRoot, codeSigningCertificatePath);\n  if (!fs.existsSync(finalPath)) {\n    throw new Error(`File not found at \\`updates.codeSigningCertificate\\` path: ${finalPath}`);\n  }\n\n  return fs.readFileSync(finalPath, 'utf8');\n}\n\nexport function getUpdatesCodeSigningMetadata(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): NonNullable<ExpoConfigUpdates['updates']>['codeSigningMetadata'] {\n  return config.updates?.codeSigningMetadata;\n}\n\nexport function getUpdatesCodeSigningMetadataStringified(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const metadata = getUpdatesCodeSigningMetadata(config);\n  if (!metadata) {\n    return undefined;\n  }\n\n  return JSON.stringify(metadata);\n}\n"]},"metadata":{},"sourceType":"script"}