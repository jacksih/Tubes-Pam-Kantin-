{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _routers = require(\"@react-navigation/routers\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _checkDuplicateRouteNames = _interopRequireDefault(require(\"./checkDuplicateRouteNames\"));\nvar _checkSerializable = _interopRequireDefault(require(\"./checkSerializable\"));\nvar _createNavigationContainerRef = require(\"./createNavigationContainerRef\");\nvar _EnsureSingleNavigator = _interopRequireDefault(require(\"./EnsureSingleNavigator\"));\nvar _findFocusedRoute = _interopRequireDefault(require(\"./findFocusedRoute\"));\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\nvar _NavigationContainerRefContext = _interopRequireDefault(require(\"./NavigationContainerRefContext\"));\nvar _NavigationContext = _interopRequireDefault(require(\"./NavigationContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\nvar _UnhandledActionContext = _interopRequireDefault(require(\"./UnhandledActionContext\"));\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\nvar _useOptionsGetters2 = _interopRequireDefault(require(\"./useOptionsGetters\"));\nvar _useScheduleUpdate = require(\"./useScheduleUpdate\");\nvar _useSyncState3 = _interopRequireDefault(require(\"./useSyncState\"));\nvar _excluded = [\"key\", \"routeNames\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar serializableWarnings = [];\nvar duplicateNameWarnings = [];\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n  var key = state.key,\n    routeNames = state.routeNames,\n    partialState = (0, _objectWithoutProperties2.default)(state, _excluded);\n  return Object.assign({}, partialState, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n      return Object.assign({}, route, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n    onStateChange = _ref.onStateChange,\n    onUnhandledAction = _ref.onUnhandledAction,\n    independent = _ref.independent,\n    children = _ref.children;\n  var parent = React.useContext(_NavigationStateContext.default);\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n  var _useSyncState = (0, _useSyncState3.default)(function () {\n      return getPartialState(initialState == null ? undefined : initialState);\n    }),\n    _useSyncState2 = (0, _slicedToArray2.default)(_useSyncState, 5),\n    state = _useSyncState2[0],\n    getState = _useSyncState2[1],\n    setState = _useSyncState2[2],\n    scheduleUpdate = _useSyncState2[3],\n    flushUpdates = _useSyncState2[4];\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n    listeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var dispatch = React.useCallback(function (action) {\n    if (listeners.focus[0] == null) {\n      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(action);\n      });\n    }\n  }, [listeners.focus]);\n  var canGoBack = React.useCallback(function () {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n        return navigation.canGoBack();\n      }),\n      result = _listeners$focus$.result,\n      handled = _listeners$focus$.handled;\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n    if (target == null) {\n      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(Object.assign({}, _routers.CommonActions.reset(state), {\n          target: target\n        }));\n      });\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n    if (state == null) {\n      return undefined;\n    }\n    var route = (0, _findFocusedRoute.default)(state);\n    return route;\n  }, [getRootState]);\n  var emitter = (0, _useEventEmitter.default)();\n  var _useOptionsGetters = (0, _useOptionsGetters2.default)({}),\n    addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n    getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n  var navigation = React.useMemo(function () {\n    return Object.assign({}, Object.keys(_routers.CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(_routers.CommonActions[name].apply(_routers.CommonActions, arguments));\n      };\n      return acc;\n    }, {}), emitter.create('root'), {\n      dispatch: dispatch,\n      resetRoot: resetRoot,\n      isFocused: function isFocused() {\n        return true;\n      },\n      canGoBack: canGoBack,\n      getParent: function getParent() {\n        return undefined;\n      },\n      getState: function getState() {\n        return stateRef.current;\n      },\n      getRootState: getRootState,\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions,\n      isReady: function isReady() {\n        return listeners.focus[0] != null;\n      }\n    });\n  }, [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, function () {\n    return navigation;\n  }, [navigation]);\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var stackRef = React.useRef();\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  var stateRef = React.useRef(state);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(function () {\n    var hydratedState = getRootState();\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        var serializableResult = (0, _checkSerializable.default)(hydratedState);\n        if (!serializableResult.serializable) {\n          var location = serializableResult.location,\n            reason = serializableResult.reason;\n          var path = '';\n          var pointer = hydratedState;\n          var params = false;\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \" + curr;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\" + curr + \"]\";\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\" + curr;\n              } else {\n                path += \"[\" + JSON.stringify(curr) + \"]\";\n              }\n            }\n          }\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\" + path + \" (\" + reason + \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\";\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n        var duplicateRouteNamesResult = (0, _checkDuplicateRouteNames.default)(hydratedState);\n        if (duplicateRouteNamesResult.length) {\n          var _message = \"Found screens with the same name nested inside one another. Check:\\n\" + duplicateRouteNamesResult.map(function (locations) {\n            return \"\\n\" + locations.join(', ');\n          }) + \"\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.\";\n          if (!duplicateNameWarnings.includes(_message)) {\n            duplicateNameWarnings.push(_message);\n            console.warn(_message);\n          }\n        }\n      }\n    }\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    var payload = action.payload;\n    var message = \"The action '\" + action.type + \"'\" + (payload ? \" with payload \" + JSON.stringify(action.payload) : '') + \" was not handled by any navigator.\";\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\" + payload.name + \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\";\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(_NavigationContainerRefContext.default.Provider, {\n    value: navigation\n  }, React.createElement(_useScheduleUpdate.ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(_NavigationBuilderContext.default.Provider, {\n    value: builderContext\n  }, React.createElement(_NavigationStateContext.default.Provider, {\n    value: context\n  }, React.createElement(_UnhandledActionContext.default.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(_EnsureSingleNavigator.default, null, children))))));\n  if (independent) {\n    element = React.createElement(_NavigationRouteContext.default.Provider, {\n      value: undefined\n    }, React.createElement(_NavigationContext.default.Provider, {\n      value: undefined\n    }, element));\n  }\n  return element;\n});\nvar _default = BaseNavigationContainer;\nexports.default = _default;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","forwardRef","initialState","onStateChange","onUnhandledAction","independent","children","ref","parent","React","useContext","NavigationStateContext","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","useSyncState","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","listeners","addListener","useChildListeners","keyedListeners","addKeyedListener","useKeyedChildListeners","dispatch","action","focus","console","error","NOT_INITIALIZED_ERROR","navigation","canGoBack","result","handled","resetRoot","target","root","CommonActions","reset","getRootState","getCurrentRoute","findFocusedRoute","emitter","useEventEmitter","addOptionsGetter","getCurrentOptions","useOptionsGetters","useMemo","keys","reduce","acc","name","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","process","env","NODE_ENV","serializableResult","checkSerializable","serializable","location","reason","path","pointer","params","i","length","curr","prev","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","checkDuplicateRouteNames","locations","join","defaultOnUnhandledAction","payload","element"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options: object) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"script"}