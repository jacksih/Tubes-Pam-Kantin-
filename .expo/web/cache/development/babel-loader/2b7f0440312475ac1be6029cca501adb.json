{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withConfigPlugins = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Serialize() {\n  var data = require(\"../Serialize\");\n  _Serialize = function _Serialize() {\n    return data;\n  };\n  return data;\n}\nvar withConfigPlugins = function withConfigPlugins(config, skipPlugins) {\n  var _config$plugins;\n  if (!Array.isArray(config.plugins) || !((_config$plugins = config.plugins) !== null && _config$plugins !== void 0 && _config$plugins.length)) {\n    return config;\n  }\n  if (!skipPlugins) {\n    config = (0, _configPlugins().withPlugins)(config, config.plugins);\n  } else {\n    delete config.plugins;\n  }\n  return (0, _Serialize().serializeAfterStaticPlugins)(config);\n};\nexports.withConfigPlugins = withConfigPlugins;","map":{"version":3,"sources":["../../src/plugins/withConfigPlugins.ts"],"names":["withConfigPlugins","config","skipPlugins","Array","isArray","plugins","length"],"mappings":";;;;;;AAAA,SAAA,cAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;EAAA,cAAA,GAAA,0BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAEA,SAAA,UAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,cAAA,CAAA;EAAA,UAAA,GAAA,sBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAQO,IAAMA,iBAAwC,GAAG,SAA3CA,iBAAwC,CAAIC,MAAD,EAASC,WAAT,EAAyB;EAAA,IAAA,eAAA;EAE/E,IAAI,CAACC,KAAK,CAACC,OAAND,CAAcF,MAAM,CAACI,OAArBF,CAAD,IAAkC,EAAA,CAAA,eAAA,GAACF,MAAM,CAACI,OAAR,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,IAACJ,eAAAA,CAAgBK,MAAjB,CAAtC,EAA+D;IAC7D,OAAOL,MAAP;EACD;EACD,IAAI,CAACC,WAAL,EAAkB;IAGhBD,MAAM,GAAG,CAAA,CAAA,EAAA,cAAA,EAAA,CAAA,WAAA,EAAYA,MAAZ,EAAoBA,MAAM,CAACI,OAA3B,CAATJ;EACD,CAJD,MAIO;IAEL,OAAOA,MAAM,CAACI,OAAd;EAX6E;EAc/E,OAAO,CAAA,CAAA,EAAA,UAAA,EAAA,CAAA,2BAAA,EAA4BJ,MAA5B,CAAP;AACD,CAfM","sourcesContent":["import { ConfigPlugin, withPlugins } from '@expo/config-plugins';\n\nimport { serializeAfterStaticPlugins } from '../Serialize';\n\n/**\n * Resolves static plugins array as config plugin functions.\n *\n * @param config\n * @param projectRoot\n */\nexport const withConfigPlugins: ConfigPlugin<boolean> = (config, skipPlugins) => {\n  // @ts-ignore: plugins not on config type yet -- TODO\n  if (!Array.isArray(config.plugins) || !config.plugins?.length) {\n    return config;\n  }\n  if (!skipPlugins) {\n    // Resolve and evaluate plugins\n    // @ts-ignore: TODO: add plugins to the config schema\n    config = withPlugins(config, config.plugins);\n  } else {\n    // Delete the plugins array in case someone added functions or other values which cannot be automatically serialized.\n    delete config.plugins;\n  }\n  // plugins aren't serialized by default, serialize the plugins after resolving them.\n  return serializeAfterStaticPlugins(config);\n};\n"]},"metadata":{},"sourceType":"script"}