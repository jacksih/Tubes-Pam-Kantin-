{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocales = getLocales;\nexports.getResolvedLocalesAsync = getResolvedLocalesAsync;\nexports.setLocalesAsync = setLocalesAsync;\nexports.withLocales = void 0;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = require(\"path\");\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withLocales = function withLocales(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setLocalesAsync(config, {\n        projectRoot: config.modRequest.projectRoot,\n        project: config.modResults\n      });\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withLocales = withLocales;\nfunction getLocales(config) {\n  var _config$locales;\n  return (_config$locales = config.locales) !== null && _config$locales !== void 0 ? _config$locales : null;\n}\nfunction setLocalesAsync(_x2, _x3) {\n  return _setLocalesAsync.apply(this, arguments);\n}\nfunction _setLocalesAsync() {\n  _setLocalesAsync = _asyncToGenerator(function* (config, _ref2) {\n    var projectRoot = _ref2.projectRoot,\n      project = _ref2.project;\n    var locales = getLocales(config);\n    if (!locales) {\n      return project;\n    }\n    var localesMap = yield getResolvedLocalesAsync(projectRoot, locales);\n    var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n    var supportingDirectory = (0, _path().join)(projectRoot, 'ios', projectName, 'Supporting');\n    var stringName = 'InfoPlist.strings';\n    for (var _ref3 of Object.entries(localesMap)) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n      var lang = _ref4[0];\n      var localizationObj = _ref4[1];\n      var dir = (0, _path().join)(supportingDirectory, lang + \".lproj\");\n      yield _fs().default.promises.mkdir(dir, {\n        recursive: true\n      });\n      var strings = (0, _path().join)(dir, stringName);\n      var buffer = [];\n      for (var _ref5 of Object.entries(localizationObj)) {\n        var _ref6 = _slicedToArray(_ref5, 2);\n        var plistKey = _ref6[0];\n        var localVersion = _ref6[1];\n        buffer.push(plistKey + \" = \\\"\" + localVersion + \"\\\";\");\n      }\n      yield _fs().default.promises.writeFile(strings, buffer.join('\\n'));\n      var groupName = projectName + \"/Supporting/\" + lang + \".lproj\";\n      var group = (0, _Xcodeproj().ensureGroupRecursively)(project, groupName);\n      if (!(group !== null && group !== void 0 && group.children.some(function (_ref7) {\n        var comment = _ref7.comment;\n        return comment === stringName;\n      }))) {\n        project = (0, _Xcodeproj().addResourceFileToGroup)({\n          filepath: (0, _path().relative)(supportingDirectory, strings),\n          groupName: groupName,\n          project: project,\n          isBuildFile: true,\n          verbose: true\n        });\n      }\n    }\n    return project;\n  });\n  return _setLocalesAsync.apply(this, arguments);\n}\nfunction getResolvedLocalesAsync(_x4, _x5) {\n  return _getResolvedLocalesAsync.apply(this, arguments);\n}\nfunction _getResolvedLocalesAsync() {\n  _getResolvedLocalesAsync = _asyncToGenerator(function* (projectRoot, input) {\n    var locales = {};\n    for (var _ref8 of Object.entries(input)) {\n      var _ref9 = _slicedToArray(_ref8, 2);\n      var lang = _ref9[0];\n      var localeJsonPath = _ref9[1];\n      if (typeof localeJsonPath === 'string') {\n        try {\n          locales[lang] = yield _jsonFile().default.readAsync((0, _path().join)(projectRoot, localeJsonPath));\n        } catch (_unused) {\n          (0, _warnings().addWarningIOS)(\"locales.\" + lang, \"Failed to parse JSON of locale file for language: \" + lang, 'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app');\n        }\n      } else {\n        locales[lang] = localeJsonPath;\n      }\n    }\n    return locales;\n  });\n  return _getResolvedLocalesAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/ios/Locales.ts"],"names":["withLocales","config","modResults","setLocalesAsync","projectRoot","modRequest","project","getLocales","locales","localesMap","getResolvedLocalesAsync","projectName","supportingDirectory","stringName","lang","localizationObj","Object","entries","dir","promises","mkdir","recursive","strings","buffer","plistKey","localVersion","push","fs","writeFile","join","groupName","group","children","some","comment","filepath","isBuildFile","verbose","input","localeJsonPath","JsonFile","readAsync"],"mappings":";;;;;;;;;;;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,GAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;EAAA,GAAA,GAAA,eAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,KAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;EAAA,KAAA,GAAA,iBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAIA,SAAA,WAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;EAAA,WAAA,GAAA,uBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,UAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;EAAA,UAAA,GAAA,sBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAMO,IAAMA,WAAyB,GAAIC,SAA7BD,WAAyB,CAAIC,MAAD,EAAY;EACnD,OAAO,CAAA,CAAA,EAAA,WAAA,EAAA,CAAA,gBAAA,EAAiBA,MAAjB;IAAA,6BAAyB,WAAOA,MAAP,EAAkB;MAChDA,MAAM,CAACC,UAAPD,SAA0BE,eAAe,CAACF,MAAD,EAAS;QAChDG,WAAW,EAAEH,MAAM,CAACI,UAAPJ,CAAkBG,WADiB;QAEhDE,OAAO,EAAEL,MAAM,CAACC;MAFgC,CAAT,CAAzCD;MAIA,OAAOA,MAAP;IACD,CANM;IAAA;MAAA;IAAA;EAAA,IAAP;AAOD,CARM;;AAUA,SAASM,UAAT,CACLN,MADK,EAEuC;EAAA,IAAA,eAAA;EAC5C,OAAA,CAAA,eAAA,GAAOA,MAAM,CAACO,OAAd,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,eAAA,GAAyB,IAAzB;AACD;AAAA,SAEqBL,eAAf;EAAA;AAAA;AAAA;EAAA,qCAAA,WACLF,MADK,SAGkB;IAAA,IADrBG,WAAF,SAAEA,WAAF;MAAeE,OAAAA,SAAAA,OAAAA;IAEf,IAAME,OAAO,GAAGD,UAAU,CAACN,MAAD,CAA1B;IACA,IAAI,CAACO,OAAL,EAAc;MACZ,OAAOF,OAAP;IAHqB;IAMvB,IAAMG,UAAU,SAASC,uBAAuB,CAACN,WAAD,EAAcI,OAAd,CAAhD;IAEA,IAAMG,WAAW,GAAG,CAAA,CAAA,EAAA,UAAA,EAAA,CAAA,cAAA,EAAeP,WAAf,CAApB;IACA,IAAMQ,mBAAmB,GAAG,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,IAAA,EAAKR,WAAL,EAAkB,KAAlB,EAAyBO,WAAzB,EAAsC,YAAtC,CATL;IAYvB,IAAME,UAAU,GAAG,mBAAnB;IAEA,kBAAsCG,MAAM,CAACC,OAAPD,CAAeP,UAAfO,CAAtC,EAAkE;MAAA;MAAA,IAAtDF,IAAD;MAAA,IAAOC,eAAlB;MACE,IAAMG,GAAG,GAAG,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,IAAA,EAAKN,mBAAL,EAA6BE,IAA7B,YADoD;MAGhE,MAAM,GAAA,EAAA,CAAA,OAAA,CAAGK,QAAH,CAAYC,KAAZ,CAAkBF,GAAlB,EAAuB;QAAEG,SAAS,EAAE;MAAb,CAAvB,CAAN;MAEA,IAAMC,OAAO,GAAG,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,IAAA,EAAKJ,GAAL,EAAUL,UAAV,CAAhB;MACA,IAAMU,MAAM,GAAG,EAAf;MACA,kBAAuCP,MAAM,CAACC,OAAPD,CAAeD,eAAfC,CAAvC,EAAwE;QAAA;QAAA,IAA5DQ,QAAD;QAAA,IAAWC,YAAtB;QACEF,MAAM,CAACG,IAAPH,CAAeC,QAAS,aAAMC,YAA9BF,SAAAA;MAR8D;MAWhE,MAAMI,GAAAA,EAAAA,CAAAA,OAAAA,CAAGR,QAAHQ,CAAYC,SAAZD,CAAsBL,OAAtBK,EAA+BJ,MAAM,CAACM,IAAPN,CAAY,IAAZA,CAA/BI,CAAN;MAEA,IAAMG,SAAS,GAAMnB,WAAY,oBAAcG,IAAK,WAbY;MAehE,IAAMiB,KAAK,GAAG,CAAA,CAAA,EAAA,UAAA,EAAA,CAAA,sBAAA,EAAuBzB,OAAvB,EAAgCwB,SAAhC,CAfkD;MAkBhE,IAAI,EAACC,KAAD,KAAA,IAAA,IAACA,KAAD,KAAA,KAAA,CAAA,IAACA,KAAK,CAAEC,QAAPD,CAAgBE,IAAhBF,CAAqB;QAAA,IAAGG,OAAAA,SAAAA,OAAAA;QAAAA,OAAcA,OAAO,KAAKrB,UAAlDkB;MAAAA,EAAD,CAAJ,EAAoE;QAElEzB,OAAO,GAAG,CAAA,CAAA,EAAA,UAAA,EAAA,CAAA,sBAAA,EAAuB;UAC/B6B,QAAQ,EAAE,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,QAAA,EAASvB,mBAAT,EAA8BU,OAA9B,CADqB;UAE/BQ,SAF+B,EAE/BA,SAF+B;UAG/BxB,OAH+B,EAG/BA,OAH+B;UAI/B8B,WAAW,EAAE,IAJkB;UAK/BC,OAAO,EAAE;QALsB,CAAvB,CAAV/B;MAOD;IACF;IAED,OAAOA,OAAP;EACD,CAAA;EAAA;AAAA;AAAA,SAEqBI,uBAAf;EAAA;AAAA;AAAA;EAAA,6CAAA,WACLN,WADK,EAELkC,KAFK,EAGyB;IAC9B,IAAM9B,OAA4B,GAAG,CAAA,CAArC;IACA,kBAAqCQ,MAAM,CAACC,OAAPD,CAAesB,KAAftB,CAArC,EAA4D;MAAA;MAAA,IAAhDF,IAAD;MAAA,IAAOyB,cAAlB;MACE,IAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;QACtC,IAAI;UACF/B,OAAO,CAACM,IAAD,CAAPN,SAAsBgC,SAAAA,EAAAA,CAAAA,OAAAA,CAASC,SAATD,CAAmB,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,IAAA,EAAKpC,WAAL,EAAkBmC,cAAlB,CAAnBC,CAAtBhC;QACD,CAFD,CAEE,gBAAM;UAEN,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,aAAA,eACaM,IADb,yDAEuDA,IAFvD,EAGE,wEAHF,CAAA;QAKD;MACF,CAXD,MAWO;QAGLN,OAAO,CAACM,IAAD,CAAPN,GAAgB+B,cAAhB/B;MACD;IACF;IAED,OAAOA,OAAP;EACD,CAAA;EAAA;AAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs';\nimport { join, relative } from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { addResourceFileToGroup, ensureGroupRecursively, getProjectName } from './utils/Xcodeproj';\n\ntype LocaleJson = Record<string, string>;\ntype ResolvedLocalesJson = Record<string, LocaleJson>;\ntype ExpoConfigLocales = NonNullable<ExpoConfig['locales']>;\n\nexport const withLocales: ConfigPlugin = (config) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setLocalesAsync(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getLocales(\n  config: Pick<ExpoConfig, 'locales'>\n): Record<string, string | LocaleJson> | null {\n  return config.locales ?? null;\n}\n\nexport async function setLocalesAsync(\n  config: Pick<ExpoConfig, 'locales'>,\n  { projectRoot, project }: { projectRoot: string; project: XcodeProject }\n): Promise<XcodeProject> {\n  const locales = getLocales(config);\n  if (!locales) {\n    return project;\n  }\n  // possibly validate CFBundleAllowMixedLocalizations is enabled\n  const localesMap = await getResolvedLocalesAsync(projectRoot, locales);\n\n  const projectName = getProjectName(projectRoot);\n  const supportingDirectory = join(projectRoot, 'ios', projectName, 'Supporting');\n\n  // TODO: Should we delete all before running? Revisit after we land on a lock file.\n  const stringName = 'InfoPlist.strings';\n\n  for (const [lang, localizationObj] of Object.entries(localesMap)) {\n    const dir = join(supportingDirectory, `${lang}.lproj`);\n    // await fs.ensureDir(dir);\n    await fs.promises.mkdir(dir, { recursive: true });\n\n    const strings = join(dir, stringName);\n    const buffer = [];\n    for (const [plistKey, localVersion] of Object.entries(localizationObj)) {\n      buffer.push(`${plistKey} = \"${localVersion}\";`);\n    }\n    // Write the file to the file system.\n    await fs.promises.writeFile(strings, buffer.join('\\n'));\n\n    const groupName = `${projectName}/Supporting/${lang}.lproj`;\n    // deep find the correct folder\n    const group = ensureGroupRecursively(project, groupName);\n\n    // Ensure the file doesn't already exist\n    if (!group?.children.some(({ comment }) => comment === stringName)) {\n      // Only write the file if it doesn't already exist.\n      project = addResourceFileToGroup({\n        filepath: relative(supportingDirectory, strings),\n        groupName,\n        project,\n        isBuildFile: true,\n        verbose: true,\n      });\n    }\n  }\n\n  return project;\n}\n\nexport async function getResolvedLocalesAsync(\n  projectRoot: string,\n  input: ExpoConfigLocales\n): Promise<ResolvedLocalesJson> {\n  const locales: ResolvedLocalesJson = {};\n  for (const [lang, localeJsonPath] of Object.entries(input)) {\n    if (typeof localeJsonPath === 'string') {\n      try {\n        locales[lang] = await JsonFile.readAsync(join(projectRoot, localeJsonPath));\n      } catch {\n        // Add a warning when a json file cannot be parsed.\n        addWarningIOS(\n          `locales.${lang}`,\n          `Failed to parse JSON of locale file for language: ${lang}`,\n          'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app'\n        );\n      }\n    } else {\n      // In the off chance that someone defined the locales json in the config, pass it directly to the object.\n      // We do this to make the types more elegant.\n      locales[lang] = localeJsonPath;\n    }\n  }\n\n  return locales;\n}\n"]},"metadata":{},"sourceType":"script"}