{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAccountUsername = getAccountUsername;\nexports.getFullName = getFullName;\nfunction _getUserState() {\n  var data = require(\"./getUserState\");\n  _getUserState = function _getUserState() {\n    return data;\n  };\n  return data;\n}\nvar ANONYMOUS_USERNAME = 'anonymous';\nfunction getFullName(manifest) {\n  var username = getAccountUsername(manifest);\n  return \"@\" + username + \"/\" + manifest.slug;\n}\nfunction getAccountUsername() {\n  var manifest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _getUserState$read$au;\n  var username = manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n  if (username) {\n    return username;\n  }\n  return ((_getUserState$read$au = (0, _getUserState().getUserState)().read().auth) === null || _getUserState$read$au === void 0 ? void 0 : _getUserState$read$au.username) || ANONYMOUS_USERNAME;\n}","map":{"version":3,"sources":["../src/getFullName.ts"],"names":["ANONYMOUS_USERNAME","getFullName","manifest","username","getAccountUsername","slug","owner","process","env","EXPO_CLI_USERNAME","EAS_BUILD_USERNAME","read","auth"],"mappings":";;;;;;;AAEA,SAAA,aAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;EAAA,aAAA,GAAA,yBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAEA,IAAMA,kBAAkB,GAAG,WAA3B;AASO,SAASC,WAAT,CAAqBC,QAArB,EAA2E;EAChF,IAAMC,QAAQ,GAAGC,kBAAkB,CAACF,QAAD,CAAnC;EACA,aAAWC,QAAS,SAAGD,QAAQ,CAACG,IAAhC;AACD;AAEM,SAASD,kBAAT,GAA8E;EAAA,IAAlDF,QAAmC,uEAAG,CAAA,CAAlE;EAA8E,IAAA,qBAAA;EAEnF,IAAMC,QAAQ,GACZD,QAAQ,CAACI,KAATJ,IAAkBK,OAAO,CAACC,GAARD,CAAYE,iBAA9BP,IAAmDK,OAAO,CAACC,GAARD,CAAYG,kBADjE;EAEA,IAAIP,QAAJ,EAAc;IACZ,OAAOA,QAAP;EALiF;EAQnF,OAAO,CAAA,CAAA,qBAAA,GAAA,CAAA,CAAA,EAAA,aAAA,EAAA,CAAA,YAAA,GAAA,CAAeQ,IAAf,EAAA,CAAsBC,IAAtB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAA4BT,QAA5B,KAAwCH,kBAA/C;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { getUserState } from './getUserState';\n\nconst ANONYMOUS_USERNAME = 'anonymous';\n\n/**\n * Used in expo-constants to generate the `id` property statically for an app in custom managed workflow.\n * This `id` is used for legacy Expo services AuthSession proxy and Expo notifications device ID.\n *\n * @param manifest\n * @returns\n */\nexport function getFullName(manifest: Pick<ExpoConfig, 'owner' | 'slug'>): string {\n  const username = getAccountUsername(manifest);\n  return `@${username}/${manifest.slug}`;\n}\n\nexport function getAccountUsername(manifest: Pick<ExpoConfig, 'owner'> = {}): string {\n  // TODO: Must match what's generated in Expo Go.\n  const username =\n    manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n  if (username) {\n    return username;\n  }\n  // Statically get the username from the global user state.\n  return getUserState().read().auth?.username || ANONYMOUS_USERNAME;\n}\n"]},"metadata":{},"sourceType":"script"}