{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyNameSettingsGradle = applyNameSettingsGradle;\nexports.getName = getName;\nexports.sanitizeNameForGradle = sanitizeNameForGradle;\nexports.withNameSettingsGradle = exports.withName = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _Resources() {\n  var data = require(\"./Resources\");\n  _Resources = function _Resources() {\n    return data;\n  };\n  return data;\n}\nfunction _Strings() {\n  var data = require(\"./Strings\");\n  _Strings = function _Strings() {\n    return data;\n  };\n  return data;\n}\nfunction sanitizeNameForGradle(name) {\n  name = name.replace(/[\\n\\r\\t]/g, '');\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\nvar withName = (0, _androidPlugins().createStringsXmlPlugin)(applyNameFromConfig, 'withName');\nexports.withName = withName;\nvar withNameSettingsGradle = function withNameSettingsGradle(config) {\n  return (0, _androidPlugins().withSettingsGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('name', \"Cannot automatically configure settings.gradle if it's not groovy\");\n    }\n    return config;\n  });\n};\nexports.withNameSettingsGradle = withNameSettingsGradle;\nfunction getName(config) {\n  return typeof config.name === 'string' ? config.name : null;\n}\nfunction applyNameFromConfig(config, stringsJSON) {\n  var name = getName(config);\n  if (name) {\n    return (0, _Strings().setStringItem)([(0, _Resources().buildResourceItem)({\n      name: 'app_name',\n      value: name\n    })], stringsJSON);\n  }\n  return (0, _Strings().removeStringItem)('app_name', stringsJSON);\n}\nfunction applyNameSettingsGradle(config, settingsGradle) {\n  var _getName;\n  var name = sanitizeNameForGradle((_getName = getName(config)) !== null && _getName !== void 0 ? _getName : '');\n  return settingsGradle.replace(/rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g, \"rootProject.name = '\" + name.replace(/'/g, \"\\\\'\") + \"'\");\n}","map":{"version":3,"sources":["../../src/android/Name.ts"],"names":["sanitizeNameForGradle","name","replace","withName","applyNameFromConfig","withNameSettingsGradle","config","modResults","language","contents","applyNameSettingsGradle","getName","stringsJSON","value","settingsGradle"],"mappings":";;;;;;;;;AAGA,SAAA,eAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;EAAA,eAAA,GAAA,2BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,UAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,aAAA,CAAA;EAAA,UAAA,GAAA,sBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,QAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,WAAA,CAAA;EAAA,QAAA,GAAA,oBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AASO,SAASA,qBAAT,CAA+BC,IAA/B,EAAqD;EAE1DA,IAAI,GAAGA,IAAI,CAACC,OAALD,CAAa,WAAbA,EAA0B,EAA1BA,CAFmD;EAM1D,OAAOA,IAAI,CAACC,OAALD,CAAa,2BAAbA,EAA0C,EAA1CA,CAAP;AACD;AAEM,IAAME,QAAQ,GAAG,CAAA,CAAA,EAAA,eAAA,EAAA,CAAA,sBAAA,EAAuBC,mBAAvB,EAA4C,UAA5C,CAAjB;;AAEA,IAAMC,sBAAoC,GAAIC,SAAxCD,sBAAoC,CAAIC,MAAD,EAAY;EAC9D,OAAO,CAAA,CAAA,EAAA,eAAA,EAAA,CAAA,kBAAA,EAAmBA,MAAnB,EAA4BA,UAAAA,MAAD,EAAY;IAC5C,IAAIA,MAAM,CAACC,UAAPD,CAAkBE,QAAlBF,KAA+B,QAAnC,EAA6C;MAC3CA,MAAM,CAACC,UAAPD,CAAkBG,QAAlBH,GAA6BI,uBAAuB,CAACJ,MAAD,EAASA,MAAM,CAACC,UAAPD,CAAkBG,QAA3B,CAApDH;IACD,CAFD,MAEO;MACL,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,iBAAA,EACE,MADF,sEAAA;IAID;IACD,OAAOA,MAAP;EACD,CAVM,CAAP;AAWD,CAZM;;AAcA,SAASK,OAAT,CAAiBL,MAAjB,EAAmD;EACxD,OAAO,OAAOA,MAAM,CAACL,IAAd,KAAuB,QAAvB,GAAkCK,MAAM,CAACL,IAAzC,GAAgD,IAAvD;AACD;AAED,SAASG,mBAAT,CACEE,MADF,EAEEM,WAFF,EAGe;EACb,IAAMX,IAAI,GAAGU,OAAO,CAACL,MAAD,CAApB;EACA,IAAIL,IAAJ,EAAU;IACR,OAAO,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA,aAAA,EAAc,CAAC,CAAA,CAAA,EAAA,UAAA,EAAA,CAAA,iBAAA,EAAkB;MAAEA,IAAI,EAAE,UAAR;MAAoBY,KAAK,EAAEZ;IAA3B,CAAlB,CAAD,CAAd,EAAsEW,WAAtE,CAAP;EACD;EACD,OAAO,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA,gBAAA,EAAiB,UAAjB,EAA6BA,WAA7B,CAAP;AACD;AAQM,SAASF,uBAAT,CAAiCJ,MAAjC,EAAmEQ,cAAnE,EAA2F;EAAA,IAAA,QAAA;EAChG,IAAMb,IAAI,GAAGD,qBAAqB,CAAA,CAAA,QAAA,GAACW,OAAO,CAACL,MAAD,CAAR,MAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,QAAA,GAAoB,EAApB,CAD8D;EAIhG,OAAOQ,cAAc,CAACZ,OAAfY,CACL,oDADKA,2BAEkBb,IAAI,CAACC,OAALD,CAAa,IAAbA,EAAmB,KAAnBA,CAFlBa,OAAP;AAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createStringsXmlPlugin, withSettingsGradle } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { buildResourceItem, ResourceXML } from './Resources';\nimport { removeStringItem, setStringItem } from './Strings';\n\n/**\n * Sanitize a name, this should be used for files and gradle names.\n * - `[/, \\, :, <, >, \", ?, *, |]` are not allowed\n * https://docs.gradle.org/4.2/release-notes.html#path-separator-characters-in-names-are-deprecated\n *\n * @param name\n */\nexport function sanitizeNameForGradle(name: string): string {\n  // Remove escape characters which are valid in XML names but not in gradle.\n  name = name.replace(/[\\n\\r\\t]/g, '');\n\n  // Gradle disallows these:\n  // The project name 'My-Special ðŸ˜ƒ Co/ol_Project' must not contain any of the following characters: [/, \\, :, <, >, \", ?, *, |]. Set the 'rootProject.name' or adjust the 'include' statement (see https://docs.gradle.org/6.2/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings:include(java.lang.String[]) for more details).\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\n\nexport const withName = createStringsXmlPlugin(applyNameFromConfig, 'withName');\n\nexport const withNameSettingsGradle: ConfigPlugin = (config) => {\n  return withSettingsGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'name',\n        `Cannot automatically configure settings.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\nfunction applyNameFromConfig(\n  config: Pick<ExpoConfig, 'name'>,\n  stringsJSON: ResourceXML\n): ResourceXML {\n  const name = getName(config);\n  if (name) {\n    return setStringItem([buildResourceItem({ name: 'app_name', value: name })], stringsJSON);\n  }\n  return removeStringItem('app_name', stringsJSON);\n}\n\n/**\n * Regex a name change -- fragile.\n *\n * @param config\n * @param settingsGradle\n */\nexport function applyNameSettingsGradle(config: Pick<ExpoConfig, 'name'>, settingsGradle: string) {\n  const name = sanitizeNameForGradle(getName(config) ?? '');\n\n  // Select rootProject.name = '***' and replace the contents between the quotes.\n  return settingsGradle.replace(\n    /rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g,\n    `rootProject.name = '${name.replace(/'/g, \"\\\\'\")}'`\n  );\n}\n"]},"metadata":{},"sourceType":"script"}