{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appendScheme = appendScheme;\nexports.ensureManifestHasValidIntentFilter = ensureManifestHasValidIntentFilter;\nexports.getScheme = getScheme;\nexports.getSchemesFromManifest = getSchemesFromManifest;\nexports.hasScheme = hasScheme;\nexports.removeScheme = removeScheme;\nexports.setScheme = setScheme;\nexports.withScheme = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nvar withScheme = (0, _androidPlugins().createAndroidManifestPlugin)(setScheme, 'withScheme');\nexports.withScheme = withScheme;\nfunction getScheme(config) {\n  if (Array.isArray(config.scheme)) {\n    var validate = function validate(value) {\n      return typeof value === 'string';\n    };\n    return config.scheme.filter(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\nfunction setScheme(config, androidManifest) {\n  var _config$android, _config$android2;\n  var schemes = [].concat(_toConsumableArray(getScheme(config)), _toConsumableArray(getScheme((_config$android = config.android) !== null && _config$android !== void 0 ? _config$android : {})));\n  if ((_config$android2 = config.android) !== null && _config$android2 !== void 0 && _config$android2.package) {\n    schemes.push(config.android.package);\n  }\n  if (schemes.length === 0) {\n    return androidManifest;\n  }\n  if (!ensureManifestHasValidIntentFilter(androidManifest)) {\n    (0, _warnings().addWarningAndroid)('scheme', \"Cannot add schemes because the provided manifest does not have a valid Activity with `android:launchMode=\\\"singleTask\\\"`\", 'https://expo.fyi/setup-android-uri-scheme');\n    return androidManifest;\n  }\n  var currentSchemes = getSchemesFromManifest(androidManifest);\n  for (var uri of currentSchemes) {\n    var index = schemes.indexOf(uri);\n    if (index > -1) schemes.splice(index, 1);\n  }\n  for (var _uri of schemes) {\n    androidManifest = appendScheme(_uri, androidManifest);\n  }\n  return androidManifest;\n}\nfunction isValidRedirectIntentFilter(_ref) {\n  var actions = _ref.actions,\n    categories = _ref.categories;\n  return actions.includes('android.intent.action.VIEW') && !categories.includes('android.intent.category.LAUNCHER');\n}\nfunction propertiesFromIntentFilter(intentFilter) {\n  var _intentFilter$action$, _intentFilter$action, _intentFilter$categor, _intentFilter$categor2, _intentFilter$data$fi, _intentFilter$data, _intentFilter$data$fi2;\n  var actions = (_intentFilter$action$ = intentFilter === null || intentFilter === void 0 ? void 0 : (_intentFilter$action = intentFilter.action) === null || _intentFilter$action === void 0 ? void 0 : _intentFilter$action.map(function (data) {\n    var _data$$;\n    return data === null || data === void 0 ? void 0 : (_data$$ = data.$) === null || _data$$ === void 0 ? void 0 : _data$$['android:name'];\n  })) !== null && _intentFilter$action$ !== void 0 ? _intentFilter$action$ : [];\n  var categories = (_intentFilter$categor = intentFilter === null || intentFilter === void 0 ? void 0 : (_intentFilter$categor2 = intentFilter.category) === null || _intentFilter$categor2 === void 0 ? void 0 : _intentFilter$categor2.map(function (data) {\n    var _data$$2;\n    return data === null || data === void 0 ? void 0 : (_data$$2 = data.$) === null || _data$$2 === void 0 ? void 0 : _data$$2['android:name'];\n  })) !== null && _intentFilter$categor !== void 0 ? _intentFilter$categor : [];\n  var data = (_intentFilter$data$fi = intentFilter === null || intentFilter === void 0 ? void 0 : (_intentFilter$data = intentFilter.data) === null || _intentFilter$data === void 0 ? void 0 : (_intentFilter$data$fi2 = _intentFilter$data.filter(function (data) {\n    var _data$$3;\n    return data === null || data === void 0 ? void 0 : (_data$$3 = data.$) === null || _data$$3 === void 0 ? void 0 : _data$$3['android:scheme'];\n  })) === null || _intentFilter$data$fi2 === void 0 ? void 0 : _intentFilter$data$fi2.map(function (data) {\n    var _data$$4, _data$$5;\n    return {\n      scheme: data === null || data === void 0 ? void 0 : (_data$$4 = data.$) === null || _data$$4 === void 0 ? void 0 : _data$$4['android:scheme'],\n      host: data === null || data === void 0 ? void 0 : (_data$$5 = data.$) === null || _data$$5 === void 0 ? void 0 : _data$$5['android:host']\n    };\n  })) !== null && _intentFilter$data$fi !== void 0 ? _intentFilter$data$fi : [];\n  return {\n    actions: actions,\n    categories: categories,\n    data: data\n  };\n}\nfunction getSingleTaskIntentFilters(androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) return [];\n  var outputSchemes = [];\n  for (var application of androidManifest.manifest.application) {\n    var activity = application.activity;\n    var activities = Array.isArray(activity) ? activity : [activity];\n    var singleTaskActivities = activities.filter(function (activity) {\n      var _activity$$;\n      return (activity === null || activity === void 0 ? void 0 : (_activity$$ = activity.$) === null || _activity$$ === void 0 ? void 0 : _activity$$['android:launchMode']) === 'singleTask';\n    });\n    for (var _activity of singleTaskActivities) {\n      var intentFilters = _activity['intent-filter'];\n      outputSchemes = outputSchemes.concat(intentFilters);\n    }\n  }\n  return outputSchemes;\n}\nfunction getSchemesFromManifest(androidManifest) {\n  var requestedHost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var outputSchemes = [];\n  var singleTaskIntentFilters = getSingleTaskIntentFilters(androidManifest);\n  for (var intentFilter of singleTaskIntentFilters) {\n    var properties = propertiesFromIntentFilter(intentFilter);\n    if (isValidRedirectIntentFilter(properties) && properties.data) {\n      for (var _ref2 of properties.data) {\n        var scheme = _ref2.scheme;\n        var host = _ref2.host;\n        if (requestedHost === null || !host || host === requestedHost) {\n          outputSchemes.push(scheme);\n        }\n      }\n    }\n  }\n  return outputSchemes;\n}\nfunction ensureManifestHasValidIntentFilter(androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return false;\n  }\n  for (var application of androidManifest.manifest.application) {\n    for (var activity of application.activity || []) {\n      var _activity$$2;\n      if ((activity === null || activity === void 0 ? void 0 : (_activity$$2 = activity.$) === null || _activity$$2 === void 0 ? void 0 : _activity$$2['android:launchMode']) === 'singleTask') {\n        for (var intentFilter of activity['intent-filter'] || []) {\n          var properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            return true;\n          }\n        }\n        if (!activity['intent-filter']) {\n          activity['intent-filter'] = [];\n        }\n        activity['intent-filter'].push({\n          action: [{\n            $: {\n              'android:name': 'android.intent.action.VIEW'\n            }\n          }],\n          category: [{\n            $: {\n              'android:name': 'android.intent.category.DEFAULT'\n            }\n          }, {\n            $: {\n              'android:name': 'android.intent.category.BROWSABLE'\n            }\n          }]\n        });\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction hasScheme(scheme, androidManifest) {\n  var schemes = getSchemesFromManifest(androidManifest);\n  return schemes.includes(scheme);\n}\nfunction appendScheme(scheme, androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n  for (var application of androidManifest.manifest.application) {\n    for (var activity of application.activity || []) {\n      var _activity$$3;\n      if ((activity === null || activity === void 0 ? void 0 : (_activity$$3 = activity.$) === null || _activity$$3 === void 0 ? void 0 : _activity$$3['android:launchMode']) === 'singleTask') {\n        for (var intentFilter of activity['intent-filter'] || []) {\n          var properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            if (!intentFilter.data) intentFilter.data = [];\n            intentFilter.data.push({\n              $: {\n                'android:scheme': scheme\n              }\n            });\n          }\n        }\n        break;\n      }\n    }\n  }\n  return androidManifest;\n}\nfunction removeScheme(scheme, androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n  for (var application of androidManifest.manifest.application) {\n    for (var activity of application.activity || []) {\n      var _activity$$4;\n      if ((activity === null || activity === void 0 ? void 0 : (_activity$$4 = activity.$) === null || _activity$$4 === void 0 ? void 0 : _activity$$4['android:launchMode']) === 'singleTask') {\n        for (var intentFilter of activity['intent-filter'] || []) {\n          var properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            for (var dataKey in (intentFilter === null || intentFilter === void 0 ? void 0 : intentFilter.data) || []) {\n              var _intentFilter$data2, _data$$6;\n              var data = (_intentFilter$data2 = intentFilter.data) === null || _intentFilter$data2 === void 0 ? void 0 : _intentFilter$data2[dataKey];\n              if ((data === null || data === void 0 ? void 0 : (_data$$6 = data.$) === null || _data$$6 === void 0 ? void 0 : _data$$6['android:scheme']) === scheme) {\n                var _intentFilter$data3;\n                (_intentFilter$data3 = intentFilter.data) === null || _intentFilter$data3 === void 0 ? true : delete _intentFilter$data3[dataKey];\n              }\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n  return androidManifest;\n}","map":{"version":3,"sources":["../../src/android/Scheme.ts"],"names":["withScheme","setScheme","getScheme","config","Array","isArray","scheme","validate","value","filter","androidManifest","schemes","android","package","push","length","ensureManifestHasValidIntentFilter","currentSchemes","getSchemesFromManifest","uri","index","indexOf","splice","appendScheme","isValidRedirectIntentFilter","actions","categories","includes","propertiesFromIntentFilter","intentFilter","action","map","data","$","category","host","getSingleTaskIntentFilters","manifest","application","outputSchemes","activity","activities","singleTaskActivities","intentFilters","concat","requestedHost","singleTaskIntentFilters","properties","hasScheme","removeScheme","dataKey"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { AndroidManifest, ManifestActivity } from './Manifest';\n\nexport type IntentFilterProps = {\n  actions: string[];\n  categories: string[];\n  data: {\n    scheme: string;\n    host?: string;\n  }[];\n};\n\nexport const withScheme = createAndroidManifestPlugin(setScheme, 'withScheme');\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => typeof value === 'string';\n\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\n// This plugin used to remove the unused schemes but this is unpredictable because other plugins could add schemes.\n// The only way to reliably remove schemes from the project is to nuke the file and regenerate the code (`expo prebuild --clean`).\n// Regardless, having extra schemes isn't a fatal issue and therefore a tolerable compromise is to just add new schemes that aren't currently present.\nexport function setScheme(\n  config: Pick<ExpoConfig, 'scheme' | 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const schemes = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: android.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.android ?? {}),\n  ];\n  // Add the package name to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.android?.package) {\n    schemes.push(config.android.package);\n  }\n  if (schemes.length === 0) {\n    return androidManifest;\n  }\n\n  if (!ensureManifestHasValidIntentFilter(androidManifest)) {\n    addWarningAndroid(\n      'scheme',\n      `Cannot add schemes because the provided manifest does not have a valid Activity with \\`android:launchMode=\"singleTask\"\\``,\n      'https://expo.fyi/setup-android-uri-scheme'\n    );\n    return androidManifest;\n  }\n\n  // Get the current schemes and remove them from the list of schemes to add.\n  const currentSchemes = getSchemesFromManifest(androidManifest);\n  for (const uri of currentSchemes) {\n    const index = schemes.indexOf(uri);\n    if (index > -1) schemes.splice(index, 1);\n  }\n\n  // Now add all of the remaining schemes.\n  for (const uri of schemes) {\n    androidManifest = appendScheme(uri, androidManifest);\n  }\n\n  return androidManifest;\n}\n\nfunction isValidRedirectIntentFilter({ actions, categories }: IntentFilterProps): boolean {\n  return (\n    actions.includes('android.intent.action.VIEW') &&\n    !categories.includes('android.intent.category.LAUNCHER')\n  );\n}\n\nfunction propertiesFromIntentFilter(intentFilter: any): IntentFilterProps {\n  const actions = intentFilter?.action?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const categories = intentFilter?.category?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const data =\n    intentFilter?.data\n      ?.filter((data: any) => data?.$?.['android:scheme'])\n      ?.map((data: any) => ({\n        scheme: data?.$?.['android:scheme'],\n        host: data?.$?.['android:host'],\n      })) ?? [];\n  return {\n    actions,\n    categories,\n    data,\n  };\n}\n\nfunction getSingleTaskIntentFilters(androidManifest: AndroidManifest): any[] {\n  if (!Array.isArray(androidManifest.manifest.application)) return [];\n\n  let outputSchemes: any[] = [];\n  for (const application of androidManifest.manifest.application) {\n    const { activity } = application;\n    // @ts-ignore\n    const activities = Array.isArray(activity) ? activity : [activity];\n    const singleTaskActivities = (activities as ManifestActivity[]).filter(\n      (activity) => activity?.$?.['android:launchMode'] === 'singleTask'\n    );\n    for (const activity of singleTaskActivities) {\n      const intentFilters = activity['intent-filter'];\n      outputSchemes = outputSchemes.concat(intentFilters);\n    }\n  }\n  return outputSchemes;\n}\n\nexport function getSchemesFromManifest(\n  androidManifest: AndroidManifest,\n  requestedHost: string | null = null\n): string[] {\n  const outputSchemes: string[] = [];\n\n  const singleTaskIntentFilters = getSingleTaskIntentFilters(androidManifest);\n  for (const intentFilter of singleTaskIntentFilters) {\n    const properties = propertiesFromIntentFilter(intentFilter);\n    if (isValidRedirectIntentFilter(properties) && properties.data) {\n      for (const { scheme, host } of properties.data) {\n        if (requestedHost === null || !host || host === requestedHost) {\n          outputSchemes.push(scheme);\n        }\n      }\n    }\n  }\n\n  return outputSchemes;\n}\n\nexport function ensureManifestHasValidIntentFilter(androidManifest: AndroidManifest): boolean {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return false;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            return true;\n          }\n        }\n        if (!activity['intent-filter']) {\n          activity['intent-filter'] = [];\n        }\n\n        activity['intent-filter'].push({\n          action: [{ $: { 'android:name': 'android.intent.action.VIEW' } }],\n          category: [\n            { $: { 'android:name': 'android.intent.category.DEFAULT' } },\n            { $: { 'android:name': 'android.intent.category.BROWSABLE' } },\n          ],\n        });\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function hasScheme(scheme: string, androidManifest: AndroidManifest): boolean {\n  const schemes = getSchemesFromManifest(androidManifest);\n  return schemes.includes(scheme);\n}\n\nexport function appendScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            if (!intentFilter.data) intentFilter.data = [];\n            intentFilter.data.push({\n              $: { 'android:scheme': scheme },\n            });\n          }\n        }\n        break;\n      }\n    }\n  }\n  return androidManifest;\n}\n\nexport function removeScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            for (const dataKey in intentFilter?.data || []) {\n              const data = intentFilter.data?.[dataKey];\n              if (data?.$?.['android:scheme'] === scheme) {\n                delete intentFilter.data?.[dataKey];\n              }\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}\n"]},"metadata":{},"sourceType":"script"}