{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawerActions = void 0;\nexports.default = DrawerRouter;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _nonSecure = require(\"nanoid/non-secure\");\nvar _TabRouter = _interopRequireWildcard(require(\"./TabRouter\"));\nvar _excluded = [\"defaultStatus\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar DrawerActions = Object.assign({}, _TabRouter.TabActions, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexports.DrawerActions = DrawerActions;\nfunction DrawerRouter(_ref) {\n  var _ref$defaultStatus = _ref.defaultStatus,\n    defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var router = (0, _TabRouter.default)(rest);\n  var isDrawerInHistory = function isDrawerInHistory(state) {\n    var _state$history;\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n      return it.type === 'drawer';\n    }));\n  };\n  var addDrawerToHistory = function addDrawerToHistory(state) {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n    return Object.assign({}, state, {\n      history: [].concat((0, _toConsumableArray2.default)(state.history), [{\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }])\n    });\n  };\n  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n    return Object.assign({}, state, {\n      history: state.history.filter(function (it) {\n        return it.type !== 'drawer';\n      })\n    });\n  };\n  var openDrawer = function openDrawer(state) {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n    return addDrawerToHistory(state);\n  };\n  var closeDrawer = function closeDrawer(state) {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n    return removeDrawerFromHistory(state);\n  };\n  return Object.assign({}, router, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList,\n        routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      return Object.assign({}, state, {\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList,\n        routeGetIdList = _ref3.routeGetIdList;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      if (isDrawerInHistory(partialState)) {\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n      return Object.assign({}, state, {\n        default: defaultStatus,\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return addDrawerToHistory(state);\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var result = router.getStateForAction(state, action, options);\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n            return result;\n          }\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"mappings":"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","names":["DrawerActions","TabActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","_ref","defaultStatus","rest","router","TabRouter","isDrawerInHistory","state","Boolean","history","_state$history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","_ref2","routeParamList","routeGetIdList","default","stale","key","nanoid","getRehydratedState","partialState","_ref3","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sourceRoot":"../../src","sources":["DrawerRouter.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}