{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinking;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _core = require(\"@react-navigation/core\");\nvar _fastDeepEqual = _interopRequireDefault(require(\"fast-deep-equal\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _createMemoryHistory = _interopRequireDefault(require(\"./createMemoryHistory\"));\nvar _ServerContext = _interopRequireDefault(require(\"./ServerContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n  var callback = function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        if (handling) {\n          queue.unshift(callback);\n          return;\n        }\n        handling = true;\n        yield cb();\n      } finally {\n        handling = false;\n        if (queue.length) {\n          var last = queue.pop();\n          last === null || last === void 0 ? void 0 : last();\n        }\n      }\n    });\n    return function callback() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return callback;\n};\nvar linkingHandlers = [];\nfunction useLinking(ref, _ref) {\n  var independent = _ref.independent,\n    _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n    config = _ref.config,\n    _ref$getStateFromPath = _ref.getStateFromPath,\n    getStateFromPath = _ref$getStateFromPath === void 0 ? _core.getStateFromPath : _ref$getStateFromPath,\n    _ref$getPathFromState = _ref.getPathFromState,\n    getPathFromState = _ref$getPathFromState === void 0 ? _core.getPathFromState : _ref$getPathFromState,\n    _ref$getActionFromSta = _ref.getActionFromState,\n    getActionFromState = _ref$getActionFromSta === void 0 ? _core.getActionFromState : _ref$getActionFromSta;\n  React.useEffect(function () {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    var handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  var _React$useState = React.useState(_createMemoryHistory.default),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),\n    history = _React$useState2[0];\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var server = React.useContext(_ServerContext.default);\n  var getInitialState = React.useCallback(function () {\n    var value;\n    if (enabledRef.current) {\n      var _server$location;\n      var _location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      var path = _location ? _location.pathname + _location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n      var navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      var state = getStateFromPathRef.current(path, configRef.current);\n      if (state) {\n        var rootState = navigation.getRootState();\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(\"An error occurred when trying to handle the link '\" + path + \"': \" + (typeof e === 'object' && e != null && 'message' in e ? e.message : e));\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    var getPathForRoute = function getPathForRoute(route, state) {\n      if (route !== null && route !== void 0 && route.path) {\n        var stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          var focusedRoute = (0, _core.findFocusedRoute)(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && (0, _fastDeepEqual.default)(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n    if (ref.current) {\n      var state = ref.current.getRootState();\n      if (state) {\n        var route = (0, _core.findFocusedRoute)(state);\n        var path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n    var onStateChange = function () {\n      var _ref3 = (0, _asyncToGenerator2.default)(function* () {\n        var navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        var previousState = previousStateRef.current;\n        var state = navigation.getRootState();\n        if (!state) {\n          return;\n        }\n        var pendingPath = pendingPopStatePathRef.current;\n        var route = (0, _core.findFocusedRoute)(state);\n        var path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n        var _findMatchingState = findMatchingState(previousState, state),\n          _findMatchingState2 = (0, _slicedToArray2.default)(_findMatchingState, 2),\n          previousFocusedState = _findMatchingState2[0],\n          focusedState = _findMatchingState2[1];\n        if (previousFocusedState && focusedState && path !== pendingPath) {\n          var historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            history.push({\n              path: path,\n              state: state\n            });\n          } else if (historyDelta < 0) {\n            var nextIndex = history.backIndex({\n              path: path\n            });\n            var currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex) {\n                yield history.go(nextIndex - currentIndex);\n              } else {\n                yield history.go(historyDelta);\n              }\n              history.replace({\n                path: path,\n                state: state\n              });\n            } catch (e) {}\n          } else {\n            history.replace({\n              path: path,\n              state: state\n            });\n          }\n        } else {\n          history.replace({\n            path: path,\n            state: state\n          });\n        }\n      });\n      return function onStateChange() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"sources":["useLinking.tsx"],"names":["findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","handling","queue","callback","unshift","last","pop","linkingHandlers","useLinking","ref","independent","enabled","config","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","getActionFromStateDefault","React","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","createMemoryHistory","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","ServerContext","getInitialState","useCallback","value","location","window","path","pathname","search","thenable","then","onfulfilled","Promise","resolve","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","navigation","previousIndex","record","get","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","isEqual","params","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener"],"mappings":"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","sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? // @ts-expect-error: we're already checking for this\n                      e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}