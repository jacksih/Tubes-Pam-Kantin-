{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEntitlementsPlugin = createEntitlementsPlugin;\nexports.createInfoPlistPlugin = createInfoPlistPlugin;\nexports.createInfoPlistPluginWithPropertyGuard = createInfoPlistPluginWithPropertyGuard;\nexports.withXcodeProject = exports.withPodfileProperties = exports.withInfoPlist = exports.withExpoPlist = exports.withEntitlementsPlist = exports.withAppDelegate = void 0;\nfunction _obj() {\n  var data = require(\"../utils/obj\");\n  _obj = function _obj() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _withMod() {\n  var data = require(\"./withMod\");\n  _withMod = function _withMod() {\n    return data;\n  };\n  return data;\n}\nfunction createInfoPlistPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return withInfoPlist(config, function () {\n      var _ref = _asyncToGenerator(function* (config) {\n        config.modResults = yield action(config, config.modResults);\n        return config;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  };\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n  return withUnknown;\n}\nfunction createInfoPlistPluginWithPropertyGuard(action, settings, name) {\n  var withUnknown = function withUnknown(config) {\n    return withInfoPlist(config, function () {\n      var _ref2 = _asyncToGenerator(function* (config) {\n        var _config$modRawConfig$, _config$modRawConfig$2;\n        var existingProperty = settings.expoPropertyGetter ? settings.expoPropertyGetter(config) : (0, _obj().get)(config, settings.expoConfigProperty);\n        if (((_config$modRawConfig$ = config.modRawConfig.ios) === null || _config$modRawConfig$ === void 0 ? void 0 : (_config$modRawConfig$2 = _config$modRawConfig$.infoPlist) === null || _config$modRawConfig$2 === void 0 ? void 0 : _config$modRawConfig$2[settings.infoPlistProperty]) === undefined) {\n          config.modResults = yield action(config, config.modResults);\n        } else if (existingProperty !== undefined) {\n          (0, _warnings().addWarningIOS)(settings.expoConfigProperty, \"\\\"ios.infoPlist.\" + settings.infoPlistProperty + \"\\\" is set in the config. Ignoring abstract property \\\"\" + settings.expoConfigProperty + \"\\\": \" + existingProperty);\n        }\n        return config;\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  };\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n  return withUnknown;\n}\nfunction createEntitlementsPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return withEntitlementsPlist(config, function () {\n      var _ref3 = _asyncToGenerator(function* (config) {\n        config.modResults = yield action(config, config.modResults);\n        return config;\n      });\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  };\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n  return withUnknown;\n}\nvar withAppDelegate = function withAppDelegate(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    action: action\n  });\n};\nexports.withAppDelegate = withAppDelegate;\nvar withInfoPlist = function withInfoPlist(config, _action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    action: function () {\n      var _action2 = _asyncToGenerator(function* (config) {\n        config = yield _action(config);\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.infoPlist = config.modResults;\n        return config;\n      });\n      function action(_x4) {\n        return _action2.apply(this, arguments);\n      }\n      return action;\n    }()\n  });\n};\nexports.withInfoPlist = withInfoPlist;\nvar withEntitlementsPlist = function withEntitlementsPlist(config, _action3) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    action: function () {\n      var _action4 = _asyncToGenerator(function* (config) {\n        config = yield _action3(config);\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.entitlements = config.modResults;\n        return config;\n      });\n      function action(_x5) {\n        return _action4.apply(this, arguments);\n      }\n      return action;\n    }()\n  });\n};\nexports.withEntitlementsPlist = withEntitlementsPlist;\nvar withExpoPlist = function withExpoPlist(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    action: action\n  });\n};\nexports.withExpoPlist = withExpoPlist;\nvar withXcodeProject = function withXcodeProject(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    action: action\n  });\n};\nexports.withXcodeProject = withXcodeProject;\nvar withPodfileProperties = function withPodfileProperties(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'podfileProperties',\n    action: action\n  });\n};\nexports.withPodfileProperties = withPodfileProperties;","map":{"version":3,"sources":["../../src/plugins/ios-plugins.ts"],"names":["createInfoPlistPlugin","action","name","withUnknown","config","withInfoPlist","modResults","Object","defineProperty","value","createInfoPlistPluginWithPropertyGuard","settings","existingProperty","expoPropertyGetter","expoConfigProperty","modRawConfig","ios","infoPlist","infoPlistProperty","undefined","createEntitlementsPlugin","withEntitlementsPlist","withAppDelegate","platform","mod","entitlements","withExpoPlist","withXcodeProject","withPodfileProperties"],"mappings":"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","sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\nimport type { JSONObject } from '@expo/json-file';\nimport type { XcodeProject } from 'xcode';\n\nimport type { ConfigPlugin, Mod } from '../Plugin.types';\nimport type { ExpoPlist, InfoPlist } from '../ios/IosConfig.types';\nimport type { AppDelegateProjectFile } from '../ios/Paths';\nimport { get } from '../utils/obj';\nimport { addWarningIOS } from '../utils/warnings';\nimport { withMod } from './withMod';\n\ntype MutateInfoPlistAction = (\n  expo: ExpoConfig,\n  infoPlist: InfoPlist\n) => Promise<InfoPlist> | InfoPlist;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createInfoPlistPlugin(action: MutateInfoPlistAction, name?: string): ConfigPlugin {\n  const withUnknown: ConfigPlugin = (config) =>\n    withInfoPlist(config, async (config) => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\nexport function createInfoPlistPluginWithPropertyGuard(\n  action: MutateInfoPlistAction,\n  settings: {\n    infoPlistProperty: string;\n    expoConfigProperty: string;\n    expoPropertyGetter?: (config: ExpoConfig) => string;\n  },\n  name?: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = (config) =>\n    withInfoPlist(config, async (config) => {\n      const existingProperty = settings.expoPropertyGetter\n        ? settings.expoPropertyGetter(config)\n        : get(config, settings.expoConfigProperty);\n      // If the user explicitly sets a value in the infoPlist, we should respect that.\n      if (config.modRawConfig.ios?.infoPlist?.[settings.infoPlistProperty] === undefined) {\n        config.modResults = await action(config, config.modResults);\n      } else if (existingProperty !== undefined) {\n        // Only warn if there is a conflict.\n        addWarningIOS(\n          settings.expoConfigProperty,\n          `\"ios.infoPlist.${settings.infoPlistProperty}\" is set in the config. Ignoring abstract property \"${settings.expoConfigProperty}\": ${existingProperty}`\n        );\n      }\n\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\ntype MutateEntitlementsPlistAction = (expo: ExpoConfig, entitlements: JSONObject) => JSONObject;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createEntitlementsPlugin(\n  action: MutateEntitlementsPlistAction,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = (config) =>\n    withEntitlementsPlist(config, async (config) => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * Provides the AppDelegate file for modification.\n *\n * @param config\n * @param action\n */\nexport const withAppDelegate: ConfigPlugin<Mod<AppDelegateProjectFile>> = (config, action) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    action,\n  });\n};\n\n/**\n * Provides the Info.plist file for modification.\n * Keeps the config's expo.ios.infoPlist object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withInfoPlist: ConfigPlugin<Mod<InfoPlist>> = (config, action) => {\n  return withMod<InfoPlist>(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the main .entitlements file for modification.\n * Keeps the config's expo.ios.entitlements object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withEntitlementsPlist: ConfigPlugin<Mod<JSONObject>> = (config, action) => {\n  return withMod<JSONObject>(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the Expo.plist for modification.\n *\n * @param config\n * @param action\n */\nexport const withExpoPlist: ConfigPlugin<Mod<ExpoPlist>> = (config, action) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    action,\n  });\n};\n\n/**\n * Provides the main .xcodeproj for modification.\n *\n * @param config\n * @param action\n */\nexport const withXcodeProject: ConfigPlugin<Mod<XcodeProject>> = (config, action) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    action,\n  });\n};\n\n/**\n * Provides the Podfile.properties.json for modification.\n *\n * @param config\n * @param action\n */\nexport const withPodfileProperties: ConfigPlugin<Mod<Record<string, string>>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'podfileProperties',\n    action,\n  });\n};\n"]},"metadata":{},"sourceType":"script"}