{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withStaticPlugin = void 0;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction _pluginResolver() {\n  var data = require(\"../utils/plugin-resolver\");\n  _pluginResolver = function _pluginResolver() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar EXPO_DEBUG = (0, _getenv().boolish)('EXPO_DEBUG', false);\nvar EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS = (0, _getenv().boolish)('EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS', false);\nvar EXPO_USE_UNVERSIONED_PLUGINS = (0, _getenv().boolish)('EXPO_USE_UNVERSIONED_PLUGINS', false);\nfunction isModuleMissingError(name, error) {\n  if (['MODULE_NOT_FOUND', 'PLUGIN_NOT_FOUND'].includes(error.code)) {\n    return true;\n  }\n  return error.message.includes(\"Cannot find module '\" + name + \"'\");\n}\nfunction isUnexpectedTokenError(error) {\n  if (error instanceof SyntaxError || error instanceof _errors().PluginError && error.code === 'INVALID_PLUGIN_IMPORT') {\n    return !!error.message.match(/Unexpected token/) || !!error.message.match(/Cannot use import statement/);\n  }\n  return false;\n}\nvar withStaticPlugin = function withStaticPlugin(config, props) {\n  var _pluginProps;\n  var projectRoot = props.projectRoot;\n  if (!projectRoot) {\n    var _config$_internal;\n    projectRoot = (_config$_internal = config._internal) === null || _config$_internal === void 0 ? void 0 : _config$_internal.projectRoot;\n    (0, _pluginResolver().assertInternalProjectRoot)(projectRoot);\n  }\n  var _ref = (0, _pluginResolver().normalizeStaticPlugin)(props.plugin),\n    _ref2 = _slicedToArray(_ref, 2),\n    pluginResolve = _ref2[0],\n    pluginProps = _ref2[1];\n  (0, _assert().default)(!((_pluginProps = pluginProps) !== null && _pluginProps !== void 0 && _pluginProps._resolverError), \"Plugin property '_resolverError' is a reserved property of `withStaticPlugin`\");\n  var withPlugin;\n  if (typeof pluginResolve === 'function') {\n    withPlugin = pluginResolve;\n  } else if (typeof pluginResolve === 'string') {\n    try {\n      withPlugin = (0, _pluginResolver().resolveConfigPluginFunction)(projectRoot, pluginResolve);\n      if (EXPO_USE_UNVERSIONED_PLUGINS && !!withPlugin && !!props._isLegacyPlugin && !!props.fallback) {\n        console.log(\"Force \\\"\" + pluginResolve + \"\\\" to unversioned plugin\");\n        withPlugin = props.fallback;\n      }\n    } catch (error) {\n      if (EXPO_DEBUG) {\n        if (EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS) {\n          console.log(\"Error resolving plugin \\\"\" + pluginResolve + \"\\\"\");\n          console.log(error);\n          console.log();\n        } else {\n          var shouldMuteWarning = props._isLegacyPlugin && (isModuleMissingError(pluginResolve, error) || isUnexpectedTokenError(error));\n          if (!shouldMuteWarning) {\n            if (isModuleMissingError(pluginResolve, error)) {\n              console.log(\"Could not find plugin \\\"\" + pluginResolve + \"\\\"\");\n            } else {\n              console.log(\"Error resolving plugin \\\"\" + pluginResolve + \"\\\"\");\n              console.log(error);\n              console.log();\n            }\n          }\n        }\n      }\n      if (props.fallback) {\n        if (!pluginProps) pluginProps = {};\n        pluginProps._resolverError = error;\n        withPlugin = props.fallback;\n      } else {\n        throw error;\n      }\n    }\n  } else {\n    throw new (_errors().PluginError)(\"Plugin is an unexpected type: \" + typeof pluginResolve, 'INVALID_PLUGIN_TYPE');\n  }\n  config = withPlugin(config, pluginProps);\n  return config;\n};\nexports.withStaticPlugin = withStaticPlugin;","map":{"version":3,"sources":["../../src/plugins/withStaticPlugin.ts"],"names":["EXPO_DEBUG","EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS","EXPO_USE_UNVERSIONED_PLUGINS","isModuleMissingError","name","error","includes","code","message","isUnexpectedTokenError","SyntaxError","PluginError","match","withStaticPlugin","config","props","projectRoot","_internal","pluginResolve","pluginProps","plugin","_resolverError","withPlugin","_isLegacyPlugin","fallback","console","log","shouldMuteWarning"],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport { boolish } from 'getenv';\n\nimport { ConfigPlugin, StaticPlugin } from '../Plugin.types';\nimport { PluginError } from '../utils/errors';\nimport {\n  assertInternalProjectRoot,\n  normalizeStaticPlugin,\n  resolveConfigPluginFunction,\n} from '../utils/plugin-resolver';\n\nconst EXPO_DEBUG = boolish('EXPO_DEBUG', false);\n\n// Show all error info related to plugin resolution.\nconst EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS = boolish('EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS', false);\n// Force using the fallback unversioned plugin instead of a local versioned copy,\n// this should only be used for testing the CLI.\nconst EXPO_USE_UNVERSIONED_PLUGINS = boolish('EXPO_USE_UNVERSIONED_PLUGINS', false);\n\nfunction isModuleMissingError(name: string, error: Error): boolean {\n  // @ts-ignore\n  if (['MODULE_NOT_FOUND', 'PLUGIN_NOT_FOUND'].includes(error.code)) {\n    return true;\n  }\n  return error.message.includes(`Cannot find module '${name}'`);\n}\n\nfunction isUnexpectedTokenError(error: Error): boolean {\n  if (\n    error instanceof SyntaxError ||\n    (error instanceof PluginError && error.code === 'INVALID_PLUGIN_IMPORT')\n  ) {\n    return (\n      // These are the most common errors that'll be thrown when a package isn't transpiled correctly.\n      !!error.message.match(/Unexpected token/) ||\n      !!error.message.match(/Cannot use import statement/)\n    );\n  }\n  return false;\n}\n\n/**\n * Resolves static module plugin and potentially falls back on a provided plugin if the module cannot be resolved\n *\n * @param config\n * @param fallback Plugin with `_resolverError` explaining why the module couldn't be used\n * @param projectRoot optional project root, fallback to _internal.projectRoot. Used for testing.\n * @param _isLegacyPlugin Used to suppress errors thrown by plugins that are applied automatically\n */\nexport const withStaticPlugin: ConfigPlugin<{\n  plugin: StaticPlugin | ConfigPlugin | string;\n  fallback?: ConfigPlugin<{ _resolverError: Error } & any>;\n  projectRoot?: string;\n  _isLegacyPlugin?: boolean;\n}> = (config, props) => {\n  let projectRoot = props.projectRoot;\n  if (!projectRoot) {\n    projectRoot = config._internal?.projectRoot;\n    assertInternalProjectRoot(projectRoot);\n  }\n\n  let [pluginResolve, pluginProps] = normalizeStaticPlugin(props.plugin);\n  // Ensure no one uses this property by accident.\n  assert(\n    !pluginProps?._resolverError,\n    `Plugin property '_resolverError' is a reserved property of \\`withStaticPlugin\\``\n  );\n\n  let withPlugin: ConfigPlugin<unknown>;\n\n  if (\n    // Function was provided, no need to resolve: [withPlugin, {}]\n    typeof pluginResolve === 'function'\n  ) {\n    withPlugin = pluginResolve;\n  } else if (typeof pluginResolve === 'string') {\n    try {\n      // Resolve and evaluate plugins.\n      withPlugin = resolveConfigPluginFunction(projectRoot, pluginResolve);\n\n      // Only force if the project has the versioned plugin, otherwise use default behavior.\n      // This helps see which plugins are being skipped.\n      if (\n        EXPO_USE_UNVERSIONED_PLUGINS &&\n        !!withPlugin &&\n        !!props._isLegacyPlugin &&\n        !!props.fallback\n      ) {\n        console.log(`Force \"${pluginResolve}\" to unversioned plugin`);\n        withPlugin = props.fallback;\n      }\n    } catch (error: any) {\n      if (EXPO_DEBUG) {\n        if (EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS) {\n          // Log the error in debug mode for plugins with fallbacks (like the Expo managed plugins).\n          console.log(`Error resolving plugin \"${pluginResolve}\"`);\n          console.log(error);\n          console.log();\n        } else {\n          const shouldMuteWarning =\n            props._isLegacyPlugin &&\n            (isModuleMissingError(pluginResolve, error) || isUnexpectedTokenError(error));\n          if (!shouldMuteWarning) {\n            if (isModuleMissingError(pluginResolve, error)) {\n              // Prevent causing log spew for basic resolution errors.\n              console.log(`Could not find plugin \"${pluginResolve}\"`);\n            } else {\n              // Log the error in debug mode for plugins with fallbacks (like the Expo managed plugins).\n              console.log(`Error resolving plugin \"${pluginResolve}\"`);\n              console.log(error);\n              console.log();\n            }\n          }\n        }\n      }\n      // TODO: Maybe allow for `PluginError`s to be thrown so external plugins can assert invalid options.\n\n      // If the static module failed to resolve, attempt to use a fallback.\n      // This enables support for built-in plugins with versioned variations living in other packages.\n      if (props.fallback) {\n        if (!pluginProps) pluginProps = {};\n        // Pass this to the fallback plugin for potential warnings about needing to install a versioned package.\n        pluginProps._resolverError = error;\n        withPlugin = props.fallback;\n      } else {\n        // If no fallback, throw the resolution error.\n        throw error;\n      }\n    }\n  } else {\n    throw new PluginError(\n      `Plugin is an unexpected type: ${typeof pluginResolve}`,\n      'INVALID_PLUGIN_TYPE'\n    );\n  }\n\n  // Execute the plugin.\n  config = withPlugin(config, pluginProps);\n  return config;\n};\n"]},"metadata":{},"sourceType":"script"}