{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"experimentalImportSupport\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBabelConfig = getBabelConfig;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar getBabelRC = function () {\n  var babelRC = null;\n  return function _getBabelRC(projectRoot, options) {\n    if (babelRC != null) {\n      return babelRC;\n    }\n    babelRC = {\n      plugins: []\n    };\n    var projectBabelRCPath;\n    if (projectRoot) {\n      projectBabelRCPath = _path().default.resolve(projectRoot, '.babelrc');\n    }\n    if (projectBabelRCPath) {\n      if (!_fs().default.existsSync(projectBabelRCPath)) {\n        projectBabelRCPath = _path().default.resolve(projectRoot, '.babelrc.js');\n      }\n      if (!_fs().default.existsSync(projectBabelRCPath)) {\n        projectBabelRCPath = _path().default.resolve(projectRoot, 'babel.config.js');\n      }\n      if (_fs().default.existsSync(projectBabelRCPath)) {\n        babelRC.extends = projectBabelRCPath;\n      }\n    }\n    if (!babelRC.extends) {\n      var _ref, _resolveFrom$silent;\n      var experimentalImportSupport = options.experimentalImportSupport,\n        presetOptions = _objectWithoutProperties(options, _excluded);\n      var presetPath = (_ref = (_resolveFrom$silent = _resolveFrom().default.silent(projectRoot, 'babel-preset-expo')) !== null && _resolveFrom$silent !== void 0 ? _resolveFrom$silent : _resolveFrom().default.silent(projectRoot, 'metro-react-native-babel-preset')) !== null && _ref !== void 0 ? _ref : require.resolve('babel-preset-expo');\n      babelRC.presets = [[require(presetPath), Object.assign({\n        jsxRuntime: 'automatic'\n      }, presetOptions, {\n        disableImportExportTransform: experimentalImportSupport,\n        enableBabelRuntime: options.enableBabelRuntime\n      })]];\n    }\n    return babelRC;\n  };\n}();\nfunction getBabelConfig(filename, options) {\n  var plugins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var babelRC = getBabelRC(options.projectRoot, options);\n  var extraConfig = {\n    babelrc: typeof options.enableBabelRCLookup === 'boolean' ? options.enableBabelRCLookup : true,\n    code: false,\n    filename: filename,\n    highlightCode: true\n  };\n  var config = Object.assign({}, babelRC, extraConfig);\n  var extraPlugins = [];\n  if (options.inlineRequires) {\n    var inlineRequiresPlugin = (0, _resolveFrom().default)(options.projectRoot, 'babel-preset-fbjs/plugins/inline-requires');\n    extraPlugins.push(inlineRequiresPlugin);\n  }\n  config.plugins = extraPlugins.concat(config.plugins, plugins);\n  if (options.dev && options.hot) {\n    var mayContainEditableReactComponents = filename.indexOf('node_modules') === -1;\n    if (mayContainEditableReactComponents) {\n      if (!config.plugins) {\n        config.plugins = [];\n      }\n      config.plugins.push(_resolveFrom().default.silent(options.projectRoot, 'react-refresh/babel'));\n    }\n  }\n  return Object.assign({}, babelRC, config);\n}","map":{"version":3,"sources":["../../src/transformer/getBabelConfig.ts"],"names":["getBabelRC","babelRC","_getBabelRC","projectRoot","options","plugins","projectBabelRCPath","path","resolve","fs","existsSync","extends","experimentalImportSupport","presetOptions","presetPath","resolveFrom","silent","require","presets","jsxRuntime","disableImportExportTransform","enableBabelRuntime","getBabelConfig","filename","extraConfig","babelrc","enableBabelRCLookup","code","highlightCode","config","extraPlugins","inlineRequires","inlineRequiresPlugin","push","concat","dev","hot","mayContainEditableReactComponents","indexOf"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Expo.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Forks the default metro-react-native-babel-transformer and adds support for known transforms.\n */\n\nimport type { PluginItem as BabelPlugins, PluginItem } from '@babel/core';\nimport fs from 'fs';\nimport type { BabelTransformerOptions } from 'metro-babel-transformer';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\n/**\n * Return a memoized function that checks for the existence of a\n * project level .babelrc file, and if it doesn't exist, reads the\n * default RN babelrc file and uses that.\n */\nconst getBabelRC = (function () {\n  let babelRC: {\n    // `any` to avoid flow type mismatch with Babel 7's internal type of\n    // `Array<string>` even though it correctly accepts the usage below.\n    presets?: any;\n    extends?: string;\n    plugins: BabelPlugins;\n  } | null = null;\n\n  return function _getBabelRC(projectRoot: string, options: BabelTransformerOptions) {\n    if (babelRC != null) {\n      return babelRC;\n    }\n\n    babelRC = { plugins: [] };\n\n    // Let's look for a babel config file in the project root.\n    // TODO look into adding a command line option to specify this location\n    let projectBabelRCPath;\n\n    // .babelrc\n    if (projectRoot) {\n      projectBabelRCPath = path.resolve(projectRoot, '.babelrc');\n    }\n\n    if (projectBabelRCPath) {\n      // .babelrc.js\n      if (!fs.existsSync(projectBabelRCPath)) {\n        projectBabelRCPath = path.resolve(projectRoot, '.babelrc.js');\n      }\n\n      // babel.config.js\n      if (!fs.existsSync(projectBabelRCPath)) {\n        projectBabelRCPath = path.resolve(projectRoot, 'babel.config.js');\n      }\n\n      // If we found a babel config file, extend our config off of it\n      // otherwise the default config will be used\n      if (fs.existsSync(projectBabelRCPath)) {\n        babelRC.extends = projectBabelRCPath;\n      }\n    }\n\n    // If a babel config file doesn't exist in the project then\n    // the default preset for react-native will be used instead.\n    if (!babelRC.extends) {\n      const { experimentalImportSupport, ...presetOptions } = options;\n\n      // Use `babel-preset-expo` instead of `metro-react-native-babel-preset`.\n      const presetPath =\n        resolveFrom.silent(projectRoot, 'babel-preset-expo') ??\n        resolveFrom.silent(projectRoot, 'metro-react-native-babel-preset') ??\n        require.resolve('babel-preset-expo');\n\n      babelRC.presets = [\n        [\n          require(presetPath),\n          {\n            // Default to React 17 automatic JSX transform.\n            jsxRuntime: 'automatic',\n            ...presetOptions,\n            disableImportExportTransform: experimentalImportSupport,\n            enableBabelRuntime: options.enableBabelRuntime,\n          },\n        ],\n      ];\n    }\n\n    return babelRC;\n  };\n})();\n\n/**\n * Given a filename and options, build a Babel\n * config object with the appropriate plugins.\n */\nexport function getBabelConfig(\n  filename: string,\n  options: BabelTransformerOptions,\n  plugins: BabelPlugins = []\n) {\n  const babelRC = getBabelRC(options.projectRoot, options);\n\n  const extraConfig = {\n    babelrc: typeof options.enableBabelRCLookup === 'boolean' ? options.enableBabelRCLookup : true,\n    code: false,\n    filename,\n    highlightCode: true,\n  };\n\n  const config: any = { ...babelRC, ...extraConfig };\n\n  // Add extra plugins\n  const extraPlugins: (string | PluginItem)[] = [];\n\n  // TODO: This probably can be removed\n  if (options.inlineRequires) {\n    const inlineRequiresPlugin = resolveFrom(\n      options.projectRoot,\n      'babel-preset-fbjs/plugins/inline-requires'\n    );\n    extraPlugins.push(inlineRequiresPlugin);\n  }\n\n  config.plugins = extraPlugins.concat(config.plugins, plugins);\n\n  if (options.dev && options.hot) {\n    // Note: this intentionally doesn't include the path separator because\n    // I'm not sure which one it should use on Windows, and false positives\n    // are unlikely anyway. If you later decide to include the separator,\n    // don't forget that the string usually *starts* with \"node_modules\" so\n    // the first one often won't be there.\n    // TODO: Support monorepos\n    const mayContainEditableReactComponents = filename.indexOf('node_modules') === -1;\n\n    if (mayContainEditableReactComponents) {\n      if (!config.plugins) {\n        config.plugins = [];\n      }\n      // Add react refresh runtime.\n      // NOTICE: keep in sync with 'metro-react-native-babel-preset/src/configs/hmr'.\n      config.plugins.push(resolveFrom.silent(options.projectRoot, 'react-refresh/babel'));\n    }\n  }\n\n  return { ...babelRC, ...config };\n}\n"]},"metadata":{},"sourceType":"script"}