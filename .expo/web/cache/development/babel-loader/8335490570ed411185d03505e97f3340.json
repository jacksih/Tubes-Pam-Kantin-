{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWindowSoftInputModeMode = getWindowSoftInputModeMode;\nexports.setWindowSoftInputModeMode = setWindowSoftInputModeMode;\nexports.withWindowSoftInputMode = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n  _Manifest = function _Manifest() {\n    return data;\n  };\n  return data;\n}\nvar ANDROID_WINDOW_SOFT_INPUT_MODE = 'android:windowSoftInputMode';\nvar MAPPING = {\n  pan: 'adjustPan',\n  resize: 'adjustResize'\n};\nvar withWindowSoftInputMode = function withWindowSoftInputMode(config) {\n  return (0, _androidPlugins().withAndroidManifest)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = setWindowSoftInputModeMode(config, config.modResults);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withWindowSoftInputMode = withWindowSoftInputMode;\nfunction setWindowSoftInputModeMode(config, androidManifest) {\n  var app = (0, _Manifest().getMainActivityOrThrow)(androidManifest);\n  app.$[ANDROID_WINDOW_SOFT_INPUT_MODE] = getWindowSoftInputModeMode(config);\n  return androidManifest;\n}\nfunction getWindowSoftInputModeMode(config) {\n  var _config$android, _MAPPING$value;\n  var value = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.softwareKeyboardLayoutMode;\n  if (!value) {\n    return 'adjustResize';\n  }\n  return (_MAPPING$value = MAPPING[value]) !== null && _MAPPING$value !== void 0 ? _MAPPING$value : value;\n}","map":{"version":3,"sources":["../../src/android/WindowSoftInputMode.ts"],"names":["ANDROID_WINDOW_SOFT_INPUT_MODE","MAPPING","pan","resize","withWindowSoftInputMode","config","modResults","setWindowSoftInputModeMode","androidManifest","app","$","getWindowSoftInputModeMode","value","android","softwareKeyboardLayoutMode"],"mappings":";;;;;;;;;AAGA,SAAA,eAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;EAAA,eAAA,GAAA,2BAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AACA,SAAA,SAAA,GAAA;EAAA,IAAA,IAAA,GAAA,OAAA,CAAA,YAAA,CAAA;EAAA,SAAA,GAAA,qBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;AAEA,IAAMA,8BAA8B,GAAG,6BAAvC;AAEA,IAAMC,OAA+B,GAAG;EACtCC,GAAG,EAAE,WADiC;EAEtCC,MAAM,EAAE;AAF8B,CAAxC;AAKO,IAAMC,uBAAqC,GAAIC,SAAzCD,uBAAqC,CAAIC,MAAD,EAAY;EAC/D,OAAO,CAAA,CAAA,EAAA,eAAA,EAAA,CAAA,mBAAA,EAAoBA,MAApB;IAAA,6BAA4B,WAAOA,MAAP,EAAkB;MACnDA,MAAM,CAACC,UAAPD,GAAoBE,0BAA0B,CAACF,MAAD,EAASA,MAAM,CAACC,UAAhB,CAA9CD;MACA,OAAOA,MAAP;IACD,CAHM;IAAA;MAAA;IAAA;EAAA,IAAP;AAID,CALM;;AAOA,SAASE,0BAAT,CACLF,MADK,EAELG,eAFK,EAGL;EACA,IAAMC,GAAG,GAAG,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,sBAAA,EAAuBD,eAAvB,CAAZ;EACAC,GAAG,CAACC,CAAJD,CAAMT,8BAANS,CAAAA,GAAwCE,0BAA0B,CAACN,MAAD,CAAlEI;EACA,OAAOD,eAAP;AACD;AAEM,SAASG,0BAAT,CAAoCN,MAApC,EAAyE;EAAA,IAAA,eAAA,EAAA,cAAA;EAC9E,IAAMO,KAAK,GAAA,CAAA,eAAA,GAAGP,MAAM,CAACQ,OAAV,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGR,eAAAA,CAAgBS,0BAA9B;EAEA,IAAI,CAACF,KAAL,EAAY;IAEV,OAAO,cAAP;EACD;EACD,OAAA,CAAA,cAAA,GAAOX,OAAO,CAACW,KAAD,CAAd,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,cAAA,GAAyBA,KAAzB;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\nconst ANDROID_WINDOW_SOFT_INPUT_MODE = 'android:windowSoftInputMode';\n\nconst MAPPING: Record<string, string> = {\n  pan: 'adjustPan',\n  resize: 'adjustResize',\n};\n\nexport const withWindowSoftInputMode: ConfigPlugin = (config) => {\n  return withAndroidManifest(config, async (config) => {\n    config.modResults = setWindowSoftInputModeMode(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setWindowSoftInputModeMode(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>,\n  androidManifest: AndroidManifest\n) {\n  const app = getMainActivityOrThrow(androidManifest);\n  app.$[ANDROID_WINDOW_SOFT_INPUT_MODE] = getWindowSoftInputModeMode(config);\n  return androidManifest;\n}\n\nexport function getWindowSoftInputModeMode(config: Pick<ExpoConfig, 'android'>) {\n  const value = config.android?.softwareKeyboardLayoutMode;\n\n  if (!value) {\n    // Default to `adjustResize` or `resize`.\n    return 'adjustResize';\n  }\n  return MAPPING[value] ?? value;\n}\n"]},"metadata":{},"sourceType":"script"}