{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = PreventRemoveProvider;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _nonSecure = require(\"nanoid/non-secure\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLatestCallback = _interopRequireDefault(require(\"use-latest-callback\"));\nvar _NavigationHelpersContext = _interopRequireDefault(require(\"./NavigationHelpersContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nvar _PreventRemoveContext = _interopRequireDefault(require(\"./PreventRemoveContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar transformPreventedRoutes = function transformPreventedRoutes(preventedRoutesMap) {\n  var preventedRoutesToTransform = (0, _toConsumableArray2.default)(preventedRoutesMap.values());\n  var preventedRoutes = preventedRoutesToTransform.reduce(function (acc, _ref) {\n    var _acc$routeKey;\n    var routeKey = _ref.routeKey,\n      preventRemove = _ref.preventRemove;\n    acc[routeKey] = {\n      preventRemove: ((_acc$routeKey = acc[routeKey]) === null || _acc$routeKey === void 0 ? void 0 : _acc$routeKey.preventRemove) || preventRemove\n    };\n    return acc;\n  }, {});\n  return preventedRoutes;\n};\nfunction PreventRemoveProvider(_ref2) {\n  var children = _ref2.children;\n  var _React$useState = React.useState(function () {\n      return (0, _nonSecure.nanoid)();\n    }),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),\n    parentId = _React$useState2[0];\n  var _React$useState3 = React.useState(new Map()),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n    preventedRoutesMap = _React$useState4[0],\n    setPreventedRoutesMap = _React$useState4[1];\n  var navigation = React.useContext(_NavigationHelpersContext.default);\n  var route = React.useContext(_NavigationRouteContext.default);\n  var preventRemoveContextValue = React.useContext(_PreventRemoveContext.default);\n  var setParentPrevented = preventRemoveContextValue === null || preventRemoveContextValue === void 0 ? void 0 : preventRemoveContextValue.setPreventRemove;\n  var setPreventRemove = (0, _useLatestCallback.default)(function (id, routeKey, preventRemove) {\n    if (preventRemove && (navigation == null || navigation !== null && navigation !== void 0 && navigation.getState().routes.every(function (route) {\n      return route.key !== routeKey;\n    }))) {\n      throw new Error(\"Couldn't find a route with the key \" + routeKey + \". Is your component inside NavigationContent?\");\n    }\n    setPreventedRoutesMap(function (prevPrevented) {\n      var _prevPrevented$get, _prevPrevented$get2;\n      if (routeKey === ((_prevPrevented$get = prevPrevented.get(id)) === null || _prevPrevented$get === void 0 ? void 0 : _prevPrevented$get.routeKey) && preventRemove === ((_prevPrevented$get2 = prevPrevented.get(id)) === null || _prevPrevented$get2 === void 0 ? void 0 : _prevPrevented$get2.preventRemove)) {\n        return prevPrevented;\n      }\n      var nextPrevented = new Map(prevPrevented);\n      if (preventRemove) {\n        nextPrevented.set(id, {\n          routeKey: routeKey,\n          preventRemove: preventRemove\n        });\n      } else {\n        nextPrevented.delete(id);\n      }\n      return nextPrevented;\n    });\n  });\n  var isPrevented = (0, _toConsumableArray2.default)(preventedRoutesMap.values()).some(function (_ref3) {\n    var preventRemove = _ref3.preventRemove;\n    return preventRemove;\n  });\n  React.useEffect(function () {\n    if ((route === null || route === void 0 ? void 0 : route.key) !== undefined && setParentPrevented !== undefined) {\n      setParentPrevented(parentId, route.key, isPrevented);\n      return function () {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n    return;\n  }, [parentId, isPrevented, route === null || route === void 0 ? void 0 : route.key, setParentPrevented]);\n  var value = React.useMemo(function () {\n    return {\n      setPreventRemove: setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap)\n    };\n  }, [setPreventRemove, preventedRoutesMap]);\n  return React.createElement(_PreventRemoveContext.default.Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"sources":["PreventRemoveProvider.tsx"],"names":["transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","preventRemove","PreventRemoveProvider","children","parentId","React","useState","nanoid","setPreventedRoutesMap","Map","navigation","useContext","NavigationHelpersContext","route","NavigationRouteContext","preventRemoveContextValue","PreventRemoveContext","setParentPrevented","setPreventRemove","useLatestCallback","id","getState","routes","every","key","Error","prevPrevented","get","nextPrevented","set","delete","isPrevented","some","useEffect","undefined","value","useMemo"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}