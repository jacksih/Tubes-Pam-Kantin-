{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gteSdkVersion = gteSdkVersion;\nexports.lteSdkVersion = lteSdkVersion;\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction gteSdkVersion(exp, sdkVersion) {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n  try {\n    return _semver().default.gte(exp.sdkVersion, sdkVersion);\n  } catch (_unused) {\n    throw new Error(exp.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}\nfunction lteSdkVersion(exp, sdkVersion) {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n  try {\n    return _semver().default.lte(exp.sdkVersion, sdkVersion);\n  } catch (_unused2) {\n    throw new Error(exp.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}","map":{"version":3,"sources":["../../src/utils/versions.ts"],"names":["gteSdkVersion","exp","sdkVersion","semver","gte","Error","lteSdkVersion","lte"],"mappings":";;;;;;;AACA,SAAA,OAAA,GAAA;EAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;EAAA,OAAA,GAAA,mBAAA;IAAA,OAAA,IAAA;EAAA,CAAA;EAAA,OAAA,IAAA;AAAA;;;;;;AAEO,SAASA,aAAT,CAAuBC,GAAvB,EAA4DC,UAA5D,EAAyF;EAC9F,IAAI,CAACD,GAAG,CAACC,UAAT,EAAqB;IACnB,OAAO,KAAP;EACD;EAED,IAAID,GAAG,CAACC,UAAJD,KAAmB,aAAvB,EAAsC;IACpC,OAAO,IAAP;EACD;EAED,IAAI;IACF,OAAOE,OAAAA,EAAAA,CAAAA,OAAAA,CAAOC,GAAPD,CAAWF,GAAG,CAACC,UAAfC,EAA2BD,UAA3BC,CAAP;EACD,CAFD,CAEE,gBAAM;IACN,MAAM,IAAIE,KAAJ,CAAaJ,GAAG,CAACC,UAAjB,2DAAN;EACD;AACF;AAEM,SAASI,aAAT,CAAuBL,GAAvB,EAA4DC,UAA5D,EAAyF;EAC9F,IAAI,CAACD,GAAG,CAACC,UAAT,EAAqB;IACnB,OAAO,KAAP;EACD;EAED,IAAID,GAAG,CAACC,UAAJD,KAAmB,aAAvB,EAAsC;IACpC,OAAO,KAAP;EACD;EAED,IAAI;IACF,OAAOE,OAAAA,EAAAA,CAAAA,OAAAA,CAAOI,GAAPJ,CAAWF,GAAG,CAACC,UAAfC,EAA2BD,UAA3BC,CAAP;EACD,CAFD,CAEE,iBAAM;IACN,MAAM,IAAIE,KAAJ,CAAaJ,GAAG,CAACC,UAAjB,2DAAN;EACD;AACF","sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\nimport semver from 'semver';\n\nexport function gteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(exp.sdkVersion, sdkVersion);\n  } catch {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n\nexport function lteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(exp.sdkVersion, sdkVersion);\n  } catch {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}