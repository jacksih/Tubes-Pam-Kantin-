{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBridgingHeaderFile = createBridgingHeaderFile;\nexports.ensureSwiftBridgingHeaderSetup = ensureSwiftBridgingHeaderSetup;\nexports.getDesignatedSwiftBridgingHeaderFileReference = getDesignatedSwiftBridgingHeaderFileReference;\nexports.linkBridgingHeaderFile = linkBridgingHeaderFile;\nexports.withSwiftBridgingHeader = exports.withNoopSwiftFile = void 0;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _XcodeProjectFile() {\n  var data = require(\"./XcodeProjectFile\");\n  _XcodeProjectFile = function _XcodeProjectFile() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar templateBridgingHeader = \"//\\n//  Use this file to import your target's public headers that you would like to expose to Swift.\\n//\\n\";\nvar withSwiftBridgingHeader = function withSwiftBridgingHeader(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    config.modResults = ensureSwiftBridgingHeaderSetup({\n      project: config.modResults,\n      projectRoot: config.modRequest.projectRoot\n    });\n    return config;\n  });\n};\nexports.withSwiftBridgingHeader = withSwiftBridgingHeader;\nfunction ensureSwiftBridgingHeaderSetup(_ref) {\n  var projectRoot = _ref.projectRoot,\n    project = _ref.project;\n  if (shouldCreateSwiftBridgingHeader({\n    projectRoot: projectRoot,\n    project: project\n  })) {\n    var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n    var bridgingHeader = createBridgingHeaderFileName(projectName);\n    project = createBridgingHeaderFile({\n      project: project,\n      projectName: projectName,\n      projectRoot: projectRoot,\n      bridgingHeader: bridgingHeader\n    });\n    project = linkBridgingHeaderFile({\n      project: project,\n      bridgingHeader: _path().default.join(projectName, bridgingHeader)\n    });\n  }\n  return project;\n}\nfunction shouldCreateSwiftBridgingHeader(_ref2) {\n  var projectRoot = _ref2.projectRoot,\n    project = _ref2.project;\n  var isObjc = (0, _Paths().getAppDelegate)(projectRoot).language === 'objc';\n  return isObjc && !getDesignatedSwiftBridgingHeaderFileReference({\n    project: project\n  });\n}\nfunction createBridgingHeaderFileName(projectName) {\n  return projectName + \"-Bridging-Header.h\";\n}\nfunction getDesignatedSwiftBridgingHeaderFileReference(_ref3) {\n  var project = _ref3.project;\n  var configurations = project.pbxXCBuildConfigurationSection();\n  for (var _ref4 of Object.values(configurations || {})) {\n    var buildSettings = _ref4.buildSettings;\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      if (typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER === 'string' && buildSettings.SWIFT_OBJC_BRIDGING_HEADER) {\n        return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;\n      }\n    }\n  }\n  return null;\n}\nfunction linkBridgingHeaderFile(_ref5) {\n  var project = _ref5.project,\n    bridgingHeader = _ref5.bridgingHeader;\n  var configurations = project.pbxXCBuildConfigurationSection();\n  for (var _ref6 of Object.values(configurations || {})) {\n    var buildSettings = _ref6.buildSettings;\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      buildSettings.SWIFT_OBJC_BRIDGING_HEADER = bridgingHeader;\n    }\n  }\n  return project;\n}\nfunction createBridgingHeaderFile(_ref7) {\n  var projectRoot = _ref7.projectRoot,\n    projectName = _ref7.projectName,\n    project = _ref7.project,\n    bridgingHeader = _ref7.bridgingHeader;\n  var bridgingHeaderProjectPath = _path().default.join((0, _Paths().getSourceRoot)(projectRoot), bridgingHeader);\n  if (!_fs().default.existsSync(bridgingHeaderProjectPath)) {\n    _fs().default.writeFileSync(bridgingHeaderProjectPath, templateBridgingHeader, 'utf8');\n  }\n  var filePath = projectName + \"/\" + bridgingHeader;\n  if (!project.hasFile(filePath)) {\n    project = (0, _Xcodeproj().addResourceFileToGroup)({\n      filepath: filePath,\n      groupName: projectName,\n      project: project,\n      isBuildFile: false,\n      verbose: false\n    });\n  }\n  return project;\n}\nvar withNoopSwiftFile = function withNoopSwiftFile(config) {\n  return (0, _XcodeProjectFile().withBuildSourceFile)(config, {\n    filePath: 'noop-file.swift',\n    contents: ['//', '// @generated', '// A blank Swift file must be created for native modules with Swift files to work correctly.', '//', ''].join('\\n')\n  });\n};\nexports.withNoopSwiftFile = withNoopSwiftFile;","map":{"version":3,"sources":["../../src/ios/Swift.ts"],"names":["templateBridgingHeader","withSwiftBridgingHeader","config","modResults","ensureSwiftBridgingHeaderSetup","project","projectRoot","modRequest","shouldCreateSwiftBridgingHeader","projectName","bridgingHeader","createBridgingHeaderFileName","createBridgingHeaderFile","linkBridgingHeaderFile","path","join","isObjc","language","getDesignatedSwiftBridgingHeaderFileReference","configurations","pbxXCBuildConfigurationSection","buildSettings","Object","values","PRODUCT_NAME","SWIFT_OBJC_BRIDGING_HEADER","bridgingHeaderProjectPath","fs","existsSync","writeFileSync","filePath","hasFile","filepath","groupName","isBuildFile","verbose","withNoopSwiftFile","contents"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { getAppDelegate, getSourceRoot } from './Paths';\nimport { withBuildSourceFile } from './XcodeProjectFile';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nconst templateBridgingHeader = `//\n//  Use this file to import your target's public headers that you would like to expose to Swift.\n//\n`;\n\n/**\n * Ensure a Swift bridging header is created for the project.\n * This helps fix problems related to using modules that are written in Swift (lottie, FBSDK).\n *\n * 1. Ensures the file exists given the project path.\n * 2. Writes the file and links to Xcode as a resource file.\n * 3. Sets the build configuration `SWIFT_OBJC_BRIDGING_HEADER = [PROJECT_NAME]-Bridging-Header.h`\n */\nexport const withSwiftBridgingHeader: ConfigPlugin = (config) => {\n  return withXcodeProject(config, (config) => {\n    config.modResults = ensureSwiftBridgingHeaderSetup({\n      project: config.modResults,\n      projectRoot: config.modRequest.projectRoot,\n    });\n    return config;\n  });\n};\n\nexport function ensureSwiftBridgingHeaderSetup({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}) {\n  // Only create a bridging header if using objective-c\n  if (shouldCreateSwiftBridgingHeader({ projectRoot, project })) {\n    const projectName = getProjectName(projectRoot);\n    const bridgingHeader = createBridgingHeaderFileName(projectName);\n    // Ensure a bridging header is created in the Xcode project.\n    project = createBridgingHeaderFile({\n      project,\n      projectName,\n      projectRoot,\n      bridgingHeader,\n    });\n    // Designate the newly created file as the Swift bridging header in the Xcode project.\n    project = linkBridgingHeaderFile({\n      project,\n      bridgingHeader: path.join(projectName, bridgingHeader),\n    });\n  }\n  return project;\n}\n\nfunction shouldCreateSwiftBridgingHeader({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}): boolean {\n  // Only create a bridging header if the project is using in Objective C (AppDelegate is written in Objc).\n  const isObjc = getAppDelegate(projectRoot).language === 'objc';\n  return isObjc && !getDesignatedSwiftBridgingHeaderFileReference({ project });\n}\n\n/**\n * @returns String matching the default name used when Xcode automatically creates a bridging header file.\n */\nfunction createBridgingHeaderFileName(projectName: string): string {\n  return `${projectName}-Bridging-Header.h`;\n}\n\nexport function getDesignatedSwiftBridgingHeaderFileReference({\n  project,\n}: {\n  project: XcodeProject;\n}): string | null {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      if (\n        typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER === 'string' &&\n        buildSettings.SWIFT_OBJC_BRIDGING_HEADER\n      ) {\n        return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n *\n * @param bridgingHeader The bridging header filename ex: `ExpoAPIs-Bridging-Header.h`\n * @returns\n */\nexport function linkBridgingHeaderFile({\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  bridgingHeader: string;\n}): XcodeProject {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.SWIFT_OBJC_BRIDGING_HEADER = bridgingHeader;\n    }\n  }\n\n  return project;\n}\n\nexport function createBridgingHeaderFile({\n  projectRoot,\n  projectName,\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  projectRoot: string;\n  bridgingHeader: string;\n}): XcodeProject {\n  const bridgingHeaderProjectPath = path.join(getSourceRoot(projectRoot), bridgingHeader);\n  if (!fs.existsSync(bridgingHeaderProjectPath)) {\n    // Create the file\n    fs.writeFileSync(bridgingHeaderProjectPath, templateBridgingHeader, 'utf8');\n  }\n\n  // This is non-standard, Xcode generates the bridging header in `/ios` which is kinda annoying.\n  // Instead, this'll generate the default header in the application code folder `/ios/myproject/`.\n  const filePath = `${projectName}/${bridgingHeader}`;\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addResourceFileToGroup({\n      filepath: filePath,\n      groupName: projectName,\n      project,\n      // Not sure why, but this is how Xcode generates it.\n      isBuildFile: false,\n      verbose: false,\n    });\n  }\n  return project;\n}\n\nexport const withNoopSwiftFile: ConfigPlugin = (config) => {\n  return withBuildSourceFile(config, {\n    filePath: 'noop-file.swift',\n    contents: [\n      '//',\n      '// @generated',\n      '// A blank Swift file must be created for native modules with Swift files to work correctly.',\n      '//',\n      '',\n    ].join('\\n'),\n  });\n};\n"]},"metadata":{},"sourceType":"script"}